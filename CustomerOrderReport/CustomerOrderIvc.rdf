---------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         CustomerOrderIvc.rdf
--
--  Date    Sign    History
--  ------  ------  ----------------------------------------------------------
--  220331  MBrant  Add Suplier_Site, Demand_Code_Db  for attaching Intercompany Invoice PDF's to External Supplier Records
--  220322  MBrant  Rmv Get all supplier addresses not just inter-company suppliers 
--  220311  MBrant  Chg Logic for Part Charactistics to include site DA, DS, DF.  Include English Translations
--  220215  MBrant  Add Supplier Address or (Shipped From Supplier Address).  This modification for DAP  
--  210621  MBrant  Chg Increase the size of Description_ variable from VARCHAR2(100) to VARCHAR2(2000) 
--  210614  MBrant  Add Harmonize_Code; Change Customs_Stat_No back to original value.  
--  210206  MBrant  Add Jinsui Flag for Deublin Dalian
--  210204  MBrant  Add Payment Method and Bank Account Info for Deublin Spain
--  210123  MBrant  Bug Customs_Stat_No 
--  201208  MBrant  Add Shipment ID and Delivery Note ID 
--  201022  MBrant  Add Salesman Phone Number and Email 
--  201005  MBrant  Add Payment Address for Germany 
--  200928  MBrant  Add Coordinator Phone Number
--  200622  MBrant  Add Condition for Tax_Id_No
--  200612  MBrant  Add Credit Card Block for Internet Orders 
--  200609  MBrant  Add Customer Default Language Code 
--  200609  MBrant  Add Total Part Weight at Line Level part weight * part quantity  
--  200603  MBrant  Add Total Part Weight at Total Invoice Level totaling all part weights * part quantities 
--  200421  MBrant  Added Item Class/Description and Item Weight/Description and Country of Origin Description 
--  191011  NiEdlk  Bug 150026 (SCZ-6948), Added missing start and end xml elements of NOTE_ITEM.
--  190519  NiNilk  Bug 147007 (SCZ-3504), Modified Report Invoice() to retrieve the delivery address from the RMA header when printing the credit invoice for RMA with a single occurrence address
--  190519          and when RMA was originated from a customer order.
--  190612  Chgulk  Bug 146331, Added INVOICE_BASE_CURR tags for indian localization invoice_copy_in_foreign_curr. 
--  190506  Chgulk  gelr:in_hsn_sac_codes, Bug 146645, Modified report method
--  190328  reanpl  Bug 147520, Modified Print_Invoice_Line___
--  190131  ChJalk  Bug 146434(SCZ-2886), Modified Report_Invoice to change the parameters passed to fetch the country_of_origin.
--  181205  UdGnlk  Bug 145568(SCZ-1937), Removed the logic of printing order label note with note text information which is not correct. Removed ORDER_LABEL_NOTE S160.
--  181020  ChBnlk  Bug 140588, Modified Report Invoice() and Print_Invoice_Line___() by removing first_correction_ivc_ from the cursors so that it can only consider the current invoice
--  181020          when printing the currency rate correction invoices. Modified Report Invoice() by reverting the correction done by bug 140963 and assigned print_tax_in_alternative_curr_ in to the new xml 
--  181020          element PRINT_TAX_IN_ALT_CURR.
--  181029  Nasrlk  Bug 144831, Switched on additional_tax_numbers_.--  181013  ErRalk  Bug 144243, Modified Print_Invoice_Line___ method to print Non-inventory sales part configuration details/media items.  
--  190124  PraWlk  Bug 146456, Modified the logic to correct the price/charge including tax values for RMB reprint modified.
--  181029  Nasrlk  Bug 144831, Switched on additional_tax_numbers_.
--  181013  ErRalk  Bug 144243, Modified Print_Invoice_Line___ method to print Non-inventory sales part configuration details/media items.  
--  180720  BudKlk  Bug 142660, Modified the method Print_Invoice_Line___() to remove making ref_invoice_id_ NULL in order to get the correct values when creating the correction invoice.
--  180710  NiLalk  Bug 142304, Modified Report_Invoice by adding a GET method call to obtain values for charge_type_desc_rec_ attribute.
--  180521  AsZelk  Bug 141237, Used source_tax_item_base_pub view instead of source_tax_item_pub.
--  180510  fiallk  Modified CPA_CODE fetching tag name to SERVICE_STATISTICS_NO
--  180508  ChJalk  Bug 135829, Modified the method Report_Invoice to enable custom fields for the LUs Invoice and InvoiceItem.
--  180503  WaSalk  Bug 125747, Modified Report_Invoice() method to replace the Date_Of_Duplicate tag of the original invoice report when printing the duplicate invoice.
--  180428  fiallk  Added cpa_code to the report
--  180425  reanpl  Bug 141485, Free of Charge enhancement in customer invoice line
--  180405  UdGnlk  Bug 140529, Modified Report Invoice() to access XML_REPORT_DATA_TAB through public interface when printing DUPLICATE report.
--  180226  ErFelk  Bug 140414, Modified Report Invoice() so that when printing orderless RMA with a single occurrence address, delivery address details should be
--  180226          taken from the RMA header.
--  180223  RaVdlk  STRSC-8671, Modified the if condition in Report Invoice method, to get correct discount amount when creating credit invoice report  
--  180222  IzShlk  STRSC-17321, Removed unnessary/usges TO_CHAR() within cursors.
--  180209  AsZelk  STRSC-16916, Modified Print_Invoice_Line___ method by increasing config_spec_desc_ charater length by 2000 from 100.
--  180122  ChJalk  Bug 139811, Modified method Report_Invoice to add D22 into the report table when RMB Reprint Original Duplicate. 
--  171219  KiSalk  Bug 139397, Set item_id and pos in ORDER_INFO_SERVICES_RPT too. Also inserted S164 (ORDER_LINE_NO) when reprint duplicate.
--  171215  Nasrlk  Bug 139303, Changed the length of certificate_jurisdiction.
--  171128  LaThlk  Bug 138472, Modified the Report_Invoice() by initialize the print_date_ using the site date in order to consider the time zone offset of the site.
--  171128  BudKlk  Bug 132164, Added fields HEADER_CORRECTION_REASON and CORRECTION_REASON in order to print the correction reason.
--  171122  Kagalk  CRUISE_629, Added comp_branch_id, comp_branch_desc, customer_branch.
--  171106  NiEdLk  SCUXX-907, Modified method Report_Invoice to update the latest_result_key when a modified invoice is reprinted as an original.
--  171027  KiSalk  Bug 138541, Set XML tag DATE_OF_DUPLICATE to have a value to show the date in proper date format in report.
--  171025  RuLiLk  Bug 137163, Added new method Add_Instal_Disc_Tax_Items___ to avoid repetitive code blocks.
--  171025          Enable tax calculation per tax code for discount items on installment for credit and correction invoices.
--  171025          Modified method to calculate total tax amount of discounts on installment using individual tax per tax code to correctly sum up displayed values.
--  171003  ChBnlk  Bug 137739, Modified the cursors get_order_row and get_header to select objkey to enable custom fields and modified the methods Print_Invoice_Line___() and Report_Invoice() to
--  171003          allow custom fields to CustomerOrderInvHead and CustomerOrderInvItem views.
--  170925  MAHPLK  STRSC-12033, Modified cursor get_vat_net_curr to get the discount amount against price including tax and consider net_curr_amount as tax  base amount when tax_calc_structure_id is NULL.
--  170803  ChBnlk  Bug 137046, Modified the cursor get_charges by removing the fetching of rowkey from customer_order_charge_tab in order to avoid selecting multiple records and 
--  170803          Modified the method Report_Invoice() by fetching the objkey of the customer_order_charge_tab by calling the method Get_Objkey() instead of getting from the cursor when enabling custom fields.
--  170725  WaSalk  Bug 135581, Modified the code so that tax_round_amount_ is not taken when calculating the vat_curr_amount_ for Prepayment Invoice Lines.
--  170703  NipKlk  STRSC-2566, Modified the relavent cursors to fetch the first credit correction invoice data where relevant and added new column DEB_TAX_CURR_RATE to the report view, followed by the
--  170703          corresponding xml tag to display the debit invoice currency rate depending on the before and after correction report segment. With the new currency rate correction only base currency tax
--  170703          rates will be affected in the report. Final tax totals section will be only displaying values for only base currency tax differences.  
--  170627  KiSalk  Bug 136639, Made changes to handle correction invoice of bug 136124. 
--  170627  KiSalk  Bug 136124, Made changes to fetch correct tax total amounts "for total level rounding", only when base currency and price including tax scenario, as supported by Finance. 
--  171023  NWeelk  GEM-202, Removed printout of Indian Excise Invoice.
--  170927  Nuudlk  GLOW-2487, Introduced state code number (seperate xml tag) and state name to the rdf 
--  170922  NWeelk  GLOW-2262, Added tax_type_category wise tax division and fee type to customer order invoice. 
--  170911  NWeelk  GLOW-2162, Removed printing Indian Excise Invoice and additional tax numbers.
--  170908  Nasrlk  GLOW -2331, Replaced value of state code with state_code_number for indian localization
--  171027  KiSalk  Bug 138541, Set XML tag DATE_OF_DUPLICATE to have a value to show the date in proper date format in report.
--  171024  LaThlk  Bug 138472, Modified the Report_Invoice() by initialize the print_date_ using the site date in order to consider the time zone offset of the site.
--  170913  ChBnlk  Bug 137739, Modified the cursors get_order_row and get_header to select objkey to enable custom fields and modified the methods Print_Invoice_Line___() and Report_Invoice() to
--  170913          allow custom fields to CustomerOrderInvHead and CustomerOrderInvItem views. 
--  170906  Nasrlk  GLOW- 2262, Added tax_type_category_ to customer order invoice 
--  170831  Nuudlk  GLOW- 2226, Adding HSN_SAC_CODE to customer order invoice 
--  170628  reanpl  Bug 134081, Merged. Errors on Polish invoice layout
--  170627  reanpl  Bug 133109, Merged. Confusing information on the print invoices
--  160626  reanpl  Bug 131335, Merged. Added colons to Payment Address. Modified Report texts.
--  170612  reanpl  Bug 135523, Merged. Modified Get_Delivery_Note2
--  170612  Frwopl  Bug 132751, Started fetching data before reading it (sales charge type description). Modified Report_Invoice.
--  170612  Frwopl  Bug 130296, Merged. Removed incorrect reassigning of cust_tax_id_number_. Modified Report_Invoice.
--  170602  Frwopl  Bug 129639, Merged. Fixed CURSOR get_tax_exempt_info, added supply_country_ to CURSOR get_header. Modified Report_Invoice.
--  170627  AsZelk  STRSC-8860, Added CUST_REF_DESC into into xml block CUSTOMER_ORDER_IVC_REP.
--  170301  LaThlk  Bug 134441, Modified the cursor get_charges() in order to get the rowkey of customer order charge records and enabled custom fields for the LU-CustomerOrderCharge. 
--  170119  Nuudlk  FU-5789 , Add Official Invoice number , Warehouse information , Customer tax ID number to the customer order invoice  layout ( Indoonesian Localization)
--  161012  JeeJlk  Bug 131759, Modified Report Invoice to pass absolute value of price_total_incl_tax_.
--  161004  RuLiLk  Bug 126029, Moved the column assignment code of char_rec_ from Report_Invoice () to Print_Invoice_Line___(), in order to print characteristics.
--  160930  ChJalk  Bug 131714,Reversed the correction done for the bug 129778.
--  160923  NiDalk  Bug 131429, Modified method Report_Invoice to calculate discount amount inside the mathod as cust_invoice_pub_util_disc.curr_amount is not updated with advance invoice discunts
--  160923          at the time of printing the invoice.
--  160830  RuLiLk  Bug 126053, Remove unwanted statement which gave null values for total other invoice amounts.
--  160830  RuLiLk  Bug 126053, Added new columns to the report view and related xml tags for TOT_PRE_INV_DEB_CORR, TOT_PRE_INV_CRE_CORR, TOT_ADVANCE_RECEIVED,
--  160830          PRE_CONSUMED_ADVANCE, PRE_UNCONSUMED_ADVANCE, ADVANCE_CONSUMED_CURRENT to display other invoices totals.
--  160830          Advance invoice section will be displayed only if the invoice is a Debit invoice or Correction Increase invoice. Modified the calculation of Other order invoice totals
--  160830          and advance invoice matched amount. Added two report texts TOT_PRE_INV_DEBIT_LABEL and TOT_PRE_INV_CREDIT_LABEL.
--  160623  SudJlk  VAULT-651, Replaced customer_Order_Address_API.Public_Rec with customer_Order_Address_API.Cust_Ord_Addr_Rec and 
--  160623          customer_Order_Address_API.Get() with customer_Order_Address_API.Get_Cust_Ord_Addr().
--  160610  BudKlk  Bug 129778, Modified the method Report_Invoice() to pass order header language code instead of default language code to method Type_Generic_Address_API.Get_All_Address_Lines.
--  160608  MaIklk  LIM-7442, Fixed the usages of renaming Customer_Order_Deliv_Note to Delivery_Note.
--  160530  Chgulk  STRLOC-473, Added new address fields.
--  160510  MaRalk  LIM-6531, Replaced Shipment_API.Get_Supply_Country_Db with Shipment_Freight_API.Get_Supply_Country_Db  
--  160510          in Report_Invoice method.
--  160412  NWeelk  STRLOC-265, Modified Report_Invoice to show free of charge line information in the tax totals section. 
--  160412  NWeelk  STRLOC-264, Modified Report_Invoice to show free of charge lines in the invoice.
--  160323  MeAblk  STRSC-1327, Renamed attribute sale_unit_price as price_per_price_unit.
--  160323  MaIklk  LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  160202  RasDlk  Bug 12125,  Added RENTAL_LINE_NO and RENTAL_ORDER_LINE_POS to the report view and modified Report_Collective_Invoice()
--  160202          to have different xml tags in blocks INVOICE_RENTAL_LINES and INVOICE_LINES.
--  151223  ApWilk  Bug 125961, Added a field COR_TOT_TAX_AMOUNT to display the total core base vat amount.
--  151216  ApWilk  Bug 125612, Added a field TOT_TAX_AMOUNT to display the total tax amount. 
--  151216  ErFelk  Bug 125378, Added NVL to tax_code_fee_amount_.
--  151204  reanpl  BRINSC9-030 Handling of Tax Code Structures in Customer Order
--  151201  marmpl  WARS-337, "Details of Central Excise Duty Passed on" - Supplier Name in the supplier address block
--  151201  marmpl  INFI9-080 Printout of Indian Excise Invoice
--  151117  Marmpl  INFI9-090 Printout of Indian Commercial Invoice (on base of IN8)
--  151119  IsSalk  FINHR-327, Renamed attribute VAT_NO to TAX_ID_NO in Customer Order Line and Customer Order.
--  151113  ChJalk  STRSC-165, Added the columns needed for the two blocks CORR_TAX_CODE_LINES and CORR_BASE_TAX_CODE_LINES.
--  151009  JeeJlk  Bug 125116, Enabled custom fields for ReturnMaterial LU and added cursor get_rma_header in Report_Invoice to fetch rowkey of the 
--  151009          RETURN_MATERIAL_TAB and used it to fetch information when an RMA number is available in the invoice header.
--  150928  ChJalk  Bug 123410, Added fields HEADER_INVOICE_TEXT and INVOICE_TEXT for printing the invoice texts.
--  151021  IsSalk  FINHR-197, Used FndBoolean in taxable attribute in sales part.
--  150922  MeAblk  Bug 124595, Modified Print_Invoice_Line___() to set the currency_rounding_ at correct place to avoid make it null.
--  150831  MeAblk  Bug 124228, Renamed the 'Delivery Location' and 'Delivery Terms Location' in the view comments.
--  150819  PrYaLK  Bug 121587, Modified Report_Invoice() by adding cust_part_invert_conv_fact to the get_order_row_customer_order cursor and modified the
--  150819          calculation of qty_invoiced_ by adding cust_part_invert_conv_fact.
--  150803  ChJalk  Bug 122920, Added the two blocks CORR_TAX_CODE_LINES and CORR_BASE_TAX_CODE_LINES for adding the tax code information for the correction invoice. 
--  150721  HimRlk  Bug 121215, Added PACKAGE_LINE_NO and PACKAGE_ORDER_LINE_POS to the report view and modified Report_Invoice()
--  150721          to have different xml tags in blocks PACKAGE_LINES and INVOICE_LINES.
--  150526  IsSalk  KES-510, Modified cursors with Customer_Order_Delivery_TAB to filter out cancelled CO deliver lines.
--  150721          to have different xml tags in blocks PACKAGE_LINES and INVOICE_LINES.
--  150720  AyAmlk  Bug 123589, Modified &METHOD() to indicate in the Report Archive note text when an E-invoice is created.
--  150721  ShKolk  Bug 123582, Modified Report_Invoice() to fetch value for TAX_FEE_AMOUNT when the invoice is not a Correction Invoice and no Prepayment exists.
--  150715  SWiclk  Bug 123585, Modified Report_Invoice() in order to save values of Duplicate Option and Date of Duplicate.
--  150624  RasDlk  Bug 121318, Modified Report_Invoice() to enable translations for Custom Field Enumerations.
--  150603  RuLiLk  Bug 122685, Removed the duplicate XML tag LINE_CUSTOMER_PO_NO.
--  150527  ChJalk  Bug 122252, Added fields COUNTRY_OF_ORIGIN and CUSTOMS_STAT_NO to the block INVOICE_LINE.
--  150520  MeAblk  Bug 122665, Modified the title of attribute rem_unconsumed_advance as Previous Unconsumed Advance.
--  150218  PraWlk  PRSC-6210, Modified the dynamic call for Invoice_Type_API.Get_Prel_Invoice_Series() to static as INVOIC is static to ORDER.
--  150211  MaRalk  EAP-1030, Modified method Print_Invoice_Line___ in order to have correct XML tags when package parts are included.
--  141208  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  141110  KiSalk  Bug 119630, Methods Get_Airway_Bill_No, Get_Delivery_Note and Get_Delivery_Note_Ref were merged into Get_Delivery_Info_Lists. Methods Get_Comp_Airway_Bill_No, 
--  141110          Get_Comp_Delivery_Note and Get_Comp_Delivery_Note_Ref were merged into Get_Comp_Delivery_Info_Lists.
--  141119  MeAblk  Bug 119795, Modified enabling custom fields for LUs by correcting some invalid xpaths.
--  140930  AyAmlk  Bug 118872, Modified &METHOD() to prevent printing the invoice label as preliminary when the invoice_no, generated from a number series other than
--  140930          the Preliminary Invoice Series, is same as the invoice_id_.
--  140917  TiRalk  Bug 116399, Modified Report_Invoice to avoid printing address information in line level if it is same as header address in RMA credit invoice.
--  140903  KoDelk  Bug 118573, Added user allowed company validation using the company related to the Customer order invoice.
--  140903  NWeelk  Bug 118572, Added LATEST_SHIP_DATE to the report view to replace WANTED_DELIVERY_DATE and used WANTED_DELIVERY_DATE to 
--  140903          display the wanted delivery date of the customer order header.
--  140807  BudKlk  Bug 118162, Modofied the procedure Report_Invoice in order to change the character size of the variable charge_type_desc_ to VARCHAR2(2000).
--  140729  IsSalk  Bug 117898, Added COR_TAX_CURR_CODE and PRE_TAX_CURR_CODE to store value of currency codes of prepayment and correction invoices tax totals 
--  140729          in order to avoid duplicate XML tag CURR_CODE in invoice report.
--  140725  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140724  ShKolk  Added price_incl_tax columns instead of calculations.
--  140613  TiRalk  Bug 117412, Modified value cust_ref_name_ to get the value properly when invoicing customer exists.
--  140529  KoDelk  Bug 117142, Removed fetching the language code again when transaling the tax code. Used the already fetched language code which was fetch from RMA.
--  140516  BudKlk  Bug 116840, Modified procedure Report_Invoice to display the description changes of the charge line in the reports according to the customer invoice.
--  140508  BudKlk  Bug 116724, Modified procedure Report_Invoice in order to print the base currency tax line in correction invoice properly.
--  140430  PeSulk  Added new method Print_Invoice_Line___. Added new variables RENTAL_TRANSACTION_START_DATE, RENTAL_TRANSACTION_END_DATE, ON_RENTAL_QTY, INVOICED_DURATION_DAYS
--                  to store rental data.
--  140430  MaRalk  PBSC-8545, Merged bug 116368, Modified method Report_Invoice to retrieve supply country from the shipment for a shipment invoice 
--  140430          so that the header tax id is fetched correctly. 
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  140324  RoJalk  Replaced the usage of Statutory_Fee_API.Get_Fee_Type with Statutory_Fee_API.Get_Fee_Type_Db.
--  140307  TiRalk  Bug 115784, Modified cursor get_original_records to get data from ORDER_INFO_SERVICES_RPT to show data when duplicate a original report from another user.
--  130830  HimRlk  Merged Bug 110133-PIV, Calculation logic of line discount amount is modified to be consistent with discount postings.
--  140127  AyAmlk  Bug 115006, Modified Report_Invoice() by changing the WHERE clause of the get_vat_net_curr_cre and get_vat_net_curr_deb cursors in order to prevent calculating the
--  140127          net_curr_amount and net_gross_amount incorrectly when the amount signs are different.
--  131219  ChBnlk  Bug 114426, Enabled custom fields for CustomerOrder LU and modified cursor get_header_customer_order in Report_Invoice to fetch rowkey of the 
--  131219          CUSTOMER_ORDER_TAB and used it to fetch information when an order number is available in the invoice header.
--  130924  NWeelk  Bug 111252, Modified CUSTIVCADDMSG by making it a single line and changed display text to Add Disc. %. 
--  130920  TiRalk  Bug 106413, Added VAT_REDUCTION_AT_PAY VAT to store value of Reduction at Cash Discount check box in Company\Payment/General\Discount managment.
--  130819  NiDalk  Bug 111845, Modified Report_Invoice. Modified get_delivery_info cursor to fetch qty_invoiced instead of qty_shipped.
--  130918  KiSalk  Bug 111498, Removed join with customer_order_line_tab from count_ship_dates_rma_no and company added to where clause. also added company to where clause of
--  130918          cursors get_order_row, get_order_no, get_invoice_line_no, check_real_ship_date, check_real_ship_date_package, exist_charges and get_tax_inv_no.
--  130918          Merged cursors get_pay_method_from_install and get_installment_id to get_pay_plan_detail. Removed duplicate variable reference_inv_id_ and used ref_invoice_id_ instead.
--  130918          Removed a duplicated Customer_Order_API.Get_Customer_Po_No call.
--  130823  NWeelk  Bug 111252, Moved additional discount from header to line level and fetched additional discount from the invoice item.
--  130816  IsSalk  Bug 111274, Modified Report_Invoice to get the Customer's Tax ID according to the delivery country.
--  130712  TiRalk  Bug 111269, Added SERIAL_NO to report view.
--  130708  UdGnlk  TIBE-982, Removed global variables and modify to conditional compilation.
--  130630  RuLiLk  Bug 110133, Calculation logic of line discount amount is modified to be consistent with discount postings.
--  130625  JuKoDE  EDEL-2132, Modified IF stmt print_tax_in_bcurr_ db value to &METHOD()
--  130619  ChBnlk  Bug 110533, Modified procedure Report_Invoice to fetch vat sums in both credit and debit tax lines using a single cursor
--  130619          and removed the additional code blocks that were used to display the invoice lines in credit and debit invoices separately.
--  130522  TiRalk  Bug 109039, Modified title of wanted_delivery_date from Latest Delivery Date to Latest Ship Date.
--  130508  MalLlk  Bug 107841, Get the pos value from View CUSTOMER_ORDER_INV_ITEM, instead of generating it seperately.
--  130426  SALIDE  EDEL-2121, changed the 'get_advance_invoices' CURSOR to use CUST_INVOICE_PUB_UTIL_HEAD instead of CUSTOMER_ORDER_INV_HEAD
--  130403  ChBnlk  Bug 109020, Modified procedure Report_Invoice to fetch vat_no correctly when order_no is empty.
--  130321  SBalLK  Bug 108601, Added cursor get_corr_tax_base_amt to fetch tax base amount differance in correction invoice with previous invoice.
--  130318  TiRalk  Bug 108973, Added BASE_NET_CURR_AMOUNT to report view.
--  130315  TiRalk  Bug 108973, Replaced BASE_NET_CURR_AMOUNT with EUR_NET_CURR_AMOUNT to correct a build issue.
--  130315  TiRalk  Bug 108818, Modified report method to display BASE_NET_CURR_AMOUNT in table since it displayed in EUR_NET_CURR_AMOUNT.
--  130311  TiRalk  Bug 108818, Reversed bug correction 95150 since removed block BASE_CURR_TOTAL_ITEMS should be remained.
--  130226  SALIDE  EDEL-2020, changed the use of company_name2 to name
--  130207  SBalLK  Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  130102  TiRalk  Bug 107381, Modified get_order_row by altering ORDER BY only from item_id to display the Pos in report layout according to the sequence properly.
--  130102  JuMalk  Bug 106338, Modified method Report_Invoice. Set the language of the original report upon RMB - Reprint Original Duplicate. 
--  130102  NWeelk  Bug 107568, Added new item ORDER_REL_NO to the block INVOICE_LINES.
--  121205  PraWlk  Bug 106962, Added CHARGE_VAT_PERCENT and LINE_VAT_PERCENT to the result set to get them populated in CUSTOMER_ORDER_IVC_REP.
--  121015  TiRalk  Bug 105341, Modified method Report_Invoice by adding new report column NET_SALES_PRICE_CURR to display net sales price.
--  120925  TiRalk  Bug 104458, Length of initial string to concatenate set to start_pos_+23 because start_pos_ is the first character of '<CUSTOMER_ORDER_IVC_REP>' of length 24.
--  120925          Also added tags INVOICE_LINE_TYPES and INVOICE_LINE_TYPE if they are missing so that order lines displayed in duplicate.
--  120918  KiSalk  Bug 103990, Changed assigning value to same_as_header_contact_ and cust_line_ref_name_ depending on default_addr_flag.
--  120823  SudJlk  Custom Fields enabled for the report.
--  120730  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability  and fetch data with location specific and removed unused
--  120730          defined DOCSTAGED and undefined DOCSTAGED.
--  120705  AyAmlk  Bug 102961, Modified the method Report_Invoice in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120705          CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120608  SBallk  Bug 102291, Modified Get_Delivery_Note and Get_Comp_Delivery_Note to fetch the branch specific document note number. 
--  120523  Janblk  EDEL-748, Added Address positioning
--  120510  Janblk  EDEL-611, Added document address  
--  120426  NWeelk  Bug 102109, Modified report method to show the parent child relationship between INVOICE_LINE, STAGED_BILLING_ITEM and BILLING_DOC_TEXT.  
--  120308  Darklk  Bug 101588, Modified method Report_Invoice by changing the total discount calculation in order to balance the discount amounts according to the postings.
--  120216  GiSalk  Bug 101260, Modified method Report_Invoice by removing variable next_row_revised_qty_due_.
--  120214  Janblk  EDEL-555, Added Document Footer details  
--  120213  GiSalk  Bug 94416, Modified method Report_Invoice by adding column qty_per_assembly to cursor get_package_part and using the value of
--  120213          qty_per_assembly in the calculation of invoiced quantity of package components.
--  120130  NaLrlk  Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  120123  JeeJlk  Used inv_rec_.identity instead of customer_no_ in report table, when original_duplicate is true, because do_rs_ might not be true
--  120123          in certain environments.
--  120111  JeeJlk  Used customer_no_ variable to add Customer No both in archieve note and report to minimize conflicts
--  111210  PraWlk  Bug 100296, Added Customer No to the archive notes which are to be displayed in the InfoServices archive. 
--  111021  IsSalk  Bug 99039, Modified method Report_Invoice by moving the code section to get correct print_tax_db_ values, 
--  111021          when invoice has a payee other than the ordering customer.
--  110120  ChJalk  Bug 95150, Removed report text BASE_TOT_EX_TAX and block BASE_CURR_TOTAL_ITEMS.
--  110926  ChJalk  Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110920  JuMalk  Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110913  JuMalk  Bug 95015, Modified column name TOTAL_AMOUNT back to TOT_PAID_IN_ADVANCE. Added TOT_AD_PAY_MATCHED_AMOUNT as a new column
--  110913          to hold the total of AD_PAYMENT_MATCHED_AMOUNT. 
--  110913  JuMalk  Bug 95015, Added new column AD_PAYMENT_MATCHED_AMOUNT and modified advance invoices block in the report method.
--  110913          Modified column name TOT_PAID_IN_ADVANCE to TOTAL_AMOUNT and variable tot_paid_in_advance_ to total_amount_.   
--  110829  KiSalk  Bug 98012, Added column tax_fee_base_amount and added in TAX_CODE_LINE section. Added cursor get_tax_code_dom_tot.
--  110826  MaMalk  Cleanup of code to retrieve the company tax id into the page footer.
--  110822  SaJjlk  Bug 94883, Added code to pass order language to Type_Generic_Address_API.Get_All_Address_Lines for email purpose.
--  110221  NiDalk  Bug 95857, Changed view comments of PRICE_QTY and QTY_INVOICED to change the titles.
--  110810  NWeelk  Bug 96830, Added columns GRP_SUM_INCL_TAX and SUB_TOTAL_INCL_TAX to the report.
--  110727  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110712  ChJalk  Modified usage of view CUSTOMER_ORDER_CHARGE to CUSTOMER_ORDER_CHARGE_TAB in cursors.
--  110711  ChJalk  Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110630  TiRalk  Bug 96036, Modified method Report_Invoice by adding comma seperators to ship_addr_line_ to identify them easily
--  110630          when printing single occurance address in the report.
--  110622  AmPalk  Bug 97650, Lot batch numbers only relevant to the deliveries related to the invoice will get added to the LOT_BATCH_NO column.
--  110520  SudJlk  Bug 96463, Modified method Report_Invoice to fetch the correct translation for the copy label. 
--  110512  IsSalk  Bug 96217, Modified method Report_Invoice by adding if statement inorder to avoid print LINE_SHIP_ADDR_1 for prepayment invoice lines.
--  110507  jofise  EASTONE-15646, Added functionality to print tax number in the correct footer column. 
--  110504  JeLise  Removed unused party from cursor get_header in Report_Overview.
--  110420  NiDalk  Bug 95618, Initialized ord_row_rec_ in the main method before fetching data.
--  110307  jofise  Added tax id number to the report footer.
--  110303  PAWELK  Removed sales_charge_type from cursors and replaced it with sales_charge_type_tab.
--  110127  MiKulk  Updated the logic to fetch the company tax id number and tax id type from the customer invoice header.
--  110125  NiDalk  Bug 95378, Corrected the displayed vat_percentage in tax lines.
--  101025  AmPalk  Bug 93738, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  101019  ShKolk  Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100928  ChJalk  Bug 93206, Modified the method Report_Invoice for including the RMA charge lines into the cursor 
--  100928          get_charges and modified the start element and end element of CHARGE_TYPE_ITEMS to open and close the CHARGE_TYPE_ITEMS block properly.
--  100630  JuMalk  Bug 91543, Modified the report method by introducing variable cust_line_ref_name_ to hold the customer contact name of the order line.
--  100630          if the contact name is not avalable it will have the contact id.
--  100601  RaKalk  Bug 90791, Added new item ORDER_LINE_NO to block INVOICE_LINES.
--  100510  RaKalk  Bug 90522, Modified report method to uncomment the code block which inserts result set data of advance invoices.
--  100506  AmPalk  Bug 90046, Made catalog_desc_ size 2000 in Split_Pagefooter___.
--  100504  NWeelk  Bug 90016, Increased the length of the column AIRWAY_BILL_NO to 2000.
--  100427  NWeelk  Bug 90016, Added column AIRWAY_BILL_NO and added methods Get_Airway_Bill_No and Get_Comp_Airway_Bill_No.
--  100226  Cpeilk  Bug 88753, Modified CURSOR get_charges to sort the charge lines as they appear on the invoice lines.
--  100224  MaMalk  Passed the party type parameter to Comm_Method_API.Get_Default_Value correctly when retrieving the customer fax.
--  100108  Umdolk  Refactoring in Communication Methods in Enterprise.
--  091001  MaMalk  Modified the report method, Calculate_To_Base___ and Calc_To_Euro___ to remove unused code.
---------------------------14.0.0---------------------------------------------
--  100212  SaJjlk  Bug 88864, Moved code blocks for inserting values to TYPE_DOC_TEXT and ROW_DOC_TEXT to the correct place.
--  100212  SaJjlk  Bug 88864, Moved code blocks for inserting values to TYPE_DOC_TEXT and ROW_DOC_TEXT to the correct place.
--  100105  SaJjlk  Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_DESC in invoice line level.
--  091217  SaJjlk  Bug 86036, Added new view to hold DOCUMENT_PHRASE.
--  091209  NWeelk  Bug 87148, Added separate columns for the repeating columns in the CUSTOMER_ORDER_IVC_REP view.
--  091206  NWeelk  Bug 86036, Moved end tag of the STAGED_BILLING_ITEM inside the FOR LOOP.
--  091126  NWeelk  Bug 86036, Added seperate code blocks for PART_CATALOG_DOC_TEXT, INVENT_DOC_TEXTS, WARRANTY_DOC_TEXT, 
--  091126          STAGE_NOTE_TEXTS, GROUP_DOC_TEXT, TYPE_DOC_TEXT, ROW_DOC_TEXT and CUSTOMER_DOC_TEXT.
--  091104  SudJlk  Bug 85472, Modified method Report_Invoice to correctly set invoice_copy_label_. 
--  091103  NWeelk  Bug 86711, Increased the length of the variable region_district_ in method Report_Invoice to 200.
--  091015  SudJlk  Bug 86479, Modified method Report_Invoice to retrieve correct Customer Communication Method information.
--  091001  Castse  Bug 85017, Added IF statement to make sure that the correct order_no is submitted when creating credit invoice from RMA.
--  090930  AmPalk  Bug 70316, Rounded price_total_incl_tax_ and charge_incl_tax_total_ using order currency's rounding setting.
--  090928  SaJjlk  Bug 86036, Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES to the insert statement for ORDER_INFO_SERVICES_RPT.
--  090903  NWeelk  Bug 74024, Modified cursor get_vat_net_curr to calculate the total_discount_amount correctly.
--  090901  NWeelk  Bug 85081, Modified Report_Invoice method to print tax amounts correctly in the correction invoice printout.
--  090824  RaNrlk  Bug 84968, Modified the report method to include a dynamic call to Payment_Doc_Series_API.Get_Def_Series.
--  090728  NWeelk  Bug 84962, Removed the logic written to set the layout.
--  090721  ChJalk  Bug 83991, Modified the method Report_Invoice to copy all the columns of original report
--  090721          and replace DATE_OF_DUPLICATE and DUPLICATE_OPTION to the current site date and 'TRUE' respectively
--  090721          for printing exactly the same data as in the original report with the label 'DUPLICATE' and the current
--  090721          site date as the date of duplicate.
--  090713  NaWilk  Bug 84555, Added column HEADER_ROW_NO into CUSTOMER_ORDER_IVC_REP.
--  090630  NWeelk  Bug 83948, Modified the CURSORS check_real_ship_date and check_real_ship_date_package by adding cust_delivery_inv_ref_tab details 
--  090630          to fetch the date_delivered correctly for a particular invoice line.
--  091013  MaHplk  Modified get_vat_net_curr, get_vat_net_curr_cre and get_vat_net_curr_deb to fetch the correct net_gross_amount. 
--  090716  MaJalk  Bug 83121, Changed the data type of gtin no to string. 
--  090730  MAHPlK  Modified view comment 'Charge % Basis/Curr' to 'Charge % Basis'.
--  090605  LeSvse  Bug 82689, Removed space in report text CUSTIVCADDMSG1, 'Additional Discount '. Added space in layout.
--  090605  MaRalk  Bug 76870, Added columns BIC_CODE_HEAD and BIC_CODE_LINE to display the BIC/Swift Code in the header 
--  090605          and in the Installment Plan and Cash Discounts block. Modified method Report_Invoice. 
--  090527  DaGulk  Bug 79264, When the tax code is NO VAT, the tax percentage shown is set to NULL.
--  090513  ChJalk  Bug 77183, Modified the logic to get the enabled layout and modified the value set for layout_type_ variable.
--  090420  NWeelk  Bug 81321, Modified an IF condition to handle the value of header_print_control_code_ correctly to print Characteristics in the Invoice report
--  090420          and corrected misspelled PACKAGE_LINE_CHARACTERISTICS.
--  090306  ChJalk  Bug 81009, Modified the method Report_Invoice to add NVL in the call retrieving Default Correction Invoice Type.
--  090305  SaJjlk  Bug 79852, Modified the values passed to cursors get_discount_details, count_discount_details, get_pay_method_from_install  
--  090305          and get_installment_id to consider the paying customer.
--  090219  ChJalk  Bug 79989, Added column INVOICE_LINE_NO to display the related invoice line no for each charge line if connected invoice lines exists.
--  081208  NaLrlk  Bug 78834, Increased the customer_part_desc column length to 200.
--  081201  HoInlk  Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081013  DaZase  Bug 76276, Moved method Calculate_To_Base___ and added currency_rate_type_ parameter to that method. 
--  081013          Added parameters currency_rate_type_, euro_company_, rate_, customer_no_, base_curr_code_ to method Calc_To_Euro___ and rewrote that method.
--  081013          Removed obsolete Is_Emu___ method. Added currency_rate_type to cursor get_header. Removed old Is_Emu___ check. 
--  081013          Added the new parameters to all calls to methods Calculate_To_Base___/Calc_To_Euro___. 
--  081010  NaLrlk  Bug 74689, Corrected the ship_address fetching value for the RMA Credit Invoices.
--  080924  HoInlk  Bug 67780, Modified to use internal_po_no as customer po_no when value exists for column and
--  080924          use customer_po_no in customer_order_inv_item as line_customer_po_no.
--  080918  ThAylk  Bug 74915, Replaced header_rec_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT. 
--  080911  DaZase  Bug 76635, changed when sales_part_desc_ should get a value from checking if it exists in sales part cross reference 
--  080911          to check if customer part no has a value, also added so it will primarly fetch a language specific description if it exist.
--  080904  ThAylk  Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080828  ThAylk  Bug 76552, Increased the length of bank_account_text_ to 2000 from 1000 in Report_Invoice method. 
--  080821  SaJjlk  Bug 75156, Added xml code for passing SEVERAL_VALUE.
--  080807  SuJalk  Bug 76103, Added a new block to calculate line totals if for non corrective invoices in method Report_Invoice.
--  080801  SaJjlk  Bug 74834, Added column TAX_FEE_AMOUNT and modified the column for inserting tax amount in TAX_CODE_LINE section.
--  080703  RoJalk  Bug 74434, Rounded the net_gross_amount value using the currency_rounding_ 
--  080703          when retrieving the net_gross_amount from cusrors get_vat_net_curr_cre,get_vat_net_curr_deb in method Report_Invoice.
--  080630  SuJalk  Bug 74432, Modified the IF condition to show tax totals if a debit invoice line has negative quantity. Also changed the line discount amount calculation
--  080630          to display the line discount amount properly in method Report_Collective_Invoice.
--  090423  MaHplk  Added CHARGE_PERCENT and CHARGE_PERCENT_BASIS.
--  080702  MaHplk  Merged APP75 SP2.
--------------------APP75 Sp2 Merge - End -----------------------------------
--  080527  SuJalk  Bug 74355, Changed the view comment of VERBALLY_INVOICE_AMOUNT to Verbally from Verbally Invoice Amount in CUSTOMER_ORDER_IVC_REP.
--  080515  MaRalk  Bug 72385, Added column REPORT_FOOT and modified method Report_Invoice. 
--  080416  SaJjlk  Bug 72131, Added DELIVERY_NOTE_REF on the package component level and methods Get_Comp_Delivery_Note and Get_Comp_Delivery_Note_Ref.
--  080416  Chjalk  Bug 72108, Modified the logic to select the default layout if there is no active layout.
--  080328  Chjalk  Bug 72108, Modified the logic to select the default layout if the layout CustomerOrderIvcRep.xsl is not active.
--  080331  MaMalk  Bug 72487, Modified the report method to get the payment method desc and the cash account text in customer's language.
--  080326  SaJjlk  Bug 71181, Added new blocks for handling document text on line level and added new column RETURN_LINE_NOTES.
--  080311  ThAylk  Bug 72069, Added missing ifs_assert_safe annotation.
--  080310  MaRalk  Bug 72026, Removed setting print_amount_verbally_ to 'TRUE' incorrectly in method Report_Invoice.
--  080227  SaJjlk  Bug 71273, Modified the cursor get_delivery_note_ref in method Get_Delivery_Note_Ref to have a GROUP BY clause.
--------------------APP75 SP2 Merge - Start -------------------------------------
--  080516  MaHplk  Added GTIN_NO.
--  080403  MaHplk  Added Classification Part No and Classification Unit Meas. 
--  080130  NaLrlk  Bug 70005, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to the order header and order line.
--  080108  SaJjlk  Bug 69557, Added column DELIVERY_NOTE_REF and added method Get_Delivery_Note_Ref.
--  080103  ThAylk  Bug 70047, Modified the method Report_Invoice to fetch short_name_ from Payment_Plan_API.  
--  071211  MaMalk  Bug 68626, Modified the report method to remove variables tax_curr_rate, base_gross_curr_amount_ and base_vat_curr_amount_ and
--  071211          removed the use of Calculate_To_Base___ to calculate the tax dom amounts.
--  071204  NaLrlk  Bug 69634, Modified the format of parameters valid_from_ and valid_until_ in server call for tax_text_.
--  071130  ThAylk  Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  071128  PrPrlk  Bug 69156, Moved the delivery note numbers from invoice header level to the line level.
--  071022  MaMalk  Bug 67623, Added LINE_CUSTOMER_PO_NO and did the necessary modifications to show correct Customer Po No.
--  071015  RaKalk  Bug 67954, Changed fetch of customer_part_no_ from Sales_Part_Cross_Reference_API to Customer_Order_Line_API.
--  070912  NuVelk  Bug 66972, Modified method Report_Invoice, to correctly display discount percentage.
--  070911  NiDalk  Added INVENTORY_PART_NOTES and PART_CATALOG_NOTES.
--  070910  RoJalk  Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910          the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070824	ChBalk  Modified fee_amount functionality in customer order invoice report.
--  070801  RoJalk  Modified the logic to fetch the documnet text of the part no and language combination.
--  070717  KaDilk  Bug 65932, Changed method Split_Pagefooter___ to take only 100 characters to variable tmp_.
--  070712  MiKulk  Bug 62931, Modified Function Check_Company_Country_Code, replace default document address with Company's country in variable country_code_.
--  070612  AmPalk  Changed the type of the field sales_part_desc_.
--  070517  NaWilk  Modified concatination of line_notes_ in order to prevent blank lines in layouts. Modified line_disc_amount title to Disc. Amount.
--  070509  IsAnlk  Modifed sales_part_note_id_ to get document texts from Part Catalog according to the order language used.
--  070509  KaDilk  Corrected the report method as credit invoice with charges only do not print amounts.
--  070424  WaJalk  Bug 64275, Used the view  cust_invoice_pub_util_item along with an additional where condition, instead of the view customer_order_inv_item
--  070424          in the CURSOR get_vat_net_curr of the procedure Report_Invoice. Changed the title from Tax Amount to Fee Amount of column fee_amount.
--  070423  IsAnlk  Modifed sales_part_note_id_ to get document texts from Part Catalog when centralized description is used.
--  070417  AmPalk  Bug 64283, Added condition to check whether the layout type is DESIGNER to set layout name correctly.
--  070330  NaWilk  DIPL606A, Modified code to handle prel_update_allowed_ correctly.
--  070323  MalLlk  Bug 60882, Changed the retrieving of vat_no_ to get value from CO header and line_vat_no_ from CO line.
--  070312  MiKulk  Bug 63865, Added more conditions to check whether the delivery address on header is same as the line.
--  070306  WaJalk  Bug 61985, Modified view CUSTOMER_ORDER_IVC_REP and report method, to increase length of column/variable customer_po_no from 15 to 50.
--  070302  AmPalk  Bug 61917, Modified code to retrive installment details from method Invoice_API.Get_Simulated_Payment_Plan
--  070302          and removed cursors count_plan_details ,get_installment_details and variable count_plan_.
--  070222  NuVelk  Added Invoice No, Series Id and Tax Amount for Connected PBI in CO lines.
--  070206  ChBalk  Removed extra condition payment_method when getting bank_account details.
--  070118  ChBalk  Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117  ChBalk  Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  070117          invoice_customer_order_head did not changed.
--  061222  NuVelk  Bug 62215, Modified the method Report_Invoice to avoid ORA error when printing a zero Customer Invoice.
--  061211  NaWilk  Modified to show correct invoice title when there are prepayment lines.
--  061124  NaWilk  Modified to show Prepayment Lines.
--  061106  Cpeilk  DIPL606A, Removed hard coded correction invoice types and called from Company_Invoice_Info_API.
--  061103  ChBalk  Removed the use of Company_Invoice_Info_API.Get_Print_Inv_Amount_Verbally from the file temporally.
--  061010  ChJalk  Modified to print fee amount and rounding amount correctly for the correction section.
--  060928  KaDilk  Bug 59140, Modified METHOD Report_Invoice in order to change the values assigning for 
--  060928          CATALOG_NO ,CATALOG_DESC, CUSTOMER_PART_NO, CUSTOMER_PART_DESC fields.
--  060824  MalLlk  Removed the conversion of date type attributes REF_INVOICE_DATE, DATE_OF_DUPLICATE and REF_INVOICE_LINE_DATE to char.
--  060817  SaRalk  Increased length of variable ship_addr_1_.
--  060817  MaMalk  Changed the title of INSTALLMENT_ID. 
--  060816  ChBalk  BANK_ACCOUNT_TEXT added to the report
--  060804  ChBalk  VERBALLY_INVOICE_AMOUNT placed correctly within the report preview.
--  060731  MalLlk  Corrected the values of total_unit_price_ and tax_base_amount_ for debit normal invoice, when the company has Invoice Fee Amount.
--  060724  ChJalk  Corrected the calculation of Tax_Base_Amount and Tax_Amount in correction section of correction invoices.
--  060718  ChJalk  Multiplied base_net_curr_amount_ and BASE_VAT_SUM by item_sign for debit lines
--  060717  ChBalk  Added site_date for the date_of_duplicate instead of sysdate.
--  060707  ChJalk  Added Block DISCOUNT_TAX_ITEM in Installment Items block. 
--  060628  ChBalk  Modified the use of Currency_Invoice_Info_API.Get_Print_Tax_In_Base_Currency according to the modified functionality
--  060626  MiErlk  Removed the RULE hint, Because it disables the use of the optimizer.
--  060616  ChJalk  Added parameter series_id to the call Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No in all the places.
--  060605  SaRalk  Enlarge Part Description - Changed variable definitions.
--  060605  NaLrlk  Enlarge Part Description - Changed variable definitions.
--  060602  ChBalk  Added DESCRIPTION to the BASE_CURR_TAX_LINE section
--  060601  MiErlk  Enlarge Identity - Changed view comments Description.
--  060601  ChJalk  Removed multiplying price_incl_tax_ and price_total_incl_tax_ by item_sign_ when inserting. 
--  060531  JaJalk  Bug 55265, Modified the method Report_Invoice to print discount amounts for Tax in the Installment Plan.
--  060526  ChJalk  Made changes to replace Latest Delivery Date with Wanted Delivery Date;
--  060524  ChBalk  Modified invoice original result key updation, added extra condition to update only for the first time.
--  060522  ChJalk  row_no_ was increased by 1 after adding data into the report table correctly.
--  060522  ChBalk  Added PAYMENT_METHOD, BANK_ACCOUNT, PAYMENT_METHOD_LINE, BANK_ACCOUNT_LINE, TAX_CURR_RATE attributes.
--  060519  SaRalk  Enlarge Address - Changed variable definitions.
--  060518  ChJalk  Made changes to add Correction Invoice Layout.
--  060517  SuJalk  Bug 57998, Changed the Report method to add a substr function when assigning a value to translated_paytermdesc_ variable.
--  060509  ChBalk  Made title 'Debit Invoice Ref No' to 'Ref Invoice No'.
--  060508  ChBalk  Added report_text DUPLICATE and column duplicate_option to the report.
--  060508          Modified Print_Report method to print duplicate, origninal, copy text correctly.
--  060428  ChBalk  Added new columns base_fee_amount, gross_amount_in_curr, verbally_invoice_amount, 
--  060428          ref_invoice_date, date_of_duplicate.
--  060419  JaJalk  Bug 56429, Modified the method Report_Invoice to correct the Total Discount of Tax Totals. 
--  060419  IsWilk  Enlarge Customer - Changed variable definitions.
--  060418  MaJalk  Enlarge Identity - Changed view comments customer_no.
------------------------------------- 13.4.0 ---------------------------------
--  060323  JaJalk  Modified the cursor get_total_discount to fetch the total discount for tax the tax code.
--  060322  DaZase  Using the old discount to hold the total line discount instead and old order discount will not be used anymore.
--                  Added LINE_VAT_PERCENT and CHARGE_VAT_PERCENT. Added cursor get_total_tax_percent.
--  060310  JaJalk  Corrected tax percentages which is displayed separately.
--  060309  DaZase  Changed some view comments. Removed PRINT_TAX_DB as an inparam.
--  060214  SaRalk  Modified the values for offset_amount_excl_tax_, tax_amount_ and offset_amount_incl_tax_ for other invoices.
--  060110  ChJalk  Bug 55256, Modified method Report_Invoice to store original result key and life was increased to 1000.
--  051228  SaNalk  Added US/Canada Layout to merge LCS 40851.
--  051223  SaRalk  Removed the code for setting layout_name to CustomerOrderIvcRep_ltr.xsl if paper_format_ is LETTER.
--  051223  LaBolk  Bug 55220, Modified method Report_Invoice (METHOD) to add a new condition for printing tax in base currency.
--  051214  ChJalk  Bug 54957, Real Ship Date was taken from customer_Order_Delivery_Tab in method Report_Invoice and modified the
--  051214          Method for showing each real ship date when there are multiple ship dates for the same Customer Order Line. 
--  051208  SaRalk  Added field PRINT_ADV_PAY_ON_CU_INV to the view and modified data fetch in advance invoices and other invoices
--  051208          to show only paid details.  
--  051124  LaBolk  Bug 53772, Modified Report_Invoice to fetch the correct debit invoice no for a credit invoice created through RMA.
--  051102  ChJalk  Bug 54269, Modified the method of getting description of the Tax code in Method Report_Invoice. 
--  051021  MaJalk  Bug 53938, Changed function call from Get_Value() to Get_Default_Value() to take Fax and eMail.
--  051014  DaZase  Changed Site_API.Display_Cond_Customer_Order call to Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db.
--  051007  DaZase  Changes in the report to support the new Argentinean RD layout. 
--                  Moved all argentinean view comments and report constants to the main view 
--                  and rearranged some view comments so they would match the view order. Removed VIEW_AR.
--  050926  SaRalk  Modified method Calculate_To_Base___ by adding a new parameter.  
--  050916  ChJalk  Bug 50514, Modified method Report_Invoice to print net amount and tax amount of debit invoice in the 
--  050916          credit invoice.
--  050915  KeFelk  Removed unused variables.
--  050913  SaRalk  Added column tax_regime to the VIEW.
--  050829  IsWilk  Modifoied the added code in LCS 48137.  
--  050817  UsRalk  Increased the size of customer_comp_part_no_ and customer_part_no_ variables to 45.
--  050809  Asawlk  Bug 52485, Modified procedure Report_Invoice in order to retrieve print_control_code_ correctly.
--  050627  ChJalk  Bug 51113, Modified Method Report_Invoice to show discount date and discount amount for cash discount.
--  050622  UdGnlk  Bug 50931, Modified method Report_Invoice in cursor get_vat_net_curr to fetch total unit price when multiple taxes exist and
--  050622          modified cursor get_total_discount to fetch total discount amount using result key only.
--  050505  MaMalk  Bug 50637, Modified method Report_Invoice in order to fetch the correct condition code for the customer invoice line.
--  050504  JaJalk  Modified the unnecessary substrb to substr.
--  050425  LaPrlk  Bug 50400, Added two report texts; CREDIT_INVOICE_LABEL, EUR_CREDIT_INVOICE_LABEL for default and ar layouts.
--  050425  NaWalk  Placed the calculation of the rem_amount_to_paid_ after checking the condition (rem_unconsumed_advance_ < 0).
--  050412  MaMalk  Bug 49598, Modified method Report_Invoice in order to fetch the document texts when a credit invoice is created from an orderless return.
--  050407  PrPrlk  Bug 49924, Changed the function call to retrieve the invoice_copy_label_ from Invoice_Copy_Label_API.Get_Invoice_Copy_Labels to Enterp_Comp_Connect_V160_API.Get_Attribute_Translation,
--  050407          to prevent hardcoding of invoice copy labels.
--  050406  ChJalk  Bug 49614, Modified method Report_Invoice to print the Real Ship Date correctly in the RMA credit invoices.
--  050331  NaWilk  Bug 46159, Modified view CUSTOMER_ORDER_IVC_REP and method Report_Invoice to handle ship address, bill address
--  050331          and line ship address according to address presentation format.
--  050321  UdGnlk  Bug 45743, Modified method Report_Invoice to fetch payer id of the particular customer id, if payer exist.
--  050309  SaLalk  Bug 49659, Modify method Calculate_To_Base___ to calculate correct base currency amount
--  050309          Also delete the code done by Bug 47672.
--  050302  SaLalk  Bug 49713, delete the NVL fuction which is used as a parameter of substrb function
--  050301  SaRalk  CustomerOrderIvcRep_ltr.xsl was made obsolete.
--  050221  MaJalk  Bug 49144, In procedure METHOD, added paremeter invoice_date_ to Statutory_Fee_API.Get_Fee_Type().
--  050218  reanpl  FITH351, added Tax Invoice handling
--  050218  NiRulk  Bug 49707, Modified SALES_UNIT_MEAS in Report Designer layouts to display Customer U/M if present, instaed of Sales U/M.
--  050128  SaJjlk  Modified method of retrieving the delivery address for order lines.
--  041221  MaJalk  Bug 48268, Changed customer_fax_ and customer_email_ variable lengths 50 to 200.
--  041208  MaJalk  Bug 48137, Did modifications to get translated Taxt Code Text from language in customer order.
--  041201  Asawlk  Bug 48025, Modified cursor get_lot_batch_nos and added SUBSTRB to limit the maximum
--  041201          length of 'lot_batch_nos_' to 2000 characters in PROCEDURE &METHOD.
--  041130  ChJalk  Bug 48105, Modified method Report_Invoice to get the Customer Order language instead of the Customer
--  041130          language for printing the Invoice Copy Label.
--  041103  HoInlk  Bug 47672, Modified method Calculate_To_Base___ to pass the correct rate for calculation.
--  041101  UdGnlk  Bug 47683, Modified the parameter of count_plan_details cursor to pass the Payer No.
--  040907  reanpl  FIJP344 Japanese Tax Rounding, added tax_round_amount_ to tax total
--  041018  SaRalk  Changed view comments of some price including tax fields.
--  041013  DiVelk  Added columns Customer_Part_No and Description to Invoice Line and Package Line.
--  041015  UsRalk  Merged the patch for LCS bug - 47003.
--  041005  SeJalk  Bug 47003, Fetched additional discount from Get_Add_Discount_For_Invoice method in CUSTOMER_ORDER_INV_ITEM_API.
--  040909  SaRalk  Bug 41459, Changed from 'VAT Number' to 'Tax Number' in PAGE_FOOTER_TITLES.
--  040903  SaRalk  Added a new column contact to the main view. This prints the contact in order line if different from the
--  040903          the cust_ref in the order header.
--  040827  MaMalk  Bug 44416, Added DEBIT_INVOICE_REF and LINE_DEBIT_INVOICE_REF to show the debit invoice reference in the credit invoice.
--  040823  LoPrlk  Added an extra check for setting same_as_header_ in method &METHOD.
--  040816  DaMase  Removed define of view CUSTOMER_ORDER_IVC_DE_REP.
--  040811  SaJjlk  Merged LCS Bug 43905, Added ADDITIONAL_DISCOUNT,PRE_INVOICE_NO,HEADER_STATUS,INVOICE_ID_STR, TOTAL_PERCENTAGE,DELIVERY
--  040811          Removed MSG_ADD_DISC,DATE_TEXT, PERCENT_TEXT, DELIVERY_TEXT, INVOICE_TITLE
--  040719  DaMase  Removed references to custivc.qrp, custivc_letter.qrp and custivc_de.qrp.
--  040614  JeLise  Bug 44270, Added call to Iso_Country_API.Encode in Check_Company_Country_Code.
--  040609  NaWilk  Bug 44975, Modified FROM clause in view CUSTOMER_ORDER_IVC_REP
--  040604  DaZaSe  Added Report Designer functionality for TouchDown IID D103.
--  040604  JeLise  Bug 41629, Made smaller changes and removed the section VAT_SUM_LINE
--  040604          since it is not used any more.
--  040526  PrJalk  Bug 41629, Report Designer changes.
--  040517  JeLise  Bug 41629, Adjustment to EU Council Directive 2001/115/EC - Added code to fetch
--  040517          Discount Amount and Tax information.
--  040430  DaRulk  Renamed title 'Real Ship Date' to 'Wanted Delivery Date'/'Actual ship Date'
--                  in view comments appropriately.
--  040401  NaWilk  Bug 43574, Modified method Report_Invoice to get the correct vat_no in invoice header and removed variable doc_address_id_.
--  040329  Castse  Bug 42139, Added rma_no and rma_line_no in ORDER BY statement in cursor get_order_row.
----------------------------13.3.0---------------------------------------------
--  040309  DaZa    Bug 39656 added changes for the report designer layout
--  040309  NaWilk  Bug 39656, Changes made to handle Multiple addresses and Tax Identity numbers at line level and modified some field lengths.
--  040308  IsAnlk  B113114 , Added vat_amount to Advance invoices and other invoices.
--  040305  NaWilk  Bug 39655, Modified the method Get_Delivery_Note() to correclty get the header Vat_No.
--  040304  KeFelk  Call ID 113115, Added print_date and creation_date to previous cursors incorder to freeze printed information.
--  040302  KeFelk  TouchDown IID D103 - 2.7 Print the normal debit CO invoice (type CD).
--  040227  SaRalk  Bug 38375, Redesigned view CUSTOMER_ORDER_IVC_REP by removing the outer join to handle the performance
--  040227          issue when printing Customer Order Invoices. Also removed the 2 views CUSTOMER_ORDER_IVC_REP_MASTER and
--  040227          CUSTOMER_ORDER_IVC_REP_CHAR and added a new block BLOCK_CHARACTERISTICS to print characteristics.
--  040224  ChJalk  Bug 40249, Modified Report_Invoice by removing the decode in a cursor where condition since
--  040224          this is handled in the view CUST_ORDER_LINE_ADDRESS_2.
--  040219  DaZa    Bug 42219, Report Designer, New layout and adjustments. Added new method Split_Pagefooter___.
--  040218  IsWilk  Modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040202  ChJalk  Bug 41705, Modified the METHOD Report_Invoice to show the correct value of 'taxable' for the sales parts. Also removed
--  040202          the CURSOR get_item_taxable.
--  040126  GeKalk   Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  031104  GaJalk  Merged bug 39315, Rename the field NCF_Reference as Payment_Reference.
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030926  SuAmlk  Removed reference to 'LETTER' format in argentina and german layouts and removed unnecessary view
--                  comments in 'Master' and 'Char' report views.
--  030815  HaPulk  Bug 38475, Hide constant COPY depends on the value passed from parameter_attr_ in method Report_Invoice.
--  030917  PrJalk  Bug 38420, Changed Report METHOD (CUSTOMER_ORDER_RPI.Report_Invoice).
--  030916  PrJalk  Bug 38095, Changed Report METHOD (CUSTOMER_ORDER_RPI.Report_Invoice), added code to get the ship_via_code_1_ (customer name)
--  030916          from customer_info if it is null. and  added code to get the delivery address from customer if no order line is connected
--  030916          to the invoice (e.g. :- Credit Invoices created with RMA without order lines connected).
--  030403  ErSolk  Bug 36326, Made necessary changes
--  030911  UdGnlk  Modified invoice_reference field to print as Series Id + Invoice No.
--  030911  MiKulk  Bug 37995, Modified the VARCHAR declaration in the coding as VARCHAR2.
--  030911  HaPulk  Bug 38401, Passed language_code of the customer to constant STAGED_AMOUNT.
--  030814  SuAmlk  Displayed tax code description instead of tax code in Argentinean Layout.
--  030804  GaJalk  Code review changes.
--  030731  JaJalk  Performed SP4 Merge.
--  030717  ChFolk  Company_API.Get_Country_Db was considered when getting the tax liability description of the company.
--  030716  ChFolk  Modified parameters of the cursors count_plan_details, get_installment_details and get_discount_details.
--  030715  ChFolk  Displayed tax liability and it's description in Argentinian layout. Defined CUST_TAX_ID_NUMBER for Argentinian layout.
--  030714  ChFolk  The use of TAX_ITEM_TAB in cursors was replaced with public view CUST_INVOICE_PUB_UTIL_TAX_ITEM.
--  030711  ChFolk  Reversed the changes that have been done for Advance Payment.
--  030703  ChFolk  Removed COMP_STATE since COMP_STATE_DESC is used in Argentinia layout.
--  030701  ChFolk  Call ID 98883. Display City and State descriptions with their codes in Argentinian layout.
--  030701  SuAmlk  Modified displaying of charges according to Argentinean requirements in Argentinean Layout.
--  030630  ChFolk  Call ID 98882. Modified displaying of tax id numbers of company and customer in Argentinian layouts.
--  030630  ChFolk  Call ID 98883. Added COMP_CITY to display the company city in the Argentinian layout.
--  030630  SuAmlk  Displayed charges according to Argentinean requirements in Argentinean Layout
--                  & rearranged code for handling charges.
--  030627  SuAmlk  Made changes to display tax codes seperately in Argentinean Layout when
--                  there is no numeration group defined for the customer.
--  030627  SuAmlk  Modified displaying of Fee Amount in Argentinean Layout according to Argentinean requirements.
--  030624  ChFolk  Displayed the Installment and Discounts in German and Argentinian layouts.
--  030624  SuAmlk  Displayed Sub Total & Total in Argentinean Layout.
--  030623  ChFolk  Added Installments and Discounts into the report.
--  030623  SuAmlk  Displayed tax details & fetched Our Id at Tax Office using Tax_Report_Info_API.Get_Our_Id_At_Tax_Office in Argentinean Layout.
--  030611  SuAmlk  Added Company Register Code & Customer Register Code & modified Date Created to display
--                  Pay term base date in Argentinean Layout.
--  030526  SaAblk  Removed references to obsolete LU CustomerOrderOption.
--  030410  SaNalk  Changed the size of variable authorization_id_ to 30.
--  030403  ErSolk  Bug 36326, Made necessary changes to handle 'Country Description' longer then 35 digits.
--  030331  ChIwlk  Changed cursor get_vat_sums to support multiple tax codes.
--  030326  SuAmlk  Removed column TOTAL_INVOICE_COPIES from the view and modified conditional statement (IF-THEN-ELSE)
--                  written for the condition  invoice_copy_no_ IS NULL.
--  030320  SuAmlk  Removed the function Get_No_Invoice_Copies_Print and FOR LOOP added to support printing of multiple
--                  invoice copies. Made modifications to get the invoice_copy_no from the parameter_attr_ and handle
--                  labeling of multiple invoice copies.
--  030317  ChJalk  Bug 34816, Added a new loop to insert more than one OrderNotes.
--  030311  SuAmlk  Added FUNCTION Get_No_Invoice_Copies_Print and FOR LOOP to handle printing of multiple copies of invoices.
--  030305  SaNalk  Changed the methods for fetching tax liability information for Company and Customer in Argentinean Report.
--  030228  SaNalk  Set the NULL value in call to method Define_Report_Layout_ in VIEW_AR and VIEW_DE.
--  030227  SaNalk  Added the Customer Id to Customer Name field in Argentinean layout.
--  030227  SuAmlk  Added code to fetch the report_id_.
--  030219  SuAmlk  Made the line no of Previous Advance Payments of the Normal Stage sequential.
--  030219  GaSolk  Changed the call Company_Invoice_Info_API.Get_Type_Id to
--                  Company_Invoice_Info_API.Get_Tax_Liability according to Finance changes .
--  030217  SuAmlk  TSO Merge (Added Takeoff changes to SALSA file).
--  021009  JoAnSe  Added retrieval of condition code for package components.
--  020715  MAEELK  Added Condition Code to the detail block of the report.
--  ******************************* TSO Merge *********************************
--  030212  AjShlk  Modified Get_Delivery_Note() to fetch delivery notes per invoice.
--  030211  DaZa    Bug 35806, changed cursors on TAX_ITEM_TAB to use CUST_INVOICE_PUB_UTIL_TAX_ITEM, removed cursor get_tax_code_description
--                  and instead added a call to Statutory_Fee_API.Get_Description.
--  030210  SaNalk  Removed the entries for letter QRP from Argentinean and German layout views.
--  030207  SaNalk  Modified the value of 'activity start date' field in Argentinean invoice header.Increased the size of variables.
--  030205  SaNalk  Changed the Method for fetching company address Id.
--  030203  SaNalk  Removed the cursors get_def_inv_comp_addr_id,get_company_details and used public methods to fetch values.
--  030203  UdGnlk  Define the attribute Advance_Payment as IID in Call 93426, delivery note cursor correction.
--  030203  SaNalk  Commented the cursor get_our_id_tax_off.
--  030203  UdGnlk  Define the attribute Advance_Payment as IID in Call 93426.
--  030131  SaNalk  Added the Argentian Taxe fields to argentian invoice layout.
--  030120  JeLise  Bug 35230, Added a RULE hint on view CUSTOMER_ORDER_IVC_REP.
--  030120  SaNalk  Added 'our id at tax office' and company 'tax liabilty' fields to Argentian Invoice header Layout.
--  030130  UdGnLK  Bug 92801 Correction, The cursor close in the proper position.
--  030129  SaNalk  Added cursor get_company_details and relevant logic to handle comapny tax datails in header.
--  030127  SaNalk  Added print date to the invoice header.
--  030124  SaNalk  Added views VIEW_AR and VIEW_DE.Added the FUNCTION Override_ to handle multi country reports.
--                  Added logic to handle Multi country reports in PROCEDURE &METHOD.
--  030102  UdGnlk  Merge of IFS Applications 2002-2 SP3 (2003-2) & Formatting Stage billing information.
--  021212  UdGnlk  Added the message delivery notes to be displayed about delivery note/s number & to get the
--                  delivery notes a new function written Get_Delivery_Notes for advance payment functionality.
--  021205  SuAmlk  Added additional discount to order discount, to get total order discount and included a message
--                  to be displayed when there is additional discount.
--  021029  IsWilk  Bug 33447, Removed the earlier correction and modified the column customer_po_no as S42 and
--  021029          fetch the value from the Customer_Order_API,for ship_addr_1 fetch the value from the Customer_Order_Address_API.
--  021025  arkrpl  Bug 33599, Customer Invoice report does not display correct values for Ship Via, Delivery Terms and Forward Agent
--  021023  SaRalk  Bug 33337, Added code which enables to add different logos for different companies.
--  021016  IsWilk  Bug 33447, Modified the where clause of the cursor get_order_row and added the condition to check charges.
--  021009  JoAnSe  Added retrieval of condition code for package components.
--  020902  HeCese  Bug 29075, Removed colon (:) from the text variables that appear in .qrp. Also removed some abbreviations.
--  020902  Samnlk  Bug 29362, Added text clause 'Sum per Tax Code' to tax lines.
--  020830  IsWilk  Bug 32295, Removed the code regarding the Bug Id 25673.
--  020826  MKrase  Bug 31748, Added Comments for VIEW_C and VIEW_M.
--  020821  PrTilk  Bug 32081, changed the value next_row_.line_no to next_row_.item_id in the insert statement.
--  020719  GaSolk  Bug 31622, Changed the first parameter to the calling method
--  020719          Customer_Info_Vat_API.Get_Vat_No.
--  020715  MAEELK  Added Condition Code to the detail block of the report.
--  ---------------------------- AD 2002-3 Baseline ----------------------------
--  020626  NuFilk  Bug 31054, Added handling of delivery address when invoice is only with charges.
--  020618  AjShlk  Bug 29312, Added attribute county to Update_Ord_Address_Util_API.Get_Order_Address_Line.
--  020522  IsWilk  Bug 25673, Added the column IS_VAT to the view and adde the condition to check whether the company is US company
--  020522          and modified the vat amount to null for the US company.
--  020517  ViPalk  Bug 26168, Added price_qty and price_unit_meas to cursor get_package_part. Also added price_qty and
--  020517          price_unit_meas to the Insert statement of package component parts.
--  020403  Saralk  Corrected Call Id 77098.
--  020402  ChFolk  Added new field, Ncf Reference to the header.
--  020327  DaZa  Bug fix 26312, because of changes in ENTERPRISE module, the
--                Check_Address_Presentation method is now obsolete.
--  020124  JeLise   Bug 26312, Added function Check_Address_Presentation and changed the address
--  020211  ChFolk  IID 10940 Canadian Sales Tax - Invoice, Added new column, Taxable to the report.
--  020208  saralk IID 10960 Print Tax in Base Currency, Added 2 new functions Calc_To_Base and Check_Company_Country_Code
--  020201  ChFolk  Modified procedure, &METHOD to dispaly tax codes, descriptions and tax amounts.
--  011211  PhDe   Bug 26900 - Fixed title for characteristic_qty.
--  011119  Memena  Bug fix 26222 modified charged_qty and charge_amount based on Customer_Order_Inv_Item.
--  011115  IsWilk  Bug Fix 25801, Modified the fetching of the Tax Identity from the Delivery Address.
--  011114  Memena Bug fix 25676, added Forwarder_Info_API.Get_Name for Forward _Agent value.
--  011018  MaGu  Bug fix 25411. Modified method Report_Invoice so that part_no is used instead of catalog_no in
--                call to Characteristic_Printout_API.Print_Characteristic. Also added contract to cursor get_order_row.
--  010924  CaSt  Bug 19511. Added real_ship_date for component lines in a package part.
--  010919  DaZa  Bug fix 24483, vat_sums_rec_.vat_sum_dom changed to vat_sums_rec_.vat_sum_curr in inparams to Calc_To_Euro___
--  010807  GaJalk Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  010704  IsWilk Bug Fix 22145, Added the condition in the PROCEDURE &METHOD for setting the title as Invoice
--                 when gross_curr_amount_ > 0.
--  010430  OsAllk Bug fix 19511, Renamed the title from delivery_date to Real_ship_date and modified the PROCEDURE &METHOD.
--  010423  CaRa  Bug Fix 20215, Added order by to create view Customer_Order_Ivc_Rep.
--                Also added column CHAR_ROW_NO to view Customer_Order_Ivc_Rep_Char.
--  010416 DaJolk Bug fix 20332, Modified PROC &METHOD to fetch values for forward_agent_id, ship_via_desc and delivery_terms_desc from header.
--  010412 JaBalk Bug Fix 20598,change the name of constants from installed_ConfigManager to inst_ConfigManager_,
--                installed_ConfigManager to inst_ConfigManager_.
--  010402 OsAllk Bug Fix 19511,Added columns date_text,real_ship_date to the view and modified the PROCEDURE &METHOD
--                to get the correct value for wanted_delivery_date and the removed wanted_delivery_date from the CURSOR get_header.
--  010326 GaJalk Bug fix 20625, Changed the function call to Customer_Info_Vat_API.Get_Vat_No for vat_no_.
--  001220  DaZa  Bug fix 18716, report title = Credit Invoice if gross_curr_amount_ < 0.
--  001215  DaZa  Added OrderNo and CustomerPoNo to lines when its a RMA credit invoice.
--  001212  DaZa  Changed characterstic columns so they use report columns that isnt used anywhere else in the report.
--  001205  DaZa  Changed length of bill addresses fields to 100 and added
--                a substrb when fetching these addresses.
--  001124  DaZa  Bug fix 17913, added rma_no to view and 2 new report_texts. Report will now
--                show RMA No instead of Order No if RMA exist.
--  001120  DaZa  Bug fix, added a check on line_item_no > 0 in cursor get_package_part.
--  001107  DaZa  Added handling for config_id and config_spec_desc. Changed promt for INVOICE_ID.
--  001030  JoEd  Added document texts from customer warranties.
--  001018  JakH  Added configuration_id and configured_line_price_id to record to pass to Characteristic_Printout_API.
--                Constructed ord_row_rec_ to contain additional data from the customer order line
--  000913  FBen  Added UNDEFINED.
--  000830  JoEd  Added column ref_id.
--  000815  DaZa  Removed calls to Init_Print_Characteristic and used Characteristic_Printout_API.Public_Rec
--                for sending data to Characteristic_Printout_API.
--  000705  ReSt  Added printout of prices of characteristics for configurated products.
--  000620  ReSt  Added printout of characteristics for configured products.
--  000711  ReSt  Merged from Chameleon
---------------------------------- 13.0 -------------------------------------
--  000516  PaLj  Changed translation when setting the copy_text_
--  000515  PaLj  Made forward_agent_id 20 characters long.
--  000509  DaZa  Added a new block for Sales Configurator Options. Also added due_date to head.
--  000508  PaLj  Added Preliminary to copy_text.
--  000502  PaLj  Added Copy_Text.
--  000413  DaZa  Usability changes: Added summarization on vat_codes.
--  000307  DaZa  Changed title on vat_no from 'VAT Number' to 'Tax Identity'.
--  000223  DaZa  Bug fix 13327, fixed so correct document text are shown for RMA lines.
--                Also rewrote parts of the charge handling so we can show RMA charges
--                as normal charges. Change so contract_ is fetched from head instead of item.
--                Added fetching of document text and language_code from RMA head when its a RMA.
--  000218  JoEd  Changed amount titles with VAT to Tax.
--  000216  DaZa  Bug fix 13139, removal of dynamic PL in Calc_To_Euro___ and Is_Emu___
--                since we dont have to be backward compatible to ACCRUL 8.4.2 anymore.
--  000214  DaZa  Added exception handling for dynamic PL code.
--  000117  PaLj  Changed Report to support Staged Billing
--  991221  DaZa  Rewrote parts of the report so it now works as a block report
--                instead. Added charge rows details in the report.
--  991201  SaMi  Customer document text added to this report
---------------------------------- 12.0 -------------------------------------
--  991110  DaZa  Added a base currency check so we can show euro totals when its a base currency also.
--  991109  DaZa  Added new methods Calc_To_Euro___ and Is_Emu___ and calls to them
--                so we can show totals in euro.
--  991028  DaZa  Added an empty detail row if the invoice only has charges.
--  991011  JakH  Made a 'dirty' change from Customer_Order_Return_Tab to use Return_Material_Line_tab
--  991005  DaZa  Made a 'dirty' solution while implementing charges in this report, due to
--                time limitations we couldn't rewrite this report and 4 others to become true
--                block reports. Thats the reason why we only show 10 charge groups in the report.
--                Added several new view columns to handle charge groups, their sums and document texts.
--  990906  JoEd  Changed fetch of delivery address information.
---------------------------------- 11.1 -------------------------------------
--  990416  JoEd  Y. Removed function calls from cursors to improve performance.
--  990311  JoAn  Removed ampersand in comment (caused installation problems).
--  990219  JoAn  Call Id 8611 Added rows 3 and 4 to page footer.
--                Also added Vat Number to PAGE_FOOTER_TITLES.
--  990209  PaLj  Bug ID 6171 /Call ID 4420. Added a new cursor to get the customer_order_return_note_id_
--                inorder to get the document text(s) connected to the Customer Order Return window.
--  990204  JakH  Call id: 4451 - Document text for Credit Invoice is not printed
--                Added a new condition when retrieving document text(s).
--                If Invoice type is CUSTORDDEB, to retrieve the document text(s)
--                connected to Customer Order Invoice else if the Invoice type is
--                CUSTORDCRE to retrieve the document text(s) connected to Credit Invoive.
--  990203  JakH  Call id: 7900 - Delivered/invoiced quantity is converted to
--                customer units of measure
--  990128  CAST  Call id: 7736 - Adjustment of titles.
--  981208  JoEd  Changed comments on columns like qty and amounts.
--  981203  JoEd  Changed fetch of forward agent.
--  980925  JoEd  Support id 6045. Added ' ' around predefined variable used when
--                retrieving document texts and/or phrases.
--  980924  JoEd  Support id 4960 - Changed length of SHIP_ADDR_1 from 35 to 100.
--  980331  DaZa  SID 2805, change so ship_country and bill_country are translated
--                into order or customers language.
--  980325  DaZa  SID 1709, removed set feedback on/off and set verify on/off.
--  980312  DaZa  Bug fix 3722, Altered length of BILL_ADDR_1 from 35 to 100.
--  980302  ToOs  Changed cursor get_order_row so the customers part_no, um and qty is
--                fetched if it's written.
--  980227  DaZa  Changed forward_agent in cursor so it now fetches forward
--                agent name from enterprise, change view length of
--                forward_agent to 100.
--  980218  DaZa  Added concatenation of series_id and invoice_no
--  980217  DaZa  Bug fix 2866 PAY_TERMS_DESC are translated into correct language
--  980217  DaZa  Bug fix 2713 Changed fetch length in PAY_TERMS_DESC
--  980210  ToOs  Added nvl(customer_part_no,catalog_no) so the customer part_no
--                shows on the printout if it's written
--  971127  JoAn  Added call to Report_SYS.Refresh_
--  971104  JoAn  Changed value of report property LIFE to 30
--  971020  JoKe  Added column customer vat number (vat_no/S39).
--  971010  JoAn  Bug 97-0120: Retrieving the correct document texts for order line.
--                Correted in cursor get_order_row_customer_order.
--  970918  JoAn  Bug 97-0077: Retrieving the document address of the payee instead
--                of the document address for the ordering customer.
--                Also set the language to the language of the paying customer if
--                not the same as the ordering customer.
--  970908  JOMC  Changed Unit of Measure handling to conform to UoM handling
--                in Application Services
--  970905  JOMC  Changed report table to module specific ORDER_INFO_SERVICES_RPT
--  970613  PAZE  Created. Report Invoice moved from Customer_Order_RPI package.
--                INFO_SERVICES_RPT is used as report table.
--  970623  JoAn  Added retrieval of company information for report footer
-----------------------------------------------------------------------------

DEFINE MODULE            = ORDER
DEFINE LU                = CustomerOrder
DEFINE PKG               = CUSTOMER_ORDER_IVC_RPI

DEFINE REPTAB            = ORDER_INFO_SERVICES_RPT
DEFINE VIEW              = CUSTOMER_ORDER_IVC_REP
DEFINE VIEW_RPV          = ORDER_INFO_SERVICES_RPV

DEFINE METHOD            = Report_Invoice
DEFINE REPORTNAME        = "'Report_Invoice'"

DEFINE DOCINVOICE        = "'4'"
DEFINE DOCCREDITINVOICE  = "'5'"

DEFINE TRUE              = 1
DEFINE FALSE             = 0

DEFINE BLOCK_ORDER_LINES       = 1
DEFINE BLOCK_PACKAGE_LINES     = 2
DEFINE BLOCK_SUB_TOTAL         = 3
DEFINE BLOCK_CHARGE_GRP        = 4
DEFINE BLOCK_TOTALS            = 5
DEFINE BLOCK_CHARGE_LINES      = 6
DEFINE BLOCK_STAGED_BILLING    = 7
DEFINE BLOCK_TOTAL_EX_VAT      = 8
DEFINE BLOCK_TAXES             = 9
DEFINE BLOCK_EUR_TOTAL_EX_VAT  = 10
DEFINE BLOCK_EUR_TAXES         = 11
DEFINE BLOCK_EUR_TOTALS        = 12
DEFINE BLOCK_NOTES             = 13
DEFINE BLOCK_OPTIONS           = 14
DEFINE BLOCK_TOTAL_TAX         = 15

DEFINE BLOCK_BASE_TOTAL_EX_VAT = 16
DEFINE BLOCK_BASE_TAXES        = 17
DEFINE BLOCK_BASE_TOTALS       = 18
DEFINE BLOCK_VAT               = 19
DEFINE BLOCK_SALESTAX          = 20
DEFINE BLOCK_INSTALLMENTS      = 21
DEFINE BLOCK_DISCOUNTS         = 22
DEFINE BLOCK_SUB_TOTAL_AR      = 23
DEFINE BLOCK_TOTAL_AR          = 24
DEFINE BLOCK_SUB_TOT_CHG_AR    = 25

DEFINE BLOCK_CHARACTERISTICS     = 26
DEFINE BLOCK_ADVANCE_INVOICES    = 30
DEFINE BLOCK_TOT_PAID_IN_ADVANCE = 27
DEFINE BLOCK_OTHER_INVOICES      = 28
DEFINE BLOCK_TOT_PRE_INVOICED    = 29
DEFINE BLOCK_DELIVERIES          = 30
DEFINE BLOCK_PKG_DELIVERIES      = 31
DEFINE BLOCK_TAX_DISCOUNT        = 32
DEFINE BASE_CURR             = S60
DEFINE ORDER_NO              = S1
DEFINE DATE_ENTERED          = D1
DEFINE INVOICE_NO            = S2
DEFINE INVOICE_TYPE          = S3
DEFINE INVOICE_DATE          = D2
DEFINE AUTHORIZE_NAME        = S4
DEFINE CUSTOMER_NO           = S5
DEFINE CONTRACT              = S101
DEFINE CONTRACT_DESCRIPTION  = S102
DEFINE CUST_REF              = S6
DEFINE SHIP_ADDR_1           = S7
DEFINE SHIP_ADDR_2           = S8
DEFINE SHIP_ADDR_3           = S9
DEFINE SHIP_ADDR_4           = S10
DEFINE SHIP_ADDR_5           = S11
DEFINE SHIP_ADDR_6           = S12
DEFINE SHIP_ADDR_7           = S13
DEFINE SHIP_ADDR_8           = S182
DEFINE SHIP_ADDR_9           = S183
DEFINE SHIP_ADDR_10          = S184
DEFINE SHIP_ADDR_11          = S185
DEFINE BILL_ADDR_1           = S14
DEFINE BILL_ADDR_2           = S15
DEFINE BILL_ADDR_3           = S16
DEFINE BILL_ADDR_4           = S17
DEFINE BILL_ADDR_5           = S18
DEFINE BILL_ADDR_6           = S19
DEFINE BILL_ADDR_7           = S20
DEFINE BILL_ADDR_8           = S186
DEFINE BILL_ADDR_9           = S187
DEFINE BILL_ADDR_10          = S188
DEFINE BILL_ADDR_11          = S189
DEFINE SHIP_VIA_DESC         = S21
DEFINE FORWARD_AGENT         = S22
DEFINE LABEL_NOTE            = S23
DEFINE DELIVERY_TERMS_DESC   = S24
DEFINE DEL_TERMS_LOCATION    = S66
DEFINE DEBIT_INVOICE_REF     = S29
DEFINE VAT_NO                = S25
DEFINE WANTED_DELIVERY_DATE  = D3
DEFINE PAY_TERMS_DESC        = S26
DEFINE CURR_CODE             = S27
DEFINE COPY_TEXT             = S28
DEFINE PAGE_FOOTER_1         = S30
DEFINE PAGE_FOOTER_2         = S31
DEFINE PAGE_FOOTER_3         = S32
DEFINE PAGE_FOOTER_4         = S33
DEFINE DUE_DATE              = D4
DEFINE PRINT_CONFIG_ID       = N1
DEFINE RMA_NO                = N2
DEFINE TAX_INVOICE_TYPE      = N3
-- Note : StreamServe start
-- Note : Streamserve variables
DEFINE CUSTOMER_FAX          = S34
DEFINE CUSTOMER_EMAIL        = S35
DEFINE PRINTER_FLAG          = S36
DEFINE FAX_FLAG              = S37
DEFINE EMAIL_FLAG            = S38
DEFINE USER_EMAIL            = S39
DEFINE USER_FILE_DIR         = S40
-- Note : StreamServe stop

-- Note : For Argentinian Layout
DEFINE COMP_ADDR_1           = S41
DEFINE COMP_ADDR_2           = S47
DEFINE COMP_ADDR_3           = S190
DEFINE COMP_ADDR_4           = S191
DEFINE COMP_ADDR_5           = S192
DEFINE COMP_ADDR_6           = S193
DEFINE COMP_ZIP_COUNTRY      = S43
DEFINE COMP_PHONE            = S45
DEFINE SALESMAN              = S46
DEFINE REGION_DISTRICT       = S49
DEFINE CUSTOMER_STATE_DESC   = S48
DEFINE DATE_CREATED          = D5
DEFINE START_MONTH_YEAR      = S52
DEFINE AUTH_EXP_DATE         = D7
DEFINE AUTHORIZATION_ID      = S50
DEFINE CUST_TAX_ID_NUMBER    = S59
DEFINE COMP_TAX_ID_NUMBER    = S51
DEFINE CUST_TAX_LIABILITY    = S53
DEFINE NUMERATION            = S54
DEFINE INVOICE_REFERENCE     = S55
DEFINE OUR_ID_TAX_OFF        = S56
DEFINE COMP_TAX_LIABILITY    = S57
DEFINE CUST_NUMBER_NAME      = S61
DEFINE COMP_CITY_DESC        = S82
DEFINE CUSTOMER_CITY_DESC    = S83
DEFINE CUSTOMER_ZIP_COUNTRY  = S84
DEFINE COMP_STATE_DESC       = S85

DEFINE CUSTOMER_PART_NO      = S63
DEFINE CUSTOMER_PART_DESC    = S64

DEFINE CUSTOMER_PO_NO        = S42
DEFINE PRICE_PER_PRICE_UNIT  = N4
DEFINE ORDER_DISCOUNT        = N5
DEFINE PRICE_TOTAL           = N6
DEFINE DISCOUNT              = N7
DEFINE PRICE_QTY             = N8
DEFINE BLOCK_NO              = N9
DEFINE SUB_TOTAL_AMOUNT      = N10
DEFINE FEE_AMOUNT            = N11
DEFINE NET_CURR_AMOUNT       = N12
DEFINE VAT_CURR_AMOUNT       = N13
DEFINE ROUND_AMOUNT          = N14
DEFINE GROSS_CURR_AMOUNT     = N15
DEFINE EUR_NET_CURR_AMOUNT   = N16
DEFINE EUR_VAT_CURR_AMOUNT   = N17
DEFINE EUR_GROSS_CURR_AMOUNT = N18
DEFINE CHARGE_AMOUNT         = N19
DEFINE CHARGED_QTY           = N20
DEFINE TOTAL_CHARGED_AMOUNT  = N21
DEFINE VAT_PERCENTAGE        = N22
DEFINE VAT_SUM               = N23
DEFINE EUR_VAT_SUM           = N24
DEFINE LINE_DEBIT_INVOICE_REF= S62
DEFINE LINE_CUSTOMER_PO_NO   = S65
DEFINE TAXABLE               = S72
DEFINE PAYMENT_REFERENCE     = S73

-- Note : Condition Code
DEFINE CONDITION_CODE              = S74
DEFINE CONDITION_PRINT             = S76

-- Note : For Argentinian Layout
DEFINE NUMERATION_GROUP      = S75
DEFINE COMP_REGISTER_CODE    = S79
DEFINE CUST_REGISTER_CODE    = S80
DEFINE TAX_CODE_DESC         = S58
DEFINE TAX_RATE              = N34
DEFINE TAX_AMOUNT            = N35
DEFINE SUB_TOTAL             = N36
DEFINE SUB_TOTAL_GROSS       = N37
DEFINE SUB_TOT_WITH_CHARGES  = N37
DEFINE TOTAL                 = N38

DEFINE INVOICE_COPY_LABEL    = S78

-- Note: Installments and Discounts
DEFINE INSTALLMENT_ID        = N31
DEFINE PAY_METHOD_DESC       = S81
DEFINE INSTALLMENT_DUE_DATE  = D6
DEFINE INSTALLMENT_AMOUNT    = N32
DEFINE DISCOUNT_AMOUNT       = N33

DEFINE LINE_SHIP_ADDR_1      = S87
DEFINE LINE_SHIP_VIA_DESC    = S88
DEFINE LINE_DEL_TERMS_DESC   = S89
DEFINE LINE_DEL_TERMS_LOCATION = S67
DEFINE LINE_FORWARD_AGENT    = S90
DEFINE LINE_VAT_NO           = S91

-- Note : characteristics
DEFINE CHARACTERISTIC_ID     = S68
DEFINE CHARACTERISTIC_VALUE  = S69
DEFINE CHARACTERISTIC_UOM    = S70
DEFINE CHARACTERISTIC_QTY    = N25
DEFINE CHARACTERISTIC_FIRST  = N26
DEFINE CHARACTERISTIC_LAST   = N27
DEFINE CHARACTERISTIC_ACT    = N28
DEFINE CHARACTERISTIC_PRICE  = N29
DEFINE CHARACTERISTIC_PFLAG  = N30

DEFINE C_CHARACTERISTIC_ID    = "'S68'"
DEFINE C_CHARACTERISTIC_VALUE = "'S69'"
DEFINE C_CHARACTERISTIC_UOM   = "'S70'"
DEFINE C_CHARACTERISTIC_QTY   = "'N25'"
DEFINE C_CHARACTERISTIC_FIRST = "'N26'"
DEFINE C_CHARACTERISTIC_LAST  = "'N27'"
DEFINE C_CHARACTERISTIC_ACT   = "'N28'"
DEFINE C_CHARACTERISTIC_PRICE = "'N29'"
DEFINE C_CHARACTERISTIC_PFLAG = "'N30'"

DEFINE C_CHARACTERISTIC_BLOCK = "'N9'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'S86'"

DEFINE AD_INVOICE_NO          = S90
DEFINE AD_PAYMENT_DATE        = D10
DEFINE AD_PAID_NET_AMOUNT     = N32
DEFINE AD_PAID_GROSS_AMOUNT   = N33
DEFINE OT_DUE_DATE            = D11
DEFINE REM_AMOUNT_TO_PAID     = N39
DEFINE AD_TAX_AMOUNT          = N40
DEFINE OT_TAX_AMOUNT          = N41

DEFINE PRE_INVOICE_NO      = S71
DEFINE ADDITIONAL_DISCOUNT = S77
DEFINE HEADER_STATUS       = S95
DEFINE INVOICE_ID_STR      = S96
DEFINE DELIVERY            = S97
DEFINE CONTACT             = S98
DEFINE CHARGE_ORDER_NO     = S99

DEFINE PRICE_INCL_TAX             = S100
DEFINE PRICE_INCL_TAX_TOTAL       = S101
DEFINE CHARGE_INCL_TAX            = S102
DEFINE CHARGE_INCL_TAX_TOTAL      = S103
DEFINE PRINT_PRICES_INCL_TAX      = S104
DEFINE USE_PRICE_INCL_TAX         = S166
DEFINE SEVERAL_VALUE              = S105
DEFINE PRINT_ADV_PAY_ON_CU_INV    = S107

DEFINE LINE_VAT_CODE      = S92
DEFINE LINE_DISC_AMOUNT   = N42
DEFINE TOTAL_UNIT_PRICE   = N43
DEFINE TAX_BASE_AMOUNT    = N44
DEFINE TAX_TEXTS          = S93
DEFINE TOTAL_DISCOUNT     = N45
DEFINE CHARGE_VAT_CODE    = S94
DEFINE PAYMENT            = N46
DEFINE DEBIT_TAX          = N47
DEFINE LINE_PAYMENT       = N48
DEFINE LINE_DEBIT_TAX     = N49
DEFINE SHIP_DATE_FIRST    = N50
DEFINE LINE_VAT_PERCENT   = N51
DEFINE CHARGE_VAT_PERCENT = N52
DEFINE INVOICE_LINE_NO    = S126


DEFINE BASE_VAT_SUM              = N53
DEFINE GROSS_AMOUNT_IN_CURR      = N54
DEFINE VERBALLY_INVOICE_AMOUNT   = S108
DEFINE DUPLICATE_OPTION          = S109
DEFINE REF_INVOICE_DATE          = D12
DEFINE DATE_OF_DUPLICATE         = D13
DEFINE REF_INVOICE_LINE_DATE     = D14

DEFINE CORRECTION_TEXT       = S110
DEFINE CORR_TITLE            = S111
DEFINE INVOICE_AMOUNT        = N55
DEFINE COR_TAX_CURR_CODE     = S168

DEFINE PAYMENT_METHOD            = S112
DEFINE BANK_ACCOUNT              = S113
DEFINE PAYMENT_METHOD_LINE       = S114
DEFINE BANK_ACCOUNT_LINE         = S115
DEFINE TAX_CURR_RATE             = N56
 
DEFINE DISCOUNT_PERCENT      = N57
DEFINE DISCOUNT_NET          = N58
DEFINE DISCOUNT_TAX_PERCENT  = N59
DEFINE DISCOUNT_TAX          = N60
DEFINE BANK_ACCOUNT_TEXT     = S116

DEFINE PREPAYMENT_EXIST      = S44
DEFINE PREPAYMENT_TEXT       = S117
DEFINE PRE_NET_CURR_AMOUNT   = S118
DEFINE PRE_VAT_CURR_AMOUNT   = S119
DEFINE PRE_GROSS_CURR_AMOUNT = S120
DEFINE PREPAY_INV_NO         = S121
DEFINE PREPAY_INV_SERIES_ID  = S122
DEFINE PREPAY_TAX_AMOUNT     = N61
DEFINE DELIVERY_NOTE_REF     = S123
DEFINE PRE_TAX_CURR_CODE     = S169

DEFINE RETURN_LINE_NOTES     = S124

DEFINE REPORT_FOOT           = S125

DEFINE TAX_FEE_AMOUNT        = N62

DEFINE BIC_CODE_HEAD         = S127
DEFINE BIC_CODE_LINE         = S128

DEFINE PART_CATALOG_NOTES    = S129
DEFINE INVENTORY_PART_NOTES  = S130
DEFINE LINE_NO                     = S131
DEFINE CATALOG_NO                  = S132
DEFINE CATALOG_DESC                = S133
DEFINE SALES_UNIT_MEAS             = S134
DEFINE PRICE_UNIT_MEAS             = S135
DEFINE ORDER_LINE_NOTES            = S136
DEFINE CATALOG_NO_NOTES            = S137
DEFINE ORDER_NOTES                 = S138
DEFINE DOCUMENT_PHRASE             = S139
DEFINE CUSTOMER_NOTES              = S140
DEFINE CHARGE_TYPE                 = S141
DEFINE CHARGE_TYPE_DESC            = S142
DEFINE CHARGE_UNIT_MEAS            = S143
DEFINE CHARGE_TYPE_DOC_TEXT        = S144
DEFINE CHARGE_ROW_DOC_TEXT         = S145
DEFINE GROUP_DESC                  = S146
DEFINE GROUP_TEXT                  = S147
DEFINE DESCRIPTION                 = S148
DEFINE TOTAL_PERCENTAGE            = S149
DEFINE STAGE_NOTES                 = S150
DEFINE VAT_CODE                    = S151
DEFINE REF_ID                      = S152
DEFINE WARRANTY_DOC_TEXT           = S153
DEFINE CONFIG_ID                   = S154
DEFINE CONFIG_SPEC_DESC            = S155
DEFINE CONDITION_CODE_DESCRIPTION  = S156
DEFINE LINE_ORDER_NO               = S157
DEFINE NOTE_TEXT                   = S158
DEFINE LOT_BATCH_NO                = S159
DEFINE OT_INVOICE_NO               = S161
DEFINE GTIN_NO                     = S162
DEFINE ORDER_LINE_POS              = N63
DEFINE LINE_ITEM_NO                = N64
DEFINE QTY_INVOICED                = N65
DEFINE GROUP_SUM                   = N66
DEFINE STAGE                       = N67
DEFINE TOTAL_ON_LINE               = N68
DEFINE TOT_PAID_IN_ADVANCE         = N69
DEFINE OT_NET_AMOUNT               = N70
DEFINE OT_GROSS_AMOUNT             = N71
DEFINE REM_UNCONSUMED_ADVANCE      = N73
DEFINE CHARGE_PERCENT              = N74
DEFINE CHARGE_PERCENT_BASIS        = N75
DEFINE REAL_SHIP_DATE              = D20
DEFINE DISCOUNT_DATE               = D21
DEFINE AIRWAY_BILL_NO              = S163
DEFINE ORDER_LINE_NO               = S164
DEFINE GRP_SUM_INCL_TAX            = N76
DEFINE SUB_TOTAL_INCL_TAX          = N77
DEFINE TAX_FEE_BASE_AMOUNT         = N78
DEFINE AD_PAYMENT_MATCHED_AMOUNT   = N79
DEFINE TOT_AD_PAY_MATCHED_AMOUNT   = N80
DEFINE NET_SALES_PRICE_CURR        = N81
DEFINE ORDER_REL_NO                = S165
DEFINE BASE_NET_CURR_AMOUNT        = N82
DEFINE SERIAL_NO                   = S166
DEFINE VAT_REDUCTION_AT_PAY        = S167  

-- Rental
DEFINE RENTAL_TRANSACTION_START_DATE = D15
DEFINE RENTAL_TRANSACTION_END_DATE   = D16
DEFINE ON_RENTAL_QTY                 = N83
DEFINE INVOICED_DURATION_DAYS        = N84

DEFINE LATEST_SHIP_DATE              = D22
DEFINE COUNTRY_OF_ORIGIN             = S170
DEFINE CUSTOMS_STAT_NO               = S171
DEFINE PACKAGE_LINE_NO               = S172
DEFINE PACKAGE_ORDER_LINE_POS        = N85
DEFINE RENTAL_MODE                   = S173
DEFINE HEADER_INVOICE_TEXT           = S174
DEFINE INVOICE_TEXT                  = S175
DEFINE COR_VAT_CODE                  = S176
DEFINE COR_DESCRIPTION               = S177
DEFINE COR_TAX_TEXTS                 = S178
DEFINE COR_BASE_VAT_CODE             = S179
DEFINE COR_BASE_DESCRIPTION          = S180
DEFINE COR_GROSS_AMOUNT_IN_CURR      = N86
DEFINE COR_TAX_FEE_AMOUNT            = N87
DEFINE COR_TOTAL_UNIT_PRICE          = N88
DEFINE COR_TAX_BASE_AMOUNT           = N89
DEFINE COR_TOTAL_DISCOUNT            = N90
DEFINE COR_VAT_PERCENTAGE            = N91
DEFINE COR_BASE_VAT_SUM              = N92
DEFINE COR_BASE_VAT_PERCENTAGE       = N93
DEFINE TOT_TAX_AMOUNT                = N94
DEFINE COR_TOT_TAX_AMOUNT            = N95
DEFINE RENTAL_LINE_NO                = S181
DEFINE RENTAL_ORDER_LINE_POS         = N96
DEFINE FREE_OF_CHARGE_TAX_BASIS      = N97
DEFINE COMPANY_BEARING_TAX_AMT       = N98
DEFINE TOT_PRE_INV_DEB_CORR          = N72
DEFINE TOT_PRE_INV_CRE_CORR          = N99
DEFINE TOT_ADVANCE_RECEIVED          = N100
DEFINE PRE_CONSUMED_ADVANCE          = N101
DEFINE PRE_UNCONSUMED_ADVANCE        = N102
DEFINE ADVANCE_CONSUMED_CURRENT      = N103
DEFINE MULTIPLE_TAX_LINES            = S194
DEFINE CUST_REF_DESC                 = S195
DEFINE DEB_TAX_CURR_RATE             = N104
DEFINE COMP_BRANCH_ID                = S196
DEFINE COMP_BRANCH_DESC              = S197
DEFINE CUSTOMER_BRANCH               = S198
DEFINE HEADER_CORRECTION_REASON      = S199
DEFINE CORRECTION_REASON             = S200
-- gelr:tax_exemption_certify, begin
DEFINE CIG_CODE                      = EXT_S1
DEFINE CUP_CODE                      = EXT_S2
DEFINE TAX_EXEMPT_CERT_NO            = EXT_S3
DEFINE CERT_JURISDICTION             = EXT_S4
-- gelr:tax_exemption_certify, end
-- DIS003 start
DEFINE COMPAYADDR1                    = EXT_S7  
DEFINE COMPAYADDR2                    = EXT_S8  
DEFINE COMPAYADDR3                    = EXT_S9  
DEFINE COMPAYADDR4                    = EXT_S10 
DEFINE COMPAYADDR5                    = EXT_S11 
DEFINE COMPAYADDR6                    = EXT_S12 
DEFINE COMPAYADDR7                    = EXT_S13 
DEFINE LINE_VAT_AMT                   = EXT_N11 
DEFINE LINE_GROSS_AMT                 = EXT_N12 
DEFINE DELIVERIES                     = EXT_S14 
DEFINE TAXCHARACTER                   = EXT_S15 
DEFINE SHOW_SUB_TOTAL_ITEMS           = EXT_S16 
DEFINE COR_TAX_CHARACTER              = EXT_S17 
DEFINE COR_BASE_TAX_CHARACTER         = EXT_S18 
-- DIS003 end
-- gelr:in_hsn_sac_codes, GLOW-2226, begin
DEFINE HSN_SAC_CODE                   = EXT_S20
DEFINE CGST_TAX_AMNT                  = EXT_N1
DEFINE SGST_TAX_AMNT                  = EXT_N2
DEFINE CGST_TAX_PCT                   = EXT_N3
DEFINE SGST_TAX_PCT                   = EXT_N4
DEFINE IGST_TAX_AMNT                  = EXT_N5
DEFINE UGST_TAX_AMNT                  = EXT_N6
DEFINE IGST_TAX_PCT                   = EXT_N7
DEFINE UGST_TAX_PCT                   = EXT_N8
DEFINE OTHER_TAX_AMNT                 = EXT_N9
DEFINE OTHER_TAX_PCT                  = EXT_N10
DEFINE CGST_FEE_TYPE                  = EXT_S21
DEFINE SGST_FEE_TYPE                  = EXT_S22
DEFINE IGST_FEE_TYPE                  = EXT_S23
DEFINE UGST_FEE_TYPE                  = EXT_S24
DEFINE OTHER_FEE_TYPE                 = EXT_S25
-- gelr:in_hsn_sac_codes end, GLOW-2262
DEFINE PREFIX_A                       = EXT_S30 
DEFINE PREFIX_B                       = EXT_S31 
DEFINE PREFIX_C                       = EXT_S32 
DEFINE SERIAL_NUMBER                  = EXT_S33 
DEFINE PREFIX_A_TITLE                 = EXT_S34 
DEFINE PREFIX_B_TITLE                 = EXT_S35 
DEFINE PREFIX_C_TITLE                 = EXT_S36 
-- gelr:additional_tax_numbers:INFI9-090 reanpl begin, I use colums S150-S158 that are already used earlier in "detail" part. I use them in "header" part.
DEFINE TAX_ID_NO_TEXT1                = EXT_S37 
DEFINE TAX_ID_NO_TEXT2                = EXT_S38 
DEFINE TAX_ID_NO_TEXT3                = EXT_S39 
DEFINE TAX_ID_NO_TEXT4                = EXT_S40 
DEFINE TAX_ID_NO_TEXT5                = EXT_S41 
DEFINE TAX_ID_NO_TEXT6                = EXT_S42 
DEFINE TAX_ID_NO2                     = EXT_S43  
DEFINE TAX_ID_NO3                     = EXT_S44  
DEFINE TAX_ID_NO4                     = EXT_S45  
DEFINE TAX_ID_NO5                     = EXT_S46  
DEFINE TAX_ID_NO6                     = EXT_S47  
-- gelr:additional_tax_numbers:INFI9-090, end
-- gelr:service_statistics_no begin
DEFINE SERVICE_STATISTICS_NO          = EXT_S48
-- gelr:service_statistics_no end
-- gelr:prepayment_tax_document, begin
DEFINE MATCHED_TAX_DOC_BASE           = EXT_N13
DEFINE MATCHED_TAX_DOC_TAX            = EXT_N14
DEFINE TAX_DOC_BASE                   = EXT_N15
DEFINE TAX_DOC_TAX                    = EXT_N16
DEFINE MATCHED_TAX_DOC_BASE_ACC_CURR  = EXT_N17
DEFINE MATCHED_TAX_DOC_TAX_ACC_CURR   = EXT_N18
DEFINE TAX_DOC_BASE_ACC_CURR          = EXT_N19
DEFINE TAX_DOC_TAX_ACC_CURR           = EXT_N20
-- gelr:prepayment_tax_document, end
-- gelr:hu_org_invoice_no_ref begin
DEFINE ORG_SERIES_ID                  = EXT_S49
DEFINE ORG_INVOICE_NO                 = EXT_S50
-- gelr:hu_org_invoice_no_ref begin
-- gelr:tax_fulfilment_date, begin 
DEFINE TAX_FULFILMENT_DATE            = EXT_D1
-- gelr:tax_fulfilment_date, end   
-- gelr:prepayment_tax_document, begin
DEFINE ORIG_TAX_DOC_SERIES_REF        = EXT_S51
DEFINE ORIG_TAX_DOC_NUMBER_REF        = EXT_S52
-- gelr:prepayment_tax_document, end
-- gelr:hu_vat_control_statement, begin 
DEFINE COMP_GROUP_TAX_ID_NUMBER       = EXT_S53
DEFINE CUST_GROUP_TAX_ID_NUMBER       = EXT_S54
DEFINE COMP_DOMESTIC_TAX_ID_NUMBER    = EXT_S55
DEFINE CUST_DOMESTIC_TAX_ID_NUMBER    = EXT_S56
-- gelr:hu_vat_control_statement, end 
-- gelr:digital_signature, begin
DEFINE DIGITAL_SIGNATURE              = EXT_S5
-- gelr:digital_signature, end 
-- gelr:pt_erp_certification, begin
DEFINE DOCUMENT_TYPE                  = EXT_S6 
DEFINE ERP_CERTIFICATE                = EXT_S19
-- gelr:pt_erp_certification, end
-- gelr:additional_tax_numbers, bug 148523, begin
DEFINE CUST_DELIVERY_GSTIN            = EXT_S57
DEFINE CUST_DOCUMENT_GSTIN            = EXT_S58
DEFINE COMPANY_DOCUMENT_ADDR          = EXT_S59
DEFINE COMPANY_DELIVERY_ADDR          = EXT_S60
DEFINE USE_BUYER_DOC_ADDR             = EXT_S61
DEFINE CUST_DOCUMENT_PAN              = EXT_S62
DEFINE CUST_DELIVERY_PAN              = EXT_S63
DEFINE COMPANY_GSTIN                  = EXT_S64
DEFINE COMPANY_PAN                    = EXT_S65
-- gelr:additional_tax_numbers, bug 148523, end
-- MBrant 4/21  
DEFINE COMMODITY_GRP2                 = S205
DEFINE COMMODITY_GRP2_DESC            = S206
DEFINE NET_WEIGHT_UOM                 = S207
DEFINE NET_WEIGHT                     = N109
DEFINE COUNTRY_OF_ORIGIN_DESC         = S208
-- MBrant 6/3/20
DEFINE TOTAL_WEIGHT                   = N110

-- MBrant 6/9/20
DEFINE LINE_NET_WEIGHT                = N111
DEFINE CUST_DFT_LANG_CD               = S209

-- MBrant 6/2/20
DEFINE CC_FIRST_NAME                  = S210
DEFINE CC_LAST_NAME                   = S211
DEFINE CC_ADDRESS_LINE                = S212
DEFINE CC_CITY                        = S213
DEFINE CC_STATE                       = S214
DEFINE CC_ZIP_CODE                    = S215
DEFINE CC_COUNTRY                     = S216
DEFINE CC_EMAIL_ADDRESS               = S217

-- MBrant 9/28/20     
DEFINE COORDINATOR_PHONE              = S218

-- MBrant 12/08/20                   
DEFINE DELIVERY_NOTE_ID               = S219
DEFINE SHIPMENT_ID                    = S220

-- MBrant 12/08/20                   
DEFINE PAYMENT_METHOD_LN              = S221
DEFINE BANK_ACCOUNT_LN                = S222
DEFINE BANK_ACCOUNT_TXT               = S223
DEFINE BIC_CODE_LN                    = S224    

-- MBrant 02/06/21                   
DEFINE CREATE_JINSUI_INVOICE          = S225

-- MBrant 6/14/21               
DEFINE HARMONIZE_CODE                 = S226

-- MBrant 2/15/22 -- SHIPPED FROM SUPPLIER ADDRESS  
DEFINE SUPPLIER_NAME             = S227
DEFINE SUPPLIER_ADDR_1           = S228
DEFINE SUPPLIER_ADDR_2           = S229
DEFINE SUPPLIER_ADDR_3           = S230
DEFINE SUPPLIER_ADDR_4           = S231
DEFINE SUPPLIER_ADDR_5           = S232
DEFINE SUPPLIER_ADDR_6           = S233
DEFINE SUPPLIER_ADDR_7           = S234
DEFINE SUPPLIER_CODE             = S235
DEFINE SUPPLIER_NO               = S236

-- MBrant 3/31/22   
DEFINE SUPPLIER_SITE             = S237
DEFINE DEMAND_CODE_DB            = S238 

--  
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUSTOMER_INVOICE_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- Report:     Invoice
-- Type:       PLSQL1.2
-- Objects:    TABLES = INFO_SERVICES_RPT
--             VIEW   = CUSTOMER_ORDER_IVC_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Invoice
-----------------------------------------------------------------------------
-- Note : added new views for printing characteristics
PROMPT Creating report view &VIEW
-- gelr:additional_tax_numbers:INFI9-090, added TAX_ID_NO_TEXT, TAX_ID_NO columns 
CREATE OR REPLACE VIEW &VIEW AS
SELECT 
       H.RESULT_KEY                    RESULT_KEY,
       d.ROW_NO                        ROW_NO,
       H.PARENT_ROW_NO                 PARENT_ROW_NO,
       H.ROW_NO                        HEADER_ROW_NO, 
       H.&ORDER_NO                     ORDER_NO,
       H.&DATE_ENTERED                 DATE_ENTERED,
       H.&INVOICE_NO                   INVOICE_NO,
       H.&PRE_INVOICE_NO               PRE_INVOICE_NO,
       H.&INVOICE_ID_STR               INVOICE_ID_STR,
       H.&HEADER_STATUS                HEADER_STATUS,
       H.&INVOICE_TYPE                 INVOICE_TYPE,
       H.&INVOICE_DATE                 INVOICE_DATE,
       H.&AUTHORIZE_NAME               AUTHORIZE_NAME,
       H.&CUSTOMER_NO                  CUSTOMER_NO,
       H.&CONTRACT                     CONTRACT,
       H.&CONTRACT_DESCRIPTION         CONTRACT_DESCRIPTION,
       H.&CUST_REF                     CUST_REF,       
       H.&CUST_REF_DESC                CUST_REF_DESC,
       H.&SHIP_ADDR_1                  SHIP_ADDR_1,
       H.&SHIP_ADDR_2                  SHIP_ADDR_2,
       H.&SHIP_ADDR_3                  SHIP_ADDR_3,
       H.&SHIP_ADDR_4                  SHIP_ADDR_4,
       H.&SHIP_ADDR_5                  SHIP_ADDR_5,
       H.&SHIP_ADDR_6                  SHIP_ADDR_6,
       H.&SHIP_ADDR_7                  SHIP_ADDR_7,
       H.&SHIP_ADDR_8                  SHIP_ADDR_8,
       H.&SHIP_ADDR_9                  SHIP_ADDR_9,
       H.&SHIP_ADDR_10                 SHIP_ADDR_10,
       H.&SHIP_ADDR_11                 SHIP_ADDR_11,
       H.&BILL_ADDR_1                  BILL_ADDR_1,
       H.&BILL_ADDR_2                  BILL_ADDR_2,
       H.&BILL_ADDR_3                  BILL_ADDR_3,
       H.&BILL_ADDR_4                  BILL_ADDR_4,
       H.&BILL_ADDR_5                  BILL_ADDR_5,
       H.&BILL_ADDR_6                  BILL_ADDR_6,
       H.&BILL_ADDR_7                  BILL_ADDR_7,
       H.&BILL_ADDR_8                  BILL_ADDR_8,
       H.&BILL_ADDR_9                  BILL_ADDR_9,
       H.&BILL_ADDR_10                 BILL_ADDR_10,
       H.&BILL_ADDR_11                 BILL_ADDR_11,
       H.&SHIP_VIA_DESC                SHIP_VIA_DESC,
       H.&FORWARD_AGENT                FORWARD_AGENT,
       H.&LABEL_NOTE                   LABEL_NOTE,
       H.&DELIVERY_TERMS_DESC          DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION           DEL_TERMS_LOCATION,
       H.&DEBIT_INVOICE_REF            DEBIT_INVOICE_REF,
       H.&VAT_NO                       VAT_NO,
       H.&WANTED_DELIVERY_DATE         WANTED_DELIVERY_DATE,
       H.&PAY_TERMS_DESC               PAY_TERMS_DESC,
       H.&DUE_DATE                     DUE_DATE,
       H.&CURR_CODE                    CURR_CODE,
       H.&COPY_TEXT                    COPY_TEXT,
       H.&PAGE_FOOTER_1                PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2                PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3                PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4                PAGE_FOOTER_4,
       H.&PRINT_CONFIG_ID              PRINT_CONFIG_ID,
       H.&RMA_NO                       RMA_NO,
       H.&CUSTOMER_PO_NO               CUSTOMER_PO_NO,
       -- Note : StreamServe start
       H.&CUSTOMER_FAX                 CUSTOMER_FAX,
       H.&CUSTOMER_EMAIL               CUSTOMER_EMAIL,
       H.&PRINTER_FLAG                 PRINTER_FLAG,
       H.&FAX_FLAG                     FAX_FLAG,
       H.&EMAIL_FLAG                   EMAIL_FLAG,
       H.&USER_EMAIL                   USER_EMAIL,
       H.&USER_FILE_DIR                USER_FILE_DIR,
       -- Note : StreamServe stop
       -- Note : For Argentinian Layout
       H.&NUMERATION_GROUP             NUMERATION_GROUP,
       H.&COMP_ADDR_1                  COMP_ADDR_1,
       H.&COMP_ADDR_2                  COMP_ADDR_2,
       H.&COMP_ADDR_3                  COMP_ADDR_3,
       H.&COMP_ADDR_4                  COMP_ADDR_4,
       H.&COMP_ADDR_5                  COMP_ADDR_5,
       H.&COMP_ADDR_6                  COMP_ADDR_6,
       H.&COMP_ZIP_COUNTRY             COMP_ZIP_COUNTRY,
       H.&COMP_PHONE                   COMP_PHONE,
       H.&SALESMAN                     SALESMAN,
       H.&REGION_DISTRICT              REGION_DISTRICT,
       H.&CUSTOMER_STATE_DESC          CUSTOMER_STATE_DESC,
       H.&DATE_CREATED                 DATE_CREATED,
       H.&START_MONTH_YEAR             START_MONTH_YEAR,
       H.&AUTH_EXP_DATE                AUTH_EXP_DATE,
       H.&AUTHORIZATION_ID             AUTHORIZATION_ID,
       H.&CUST_TAX_ID_NUMBER           CUST_TAX_ID_NUMBER,
       H.&COMP_TAX_ID_NUMBER           COMP_TAX_ID_NUMBER,
       H.&CUST_TAX_LIABILITY           CUST_TAX_LIABILITY,
       H.&NUMERATION                   NUMERATION,
       H.&INVOICE_REFERENCE            INVOICE_REFERENCE,
       H.&OUR_ID_TAX_OFF               OUR_ID_TAX_OFF,
       H.&COMP_TAX_LIABILITY           COMP_TAX_LIABILITY,
       H.&CUST_NUMBER_NAME             CUST_NUMBER_NAME,
       D.&ADDITIONAL_DISCOUNT          ADDITIONAL_DISCOUNT,
       H.&INVOICE_COPY_LABEL           INVOICE_COPY_LABEL,
       H.&COMP_REGISTER_CODE           COMP_REGISTER_CODE,
       H.&CUST_REGISTER_CODE           CUST_REGISTER_CODE,
       D.&ORDER_LINE_POS               ORDER_LINE_POS,
       D.&LINE_NO                      LINE_NO,
       D.&LINE_ITEM_NO                 LINE_ITEM_NO,
       D.&CATALOG_NO                   CATALOG_NO,
       D.&CATALOG_DESC                 CATALOG_DESC,
       D.&CUSTOMER_PART_NO             CUSTOMER_PART_NO,
       D.&CUSTOMER_PART_DESC           CUSTOMER_PART_DESC,
       D.&GTIN_NO                      GTIN_NO,
       D.&QTY_INVOICED                 QTY_INVOICED,
       D.&SALES_UNIT_MEAS              SALES_UNIT_MEAS,
       D.&PRICE_PER_PRICE_UNIT         PRICE_PER_PRICE_UNIT,
       D.&ORDER_DISCOUNT               ORDER_DISCOUNT,
       D.&PRICE_TOTAL                  PRICE_TOTAL,
       D.&DISCOUNT                     DISCOUNT,
       D.&PRICE_QTY                    PRICE_QTY,
       D.&PRICE_UNIT_MEAS              PRICE_UNIT_MEAS,
       D.&ORDER_LINE_NOTES             ORDER_LINE_NOTES,
       D.&CATALOG_NO_NOTES             CATALOG_NO_NOTES,
       D.&BLOCK_NO                     BLOCK_NO,
       D.&ORDER_NOTES                  ORDER_NOTES,
       D.&DOCUMENT_PHRASE              DOCUMENT_PHRASE,
       D.&CUSTOMER_NOTES               CUSTOMER_NOTES,
       D.&SUB_TOTAL_AMOUNT             SUB_TOTAL_AMOUNT,
       D.&FEE_AMOUNT                   FEE_AMOUNT,
       D.&NET_CURR_AMOUNT              NET_CURR_AMOUNT,
       D.&VAT_CURR_AMOUNT              VAT_CURR_AMOUNT,
       D.&ROUND_AMOUNT                 ROUND_AMOUNT,
       D.&COR_TAX_CURR_CODE            COR_TAX_CURR_CODE,
       D.&GROSS_CURR_AMOUNT            GROSS_CURR_AMOUNT,
       D.&EUR_NET_CURR_AMOUNT          EUR_NET_CURR_AMOUNT,
       D.&EUR_VAT_CURR_AMOUNT          EUR_VAT_CURR_AMOUNT,
       D.&EUR_GROSS_CURR_AMOUNT        EUR_GROSS_CURR_AMOUNT,
       D.&CHARGE_TYPE                  CHARGE_TYPE,
       D.&CHARGE_TYPE_DESC             CHARGE_TYPE_DESC,
       D.&CHARGE_AMOUNT                CHARGE_AMOUNT,
       D.&CHARGED_QTY                  CHARGED_QTY,
       D.&CHARGE_UNIT_MEAS             CHARGE_UNIT_MEAS,
       D.&CHARGE_PERCENT               CHARGE_PERCENT,
       D.&CHARGE_PERCENT_BASIS         CHARGE_PERCENT_BASIS,
       D.&TOTAL_CHARGED_AMOUNT         TOTAL_CHARGED_AMOUNT,
       D.&CHARGE_TYPE_DOC_TEXT         CHARGE_TYPE_DOC_TEXT,
       D.&CHARGE_ROW_DOC_TEXT          CHARGE_ROW_DOC_TEXT,
       D.&GROUP_DESC                   GROUP_DESC,
       D.&GROUP_TEXT                   GROUP_TEXT,
       D.&GROUP_SUM                    GROUP_SUM,
       0                               INVOICE_ID,
       D.&STAGE                        STAGE,
       D.&DESCRIPTION                  DESCRIPTION,
       D.&TOTAL_PERCENTAGE             TOTAL_PERCENTAGE,
       D.&TOTAL_ON_LINE                TOTAL_ON_LINE,
       D.&STAGE_NOTES                  STAGE_NOTES,
       D.&VAT_CODE                     VAT_CODE,
       D.&VAT_PERCENTAGE               VAT_PERCENTAGE,
       D.&VAT_SUM                      VAT_SUM,
       D.&EUR_VAT_SUM                  EUR_VAT_SUM,
       D.&REF_ID                       REF_ID,
       D.&WARRANTY_DOC_TEXT            WARRANTY_DOC_TEXT,
       D.&CONFIG_ID                    CONFIG_ID,
       D.&CONFIG_SPEC_DESC             CONFIG_SPEC_DESC,
       D.&CONDITION_CODE               CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION   CONDITION_CODE_DESCRIPTION,
       H.&CONDITION_PRINT              CONDITION_PRINT,
       D.&LINE_ORDER_NO                LINE_ORDER_NO,
       D.&ORDER_LINE_NO                ORDER_LINE_NO,
       D.&ORDER_REL_NO                 ORDER_REL_NO,
       D.&LINE_DEBIT_INVOICE_REF       LINE_DEBIT_INVOICE_REF,
       D.&LINE_CUSTOMER_PO_NO          LINE_CUSTOMER_PO_NO,
       D.&REAL_SHIP_DATE               REAL_SHIP_DATE,
       D.&BASE_CURR                    BASE_CURR,
       D.&TAXABLE                      TAXABLE,
       D.&DELIVERY                     DELIVERY,
       D.&NOTE_TEXT                    NOTE_TEXT,
       D.&LOT_BATCH_NO                 LOT_BATCH_NO,       
       H.&PAYMENT_REFERENCE            PAYMENT_REFERENCE,
       D.&TAX_CODE_DESC                TAX_CODE_DESC,
       D.&TAX_RATE                     TAX_RATE,
       D.&TAX_AMOUNT                   TAX_AMOUNT,
       D.&INSTALLMENT_ID               INSTALLMENT_ID,
       D.&PAY_METHOD_DESC              PAY_METHOD_DESC,
       D.&INSTALLMENT_DUE_DATE         INSTALLMENT_DUE_DATE,
       D.&INSTALLMENT_AMOUNT           INSTALLMENT_AMOUNT,
       D.&DISCOUNT_DATE                DISCOUNT_DATE,
       D.&DISCOUNT_AMOUNT              DISCOUNT_AMOUNT,
       D.&SUB_TOTAL                    SUB_TOTAL,
       D.&SUB_TOTAL_GROSS              SUB_TOTAL_GROSS,
       D.&SUB_TOT_WITH_CHARGES         SUB_TOT_WITH_CHARGES,
       D.&TOTAL                        TOTAL,
       H.&COMP_CITY_DESC               COMP_CITY_DESC,
       H.&CUSTOMER_CITY_DESC           CUSTOMER_CITY_DESC,
       H.&CUSTOMER_ZIP_COUNTRY         CUSTOMER_ZIP_COUNTRY,
       H.&COMP_STATE_DESC              COMP_STATE_DESC,
       D.&CHARACTERISTIC_ID            CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE         CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM           CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY           CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1)  CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)   CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE         CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG         CHARACTERISTIC_PFLAG,
       D.&LINE_SHIP_ADDR_1             LINE_SHIP_ADDR_1,
       D.&LINE_SHIP_VIA_DESC           LINE_SHIP_VIA_DESC,
       D.&LINE_DEL_TERMS_DESC          LINE_DEL_TERMS_DESC,
       D.&LINE_DEL_TERMS_LOCATION      LINE_DEL_TERMS_LOCATION,
       D.&LINE_FORWARD_AGENT           LINE_FORWARD_AGENT,
       D.&LINE_VAT_NO                  LINE_VAT_NO,
       D.&LINE_VAT_CODE                LINE_VAT_CODE,
       D.&LINE_DISC_AMOUNT             LINE_DISC_AMOUNT,
       D.&LINE_VAT_PERCENT             LINE_VAT_PERCENT,
       D.&TOTAL_UNIT_PRICE             TOTAL_UNIT_PRICE,
       D.&TAX_BASE_AMOUNT              TAX_BASE_AMOUNT,
       D.&TAX_TEXTS                    TAX_TEXTS,
       D.&TOTAL_DISCOUNT               TOTAL_DISCOUNT,
       D.&CHARGE_VAT_CODE              CHARGE_VAT_CODE,
       D.&CHARGE_VAT_PERCENT           CHARGE_VAT_PERCENT,
       D.&INVOICE_LINE_NO              INVOICE_LINE_NO,
       D.&AD_INVOICE_NO                AD_INVOICE_NO,
       D.&AD_PAYMENT_DATE              AD_PAYMENT_DATE,
       D.&AD_PAID_NET_AMOUNT           AD_PAID_NET_AMOUNT,
       D.&AD_TAX_AMOUNT                AD_TAX_AMOUNT,
       D.&AD_PAID_GROSS_AMOUNT         AD_PAID_GROSS_AMOUNT,
       D.&TOT_PAID_IN_ADVANCE          TOT_PAID_IN_ADVANCE,
       D.&AD_PAYMENT_MATCHED_AMOUNT    AD_PAYMENT_MATCHED_AMOUNT,
       D.&TOT_AD_PAY_MATCHED_AMOUNT    TOT_AD_PAY_MATCHED_AMOUNT,
       D.&OT_INVOICE_NO                OT_INVOICE_NO,
       D.&OT_DUE_DATE                  OT_DUE_DATE,
       D.&OT_NET_AMOUNT                OT_NET_AMOUNT,
       D.&OT_TAX_AMOUNT                OT_TAX_AMOUNT,
       D.&OT_GROSS_AMOUNT              OT_GROSS_AMOUNT,
       D.&REM_UNCONSUMED_ADVANCE       REM_UNCONSUMED_ADVANCE,
       D.&REM_AMOUNT_TO_PAID           REM_AMOUNT_TO_PAID,
       D.&CONTACT                      CONTACT,
       D.&CHARGE_ORDER_NO              CHARGE_ORDER_NO,
       D.&PRICE_INCL_TAX               PRICE_INCL_TAX,
       D.&PRICE_INCL_TAX_TOTAL         PRICE_INCL_TAX_TOTAL,
       D.&CHARGE_INCL_TAX              CHARGE_INCL_TAX,
       D.&CHARGE_INCL_TAX_TOTAL        CHARGE_INCL_TAX_TOTAL,
       D.&PRINT_PRICES_INCL_TAX        PRINT_PRICES_INCL_TAX,
       D.&USE_PRICE_INCL_TAX           USE_PRICE_INCL_TAX,
       H.&TAX_INVOICE_TYPE             TAX_INVOICE_TYPE,
       H.&SEVERAL_VALUE                SEVERAL_VALUE,       
       H.&PRINT_ADV_PAY_ON_CU_INV      PRINT_ADV_PAY_ON_CU_INV,
       H.&PAYMENT                      PAYMENT,
       H.&DEBIT_TAX                    DEBIT_TAX,
       D.&LINE_PAYMENT                 LINE_PAYMENT,
       D.&LINE_DEBIT_TAX               LINE_DEBIT_TAX,
       D.&SHIP_DATE_FIRST              SHIP_DATE_FIRST,
       D.&BASE_VAT_SUM                 BASE_VAT_SUM,
       D.&GROSS_AMOUNT_IN_CURR         GROSS_AMOUNT_IN_CURR,
       D.&VERBALLY_INVOICE_AMOUNT      VERBALLY_INVOICE_AMOUNT,
       D.&PRE_TAX_CURR_CODE            PRE_TAX_CURR_CODE,
       H.&REF_INVOICE_DATE             REF_INVOICE_DATE,
       H.&DATE_OF_DUPLICATE            DATE_OF_DUPLICATE,
       H.&DUPLICATE_OPTION             DUPLICATE_OPTION,
       D.&REF_INVOICE_LINE_DATE        REF_INVOICE_LINE_DATE,
       D.&CORRECTION_TEXT              CORRECTION_TEXT,
       D.&CORR_TITLE                   CORR_TITLE,
       D.&INVOICE_AMOUNT               INVOICE_AMOUNT,
       H.&PAYMENT_METHOD               PAYMENT_METHOD,
       H.&BANK_ACCOUNT                 BANK_ACCOUNT,
       D.&PAYMENT_METHOD_LINE          PAYMENT_METHOD_LINE,
       D.&BANK_ACCOUNT_LINE            BANK_ACCOUNT_LINE,
       H.&TAX_CURR_RATE                TAX_CURR_RATE,
       H.&DEB_TAX_CURR_RATE            DEB_TAX_CURR_RATE,
       -- DIS003 start
       H.&COMPAYADDR1                  COMPANY_PAY_ADDR1,
       H.&COMPAYADDR2                  COMPANY_PAY_ADDR2,
       H.&COMPAYADDR3                  COMPANY_PAY_ADDR3,
       H.&COMPAYADDR4                  COMPANY_PAY_ADDR4,
       H.&COMPAYADDR5                  COMPANY_PAY_ADDR5,
       H.&COMPAYADDR6                  COMPANY_PAY_ADDR6,
       H.&COMPAYADDR7                  COMPANY_PAY_ADDR7,
       D.&LINE_VAT_AMT                 LINE_VAT_AMOUNT,
       D.&LINE_GROSS_AMT               LINE_GROSS_AMOUNT,
       H.&DELIVERIES                   DELIVERIES,
       D.&TAXCHARACTER                 TAX_CHARACTER,
       D.&SHOW_SUB_TOTAL_ITEMS         SHOW_SUB_TOTAL_ITEMS,
       -- DIS003 end
       D.&DISCOUNT_PERCENT             DISCOUNT_PERCENT,
       D.&DISCOUNT_NET                 DISCOUNT_NET,
       D.&DISCOUNT_TAX_PERCENT         DISCOUNT_TAX_PERCENT,
       D.&DISCOUNT_TAX                 DISCOUNT_TAX,
       D.&BANK_ACCOUNT_TEXT            BANK_ACCOUNT_TEXT,
       H.&PREPAYMENT_EXIST             PREPAYMENT_EXIST,
       D.&PREPAYMENT_TEXT              PREPAYMENT_TEXT,
       D.&PRE_NET_CURR_AMOUNT          PRE_NET_CURR_AMOUNT,
       D.&PRE_VAT_CURR_AMOUNT          PRE_VAT_CURR_AMOUNT,
       D.&PRE_GROSS_CURR_AMOUNT        PRE_GROSS_CURR_AMOUNT,
       D.&PREPAY_INV_NO                PREPAY_INV_NO,
       D.&PREPAY_INV_SERIES_ID         PREPAY_INV_SERIES_ID,
       D.&PREPAY_TAX_AMOUNT            PREPAY_TAX_AMOUNT,
       D.&DELIVERY_NOTE_REF            DELIVERY_NOTE_REF,
       D.&PART_CATALOG_NOTES           PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES         INVENTORY_PART_NOTES,
       D.&RETURN_LINE_NOTES            RETURN_LINE_NOTES,
       D.&REPORT_FOOT                  REPORT_FOOT,
       D.&TAX_FEE_AMOUNT               TAX_FEE_AMOUNT,
       H.&BIC_CODE_HEAD                BIC_CODE_HEAD,
       D.&BIC_CODE_LINE                BIC_CODE_LINE,
       D.&AIRWAY_BILL_NO               AIRWAY_BILL_NO,
       D.&GRP_SUM_INCL_TAX             GRP_SUM_INCL_TAX,
       D.&SUB_TOTAL_INCL_TAX           SUB_TOTAL_INCL_TAX,
       D.&TAX_FEE_BASE_AMOUNT          TAX_FEE_BASE_AMOUNT,
       D.&NET_SALES_PRICE_CURR         NET_SALES_PRICE_CURR,
       D.&BASE_NET_CURR_AMOUNT		   BASE_NET_CURR_AMOUNT,
       D.&SERIAL_NO                    SERIAL_NO,
       D.&VAT_REDUCTION_AT_PAY         VAT_REDUCTION_AT_PAY,
       D.&RENTAL_TRANSACTION_START_DATE RENTAL_TRANSACTION_START_DATE,
       D.&RENTAL_TRANSACTION_END_DATE   RENTAL_TRANSACTION_END_DATE,
       D.&ON_RENTAL_QTY                 ON_RENTAL_QTY,
       D.&INVOICED_DURATION_DAYS        INVOICED_DURATION_DAYS,
       H.&LATEST_SHIP_DATE              LATEST_SHIP_DATE,
       D.&COUNTRY_OF_ORIGIN             COUNTRY_OF_ORIGIN,
       D.&CUSTOMS_STAT_NO               CUSTOMS_STAT_NO,
       D.&PACKAGE_ORDER_LINE_POS        PACKAGE_ORDER_LINE_POS,
       D.&PACKAGE_LINE_NO               PACKAGE_LINE_NO,
       D.&RENTAL_MODE                   RENTAL_MODE,
       H.&HEADER_INVOICE_TEXT           HEADER_INVOICE_TEXT,
       D.&INVOICE_TEXT                  INVOICE_TEXT,
       D.&COR_GROSS_AMOUNT_IN_CURR      COR_GROSS_AMOUNT_IN_CURR,
       D.&COR_VAT_CODE                  COR_VAT_CODE,
       D.&COR_DESCRIPTION               COR_DESCRIPTION,
       D.&COR_TAX_FEE_AMOUNT            COR_TAX_FEE_AMOUNT,
       D.&COR_TOTAL_UNIT_PRICE          COR_TOTAL_UNIT_PRICE,
       D.&COR_TAX_BASE_AMOUNT           COR_TAX_BASE_AMOUNT,
       D.&COR_TAX_TEXTS                 COR_TAX_TEXTS,
       D.&COR_TOTAL_DISCOUNT            COR_TOTAL_DISCOUNT,
       D.&COR_VAT_PERCENTAGE            COR_VAT_PERCENTAGE,
       D.&COR_BASE_VAT_SUM              COR_BASE_VAT_SUM,
       D.&COR_BASE_VAT_CODE             COR_BASE_VAT_CODE,
       D.&COR_BASE_DESCRIPTION          COR_BASE_DESCRIPTION,
       D.&COR_BASE_VAT_PERCENTAGE       COR_BASE_VAT_PERCENTAGE,
       D.&TOT_TAX_AMOUNT                TOT_TAX_AMOUNT,
       D.&COR_TOT_TAX_AMOUNT            COR_TOT_TAX_AMOUNT,
       D.&RENTAL_ORDER_LINE_POS         RENTAL_ORDER_LINE_POS,
       D.&RENTAL_LINE_NO                RENTAL_LINE_NO,
       D.&FREE_OF_CHARGE_TAX_BASIS      FREE_OF_CHARGE_TAX_BASIS,
       D.&COMPANY_BEARING_TAX_AMT       COMPANY_BEARING_TAX_AMT,
       D.&TOT_PRE_INV_DEB_CORR          TOT_PRE_INV_DEB_CORR,
       D.&TOT_PRE_INV_CRE_CORR          TOT_PRE_INV_CRE_CORR,
       D.&TOT_ADVANCE_RECEIVED          TOT_ADVANCE_RECEIVED,
       D.&PRE_CONSUMED_ADVANCE          PRE_CONSUMED_ADVANCE,
       D.&PRE_UNCONSUMED_ADVANCE        PRE_UNCONSUMED_ADVANCE,
       H.&HEADER_CORRECTION_REASON      HEADER_CORRECTION_REASON,
       D.&CORRECTION_REASON             CORRECTION_REASON,
       D.&ADVANCE_CONSUMED_CURRENT      ADVANCE_CONSUMED_CURRENT,
       H.&COMP_BRANCH_ID                COMP_BRANCH_ID,
       H.&COMP_BRANCH_DESC              COMP_BRANCH_DESC,
       H.&CUSTOMER_BRANCH               CUSTOMER_BRANCH,
       H.&PREFIX_A                      PREFIX_A,
       H.&PREFIX_B                      PREFIX_B,
       H.&PREFIX_C                      PREFIX_C,
       H.&PREFIX_A_TITLE                PREFIX_A_TITLE,
       H.&PREFIX_B_TITLE                PREFIX_B_TITLE,
       H.&PREFIX_C_TITLE                PREFIX_C_TITLE,
       H.&SERIAL_NUMBER                 SERIAL_NUMBER,
       H.&TAX_ID_NO_TEXT1               TAX_ID_NO_TEXT1,
       H.&TAX_ID_NO_TEXT2               TAX_ID_NO_TEXT2,
       H.&TAX_ID_NO_TEXT3               TAX_ID_NO_TEXT3,
       H.&TAX_ID_NO_TEXT4               TAX_ID_NO_TEXT4,
       H.&TAX_ID_NO_TEXT5               TAX_ID_NO_TEXT5,
       H.&TAX_ID_NO_TEXT6               TAX_ID_NO_TEXT6,
       H.&TAX_ID_NO2                    TAX_ID_NO2,
       H.&TAX_ID_NO3                    TAX_ID_NO3,
       H.&TAX_ID_NO4                    TAX_ID_NO4,
       H.&TAX_ID_NO5                    TAX_ID_NO5,
       H.&TAX_ID_NO6                    TAX_ID_NO6,
       -- gelr:tax_exemption_certify, begin
       D.&CIG_CODE                      CIG_CODE,
       D.&CUP_CODE                      CUP_CODE,
       H.&TAX_EXEMPT_CERT_NO            TAX_EXEMPT_CERT_NO,
       H.&CERT_JURISDICTION             CERT_JURISDICTION,
       -- gelr:tax_exemption_certify, end   
       -- gelr:in_hsn_sac_codes, GLOW-2226, begin
       D.&HSN_SAC_CODE                  HSN_SAC_CODE,
       -- gelr:in_hsn_sac_codes, GLOW-2226, end
       -- gelr:in_hsn_sac_codes, GLOW-2262, begin
       D.&CGST_TAX_AMNT                 CGST_TAX_AMNT,
       D.&SGST_TAX_AMNT                 SGST_TAX_AMNT,
       D.&IGST_TAX_AMNT                 IGST_TAX_AMNT,
       D.&UGST_TAX_AMNT                 UGST_TAX_AMNT,
       D.&OTHER_TAX_AMNT                OTHER_TAX_AMNT,
       D.&CGST_TAX_PCT                  CGST_TAX_PCT,
       D.&SGST_TAX_PCT                  SGST_TAX_PCT,
       D.&IGST_TAX_PCT                  IGST_TAX_PCT,
       D.&UGST_TAX_PCT                  UGST_TAX_PCT,
       D.&OTHER_TAX_PCT                 OTHER_TAX_PCT,
       D.&CGST_FEE_TYPE                 CGST_FEE_TYPE,
       D.&SGST_FEE_TYPE                 SGST_FEE_TYPE,
       D.&IGST_FEE_TYPE                 IGST_FEE_TYPE,
       D.&UGST_FEE_TYPE                 UGST_FEE_TYPE,
       D.&OTHER_FEE_TYPE                OTHER_FEE_TYPE,
       -- gelr:in_hsn_sac_codes, GLOW-2262, end
       -- gelr:prepayment_tax_document, begin
       D.&MATCHED_TAX_DOC_BASE_ACC_CURR MATCHED_TAX_DOC_BASE_ACC_CURR,
       D.&MATCHED_TAX_DOC_TAX_ACC_CURR  MATCHED_TAX_DOC_TAX_ACC_CURR,
       D.&TAX_DOC_BASE_ACC_CURR         TAX_DOC_BASE_ACC_CURR,
       D.&TAX_DOC_TAX_ACC_CURR          TAX_DOC_TAX_ACC_CURR,                           
       D.&MATCHED_TAX_DOC_BASE          MATCHED_TAX_DOC_BASE,
       D.&MATCHED_TAX_DOC_TAX           MATCHED_TAX_DOC_TAX,
       D.&TAX_DOC_BASE                  TAX_DOC_BASE,
       D.&TAX_DOC_TAX                   TAX_DOC_TAX,                    
       -- gelr:prepayment_tax_document, end
       -- gelr:service_statistics_no, begin
       D.&SERVICE_STATISTICS_NO         SERVICE_STATISTICS_NO,
       -- gelr:service_statistics_no, end
       -- gelr:hu_org_invoice_no_ref begin
      H.&ORG_SERIES_ID                 ORG_SERIES_ID,
      H.&ORG_INVOICE_NO                ORG_INVOICE_NO,
      -- gelr:hu_org_invoice_no_ref begin
      -- gelr:tax_fulfilment_date, begin 
      H.&TAX_FULFILMENT_DATE           TAX_FULFILMENT_DATE,
      -- gelr:tax_fulfilment_date, end
      -- gelr:prepayment_tax_document, begin
      H.&ORIG_TAX_DOC_SERIES_REF       ORIG_TAX_DOC_SERIES_REF,
      H.&ORIG_TAX_DOC_NUMBER_REF       ORIG_TAX_DOC_NUMBER_REF,
      -- gelr:prepayment_tax_document, end
      -- gelr:hu_vat_control_statement, begin 
      H.&COMP_GROUP_TAX_ID_NUMBER      COMP_GROUP_TAX_ID_NUMBER,
      H.&CUST_GROUP_TAX_ID_NUMBER      CUST_GROUP_TAX_ID_NUMBER,
      H.&COMP_DOMESTIC_TAX_ID_NUMBER   COMP_DOMESTIC_TAX_ID_NUMBER,
      H.&CUST_DOMESTIC_TAX_ID_NUMBER   CUST_DOMESTIC_TAX_ID_NUMBER, 
      -- gelr:hu_vat_control_statement, end 
      -- gelr:digital_signature, begin
      H.&DIGITAL_SIGNATURE             DIGITAL_SIGNATURE,
      -- gelr:digital_signature, end
      -- gelr:pt_erp_certification, begin
      H.&DOCUMENT_TYPE             DOCUMENT_TYPE,
      H.&ERP_CERTIFICATE           ERP_CERTIFICATE,
      -- gelr:pt_erp_certification, end      
      -- gelr:additional_tax_numbers, bug 148523, begin  
      H.&CUST_DELIVERY_GSTIN          CUST_DELIVERY_GSTIN,
      H.&CUST_DOCUMENT_GSTIN          CUST_DOCUMENT_GSTIN,
      H.&COMPANY_DOCUMENT_ADDR        COMPANY_DOCUMENT_ADDR,
      H.&COMPANY_DELIVERY_ADDR        COMPANY_DELIVERY_ADDR,
      H.&USE_BUYER_DOC_ADDR           USE_BUYER_DOC_ADDR,
      H.&CUST_DOCUMENT_PAN            CUST_DOCUMENT_PAN,
      H.&CUST_DELIVERY_PAN            CUST_DELIVERY_PAN,
      H.&COMPANY_GSTIN                COMPANY_GSTIN,
      H.&COMPANY_PAN                  COMPANY_PAN,
      D.&COMMODITY_GRP2               COMMODITY_GRP2,
      D.&COMMODITY_GRP2_DESC          COMMODITY_GRP2_DESC,
      D.&NET_WEIGHT_UOM               NET_WEIGHT_UOM,
      D.&NET_WEIGHT                   NET_WEIGHT,
      D.&COUNTRY_OF_ORIGIN_DESC       COUNTRY_OF_ORIGIN_DESC, 
      D.&TOTAL_WEIGHT                 TOTAL_WEIGHT, 
      D.&LINE_NET_WEIGHT              LINE_NET_WEIGHT,
      H.&CUST_DFT_LANG_CD             CUST_DFT_LANG_CD,
  -- MBrant 6/12/20
      H.&CC_FIRST_NAME                CC_FIRST_NAME,
      H.&CC_LAST_NAME                 CC_LAST_NAME,                              
      H.&CC_ADDRESS_LINE              CC_ADDRESS_LINE,
      H.&CC_CITY                      CC_CITY, 
      H.&CC_STATE                     CC_STATE, 
      H.&CC_ZIP_CODE                  CC_ZIP_CODE, 
      H.&CC_COUNTRY                   CC_COUNTRY,
      H.&CC_EMAIL_ADDRESS             CC_EMAIL_ADDRESS, 
  -- MBrant 9/28/20
      D.&COORDINATOR_PHONE            COORDINATOR_PHONE,
       -- MBrant 12/08/20
      D.&DELIVERY_NOTE_ID             DELIVERY_NOTE_ID,
      D.&SHIPMENT_ID                  SHIPMENT_ID, 
      -- MBrant 02/04/21 
      H.&PAYMENT_METHOD_LN            PAYMENT_METHOD_LN,
      H.&BANK_ACCOUNT_LN              BANK_ACCOUNT_LN,
      H.&BANK_ACCOUNT_TXT             BANK_ACCOUNT_TXT,
      H.&BIC_CODE_LN                  BIC_CODE_LN, 
        -- MBrant 02/06/21 
      H.&CREATE_JINSUI_INVOICE        CREATE_JINSUI_INVOICE,
       -- MBrant 6/14/21
      D.&HARMONIZE_CODE               HARMONIZE_CODE,
       -- MBrant 2/15/22
      H.&SUPPLIER_NAME                SUPPLIER_NAME, 
      H.&SUPPLIER_ADDR_1              SUPPLIER_ADDR_1,
      H.&SUPPLIER_ADDR_2              SUPPLIER_ADDR_2,
      H.&SUPPLIER_ADDR_3              SUPPLIER_ADDR_3,
      H.&SUPPLIER_ADDR_4              SUPPLIER_ADDR_4,
      H.&SUPPLIER_ADDR_5              SUPPLIER_ADDR_5,
      H.&SUPPLIER_ADDR_6              SUPPLIER_ADDR_6,
      H.&SUPPLIER_ADDR_7              SUPPLIER_ADDR_7,
      D.&SUPPLIER_CODE                SUPPLIER_CODE,
      D.&SUPPLIER_NO                  SUPPLIER_NO,               
       -- gelr:additional_tax_numbers, bug 148523, begin
      -- Add Mod MBrant 3/31/22  
      D.&SUPPLIER_SITE                SUPPLIER_SITE, 
      D.&DEMAND_CODE_DB               DEMAND_CODE_DB        
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
AND    D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Order Number^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..date_entered IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Order Date^ITEM_NAME=iDateEntered^';
COMMENT ON COLUMN &VIEW..invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice Number^ITEM_NAME=iInvoiceNo^';
COMMENT ON COLUMN &VIEW..pre_invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Preliminery Invoice Number^ITEM_NAME=iPreInvoiceNo^';
COMMENT ON COLUMN &VIEW..invoice_id_str IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice Id^ITEM_NAME=iInvoiceIdStr^';
COMMENT ON COLUMN &VIEW..header_status IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Status^ITEM_NAME=iHeaderStatus^';
COMMENT ON COLUMN &VIEW..invoice_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Invoice Type^ITEM_NAME=iInvoiceType^';
COMMENT ON COLUMN &VIEW..invoice_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Invoice Date^ITEM_NAME=iInvoiceDate^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer Number^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..cust_ref IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Your Reference^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..cust_ref_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Your Reference Desc^';
COMMENT ON COLUMN &VIEW..ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..ship_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..ship_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..ship_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..ship_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..ship_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..ship_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..ship_addr_8 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..ship_addr_9 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..ship_addr_10 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..ship_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..bill_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Invoice Address^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..bill_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..bill_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..bill_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..bill_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..bill_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..bill_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..bill_addr_8 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..bill_addr_9 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..bill_addr_10 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..bill_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr11^ITEM_NAME=iBillAddr11^';
COMMENT ON COLUMN &VIEW..ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Via^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..label_note IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..debit_invoice_ref IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Ref Invoice No^ITEM_NAME=iDebitInvRef^';
COMMENT ON COLUMN &VIEW..vat_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity^ITEM_NAME=iVatNo^';
COMMENT ON COLUMN &VIEW..wanted_delivery_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Wanted Delivery Date^ITEM_NAME=iWantedDeliveryDate^';
COMMENT ON COLUMN &VIEW..pay_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Payment^ITEM_NAME=iPayTermsDesc^';
COMMENT ON COLUMN &VIEW..due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iDueDate^';
COMMENT ON COLUMN &VIEW..curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..copy_text IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Copy^ITEM_NAME=iCopyText^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..rma_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=RMA Number^ITEM_NAME=iRmaNo^';
COMMENT ON COLUMN &VIEW..customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Purchase Order Number^ITEM_NAME=iCustomerPoNo^';
-- Note : StreamServe start
COMMENT ON COLUMN &VIEW..CUSTOMER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Fax:^ITEM_NAME=iCustomerFax^';
COMMENT ON COLUMN &VIEW..CUSTOMER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Email:^ITEM_NAME=iCustomerEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- Note : StreamServe stop
COMMENT ON COLUMN &VIEW..numeration_group IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=NumerationGroup^ITEM_NAME=iNumerationGroup^';
COMMENT ON COLUMN &VIEW..comp_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address^ITEM_NAME=iCompAddr1^';
COMMENT ON COLUMN &VIEW..comp_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr2^ITEM_NAME=iCompAddr2^';
COMMENT ON COLUMN &VIEW..comp_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr3^ITEM_NAME=iCompAddr3^';
COMMENT ON COLUMN &VIEW..comp_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr4^ITEM_NAME=iCompAddr4^';
COMMENT ON COLUMN &VIEW..comp_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr5^ITEM_NAME=iCompAddr5^';
COMMENT ON COLUMN &VIEW..comp_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr6^ITEM_NAME=iCompAddr6^';
COMMENT ON COLUMN &VIEW..comp_zip_country IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CompZipCountry^ITEM_NAME=iCompZipCountry^';
COMMENT ON COLUMN &VIEW..comp_phone IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompPhone^ITEM_NAME=iCompPhone^';
COMMENT ON COLUMN &VIEW..salesman IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Salesman:^ITEM_NAME=iSalesman^';
COMMENT ON COLUMN &VIEW..region_district IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Region/District:^ITEM_NAME=iRegionDistrict^';
COMMENT ON COLUMN &VIEW..customer_state_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CustomerStateDesc^ITEM_NAME=iCustomerStateDesc^';
COMMENT ON COLUMN &VIEW..date_created IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date:^ITEM_NAME=iDateCreated^';
COMMENT ON COLUMN &VIEW..start_month_year IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Activity Start Date:^ITEM_NAME=iStartMonthYear^';
COMMENT ON COLUMN &VIEW..auth_exp_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Authorization Expiration date:^ITEM_NAME=iAuthExpDate^';
COMMENT ON COLUMN &VIEW..authorization_id IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Authorization Code:^ITEM_NAME=iAuthorizationId^';
COMMENT ON COLUMN &VIEW..cust_tax_id_number IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Tax Identity No:^ITEM_NAME=iCustTaxIdNo^';
COMMENT ON COLUMN &VIEW..comp_tax_id_number IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Tax Identity No:^ITEM_NAME=iCompTaxIdNo^';
COMMENT ON COLUMN &VIEW..cust_tax_liability IS
   'FLAGS=A----^DATATYPE=STRING(225)^TITLE=Tax Liability:^ITEM_NAME=iCustTaxLiability^';
COMMENT ON COLUMN &VIEW..numeration IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Numeration:^ITEM_NAME=iNumeration^';
COMMENT ON COLUMN &VIEW..invoice_reference IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Invoice Reference:^ITEM_NAME=iInvoiceReference^';
COMMENT ON COLUMN &VIEW..our_id_tax_off IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Our Id at Tax Office:^ITEM_NAME=iOurIdTaxOff^';
COMMENT ON COLUMN &VIEW..comp_tax_liability IS
   'FLAGS=A----^DATATYPE=STRING(225)^TITLE=Comp_Tax Liability:^ITEM_NAME=iCompTaxLiability^';
COMMENT ON COLUMN &VIEW..cust_number_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Info:^ITEM_NAME=iCustNumberName^';
COMMENT ON COLUMN &VIEW..additional_discount IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Add. Disc.%^ITEM_NAME=iAdditionalDiscount^';
COMMENT ON COLUMN &VIEW..country_of_origin IS 
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country Of Origin^';
COMMENT ON COLUMN &VIEW..customs_stat_no IS 
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Customs Stat No^';
COMMENT ON COLUMN &VIEW..INVOICE_COPY_LABEL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Invoice Copy Label^ITEM_NAME=iInvoiceCopyLabel^';
COMMENT ON COLUMN &VIEW..comp_register_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Register Code:^ITEM_NAME=iCompRegisterCode^';
COMMENT ON COLUMN &VIEW..cust_register_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Register Code:^ITEM_NAME=iCustRegisterCode^';
COMMENT ON COLUMN &VIEW..order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=OrderLinePos^ITEM_NAME=iOrderLinePos^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..line_item_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=LineItemNo^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..catalog_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..customer_part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^ITEM_NAME=iCustomerPartNo^';
COMMENT ON COLUMN &VIEW..customer_part_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..qty_invoiced IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Qty^ITEM_NAME=iQtyInvoiced^';
COMMENT ON COLUMN &VIEW..sales_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..price_per_price_unit IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Per Price Unit^ITEM_NAME=iPricePerPriceUnit^';
COMMENT ON COLUMN &VIEW..order_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Order Disc.^ITEM_NAME=iOrderDiscount^';
COMMENT ON COLUMN &VIEW..price_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iPriceTotal^';
COMMENT ON COLUMN &VIEW..discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc.%^ITEM_NAME=iDiscount^';
COMMENT ON COLUMN &VIEW..price_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Qty^ITEM_NAME=iPriceQty^';
COMMENT ON COLUMN &VIEW..price_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iPriceUnitMeas^';
COMMENT ON COLUMN &VIEW..order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..catalog_no_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..block_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..order_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..customer_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..sub_total_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Amount^ITEM_NAME=iSubTotalAmount^';
COMMENT ON COLUMN &VIEW..fee_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Fee Amount^ITEM_NAME=iFeeAmount^';
COMMENT ON COLUMN &VIEW..net_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax^ITEM_NAME=iNetCurrAmount^';
COMMENT ON COLUMN &VIEW..vat_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax^ITEM_NAME=iVatCurrAmount^';
COMMENT ON COLUMN &VIEW..round_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rounding^ITEM_NAME=iRoundAmount^';
COMMENT ON COLUMN &VIEW..cor_tax_curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCorTaxCurrCode^';
COMMENT ON COLUMN &VIEW..gross_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount to Pay^ITEM_NAME=iGrossCurrAmount^';
COMMENT ON COLUMN &VIEW..eur_net_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax in EUR^ITEM_NAME=iEurNetCurrAmount^';
COMMENT ON COLUMN &VIEW..eur_vat_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax in EUR^ITEM_NAME=iEurVatCurrAmount^';
COMMENT ON COLUMN &VIEW..eur_gross_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount to Pay in EUR^ITEM_NAME=iEurGrossCurrAmount^';
COMMENT ON COLUMN &VIEW..charge_type IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Charge Type^ITEM_NAME=iChargeType^';
COMMENT ON COLUMN &VIEW..charge_type_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iChargeTypeDesc^';
COMMENT ON COLUMN &VIEW..charge_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price^ITEM_NAME=iChargeAmount^';
COMMENT ON COLUMN &VIEW..charged_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charged Qty^ITEM_NAME=iChargedQty^';
COMMENT ON COLUMN &VIEW..charge_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iChargeUnitMeas^';
COMMENT ON COLUMN &VIEW..charge_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge %^ITEM_NAME=iChargePercent^';
COMMENT ON COLUMN &VIEW..charge_percent_basis IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge % Basis^ITEM_NAME=iChargePercentbasis^';
COMMENT ON COLUMN &VIEW..total_charged_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Net Amount^ITEM_NAME=iTotalChargedAmount^';
COMMENT ON COLUMN &VIEW..charge_type_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Type Document Text^ITEM_NAME=iChargeTypeDocText^';
COMMENT ON COLUMN &VIEW..charge_row_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Row Document Text^ITEM_NAME=iChargeRowDocText^';
COMMENT ON COLUMN &VIEW..group_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Description^ITEM_NAME=iGroupDesc^';
COMMENT ON COLUMN &VIEW..group_text IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Text^ITEM_NAME=iGroupText^';
COMMENT ON COLUMN &VIEW..group_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge roup Sum^ITEM_NAME=iGroupSum^';
COMMENT ON COLUMN &VIEW..invoice_id IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Preliminary Invoice ID^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..stage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Stage^ITEM_NAME=iStage^';
COMMENT ON COLUMN &VIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..total_percentage IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Total Percentage^ITEM_NAME=iTotalPercentage^';
COMMENT ON COLUMN &VIEW..total_on_line IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total on line^ITEM_NAME=iTotalOnLine^';
COMMENT ON COLUMN &VIEW..stage_notes IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Stage Notes^ITEM_NAME=iStageNotes^';
COMMENT ON COLUMN &VIEW..vat_code IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^ITEM_NAME=iVatCode^';
COMMENT ON COLUMN &VIEW..vat_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Percentage^ITEM_NAME=iVatPercentage^';
COMMENT ON COLUMN &VIEW..vat_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iVatSum^';
COMMENT ON COLUMN &VIEW..eur_vat_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax in EUR^ITEM_NAME=iEurVatSum^';
COMMENT ON COLUMN &VIEW..ref_id IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Reference ID^ITEM_NAME=iRefId^';
COMMENT ON COLUMN &VIEW..warranty_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Warranty Document Text^ITEM_NAME=iWarrantyDocText^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code:^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description:^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..condition_print IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..line_order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Order Number^ITEM_NAME=iLineOrderNo^';
COMMENT ON COLUMN &VIEW..order_line_no IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Order Line Number^ITEM_NAME=iOrderLineNo^';
COMMENT ON COLUMN &VIEW..order_rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Order Rel Number^ITEM_NAME=iOrderRelNo^';
COMMENT ON COLUMN &VIEW..line_debit_invoice_ref IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE= Ref Invoice No^ITEM_NAME=iLineDebitInvRef^';
COMMENT ON COLUMN &VIEW..line_customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE= Purchase Order Number^ITEM_NAME=iLineCustomerPoNo^';    
COMMENT ON COLUMN &VIEW..real_ship_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Actual Ship Date^ITEM_NAME=iRealShipDate^';
COMMENT ON COLUMN &VIEW..base_curr IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Base Currency^ITEM_NAME=iBaseCurr^';
COMMENT ON COLUMN &VIEW..taxable IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Taxable^ITEM_NAME=iTaxable^';
COMMENT ON COLUMN &VIEW..delivery IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Delivery Note(s):^ITEM_NAME=iDelivery^';
COMMENT ON COLUMN &VIEW..note_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrdLineNoteText:^ITEM_NAME=iOrdLineNoteText^';
COMMENT ON COLUMN &VIEW..lot_batch_no IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Lot Batch No^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..payment_reference IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Payment Reference^ITEM_NAME=iPaymentReference^';
COMMENT ON COLUMN &VIEW..tax_code_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Tax Code Description^ITEM_NAME=iTaxCodeDesc^';
COMMENT ON COLUMN &VIEW..tax_rate IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Rate^ITEM_NAME=iTaxRate^';
COMMENT ON COLUMN &VIEW..tax_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxAmount^';
COMMENT ON COLUMN &VIEW..INSTALLMENT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Installment Id^ITEM_NAME=iInstallmentId^';
COMMENT ON COLUMN &VIEW..PAY_METHOD_DESC IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Payment Method^ITEM_NAME=iPayMethodDesc^';
COMMENT ON COLUMN &VIEW..INSTALLMENT_DUE_DATE IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Due Date^ITEM_NAME=iInstallmentDueDate^';
COMMENT ON COLUMN &VIEW..INSTALLMENT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Amount to Pay^ITEM_NAME=iInstallmentAmount^';
COMMENT ON COLUMN &VIEW..DISCOUNT_DATE IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Disc. Date^ITEM_NAME=iDiscountDate^';
COMMENT ON COLUMN &VIEW..DISCOUNT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iDiscountAmount^';
COMMENT ON COLUMN &VIEW..sub_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total^ITEM_NAME=iSubTotal^';
COMMENT ON COLUMN &VIEW..sub_total_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Gross^ITEM_NAME=iSubTotalGross^';
COMMENT ON COLUMN &VIEW..sub_tot_with_charges IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total^ITEM_NAME=iSubTotalWithCharges^';
COMMENT ON COLUMN &VIEW..total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total^ITEM_NAME=iTotal^';
COMMENT ON COLUMN &VIEW..comp_city_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyCityDesc^ITEM_NAME=iCompCityDesc^';
COMMENT ON COLUMN &VIEW..customer_city_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CustomerCityDesc^ITEM_NAME=iCustomerCityDesc^';
COMMENT ON COLUMN &VIEW..customer_zip_country IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CustomerZipCountry^ITEM_NAME=iCustomerZipCountry^';
COMMENT ON COLUMN &VIEW..comp_state_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyStateDesc^ITEM_NAME=iCompStateDesc^';

-- Note : added new items for printing characteristics
COMMENT ON COLUMN &VIEW..characteristic_id IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..characteristic_value IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..characteristic_uom IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..characteristic_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..characteristic_first IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..characteristic_last IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..characteristic_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..characteristic_pflag IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';

COMMENT ON COLUMN &VIEW..line_ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(1000)^TITLE=Delivery Address:^ITEM_NAME=iLineShipAddr1^';
COMMENT ON COLUMN &VIEW..line_ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Via:^ITEM_NAME=iLineShipViaDesc^';
COMMENT ON COLUMN &VIEW..line_del_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Terms:^ITEM_NAME=iLineDelTermsDesc^';
COMMENT ON COLUMN &VIEW..line_del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location:^ITEM_NAME=iLineDelTermsLocation^';
COMMENT ON COLUMN &VIEW..line_forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iLineForwardAgent^';
COMMENT ON COLUMN &VIEW..line_vat_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity:^ITEM_NAME=iLineVatNo^';
COMMENT ON COLUMN &VIEW..line_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Code^ITEM_NAME=iLineVatCode^';
COMMENT ON COLUMN &VIEW..line_disc_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc. Amount^ITEM_NAME=iLineDiscAmount^';
COMMENT ON COLUMN &VIEW..line_vat_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^ITEM_NAME=iLineVatPercent^';
COMMENT ON COLUMN &VIEW..total_unit_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^ITEM_NAME=iTotUnitPrice^';
COMMENT ON COLUMN &VIEW..tax_base_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Amount^ITEM_NAME=iTaxBaseAmt^';
COMMENT ON COLUMN &VIEW..tax_texts IS
   'FLAGS=A----^DATATYPE=STRING(500)^TITLE=Tax Texts^ITEM_NAME=iTaxTexts^';
COMMENT ON COLUMN &VIEW..total_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Discount^ITEM_NAME=iTotalDiscount^';
COMMENT ON COLUMN &VIEW..charge_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Code^ITEM_NAME=iChargeVatCode^';
COMMENT ON COLUMN &VIEW..charge_vat_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^ITEM_NAME=iChargeVatPercent^';
COMMENT ON COLUMN &VIEW..invoice_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Invoice Line^ITEM_NAME=iInvoiceLineNo^';

-- Advance Invoice -----
COMMENT ON COLUMN &VIEW..ad_invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Invoice No.^ITEM_NAME=iAdInvoiceNo^';
COMMENT ON COLUMN &VIEW..ad_payment_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Payment Date^ITEM_NAME=iAdPaymentDate^';
COMMENT ON COLUMN &VIEW..ad_paid_net_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Paid Amount Exclusive Tax^ITEM_NAME=iAdPaidNetAmount^';
COMMENT ON COLUMN &VIEW..ad_tax_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iAdTaxAmount^';
COMMENT ON COLUMN &VIEW..ad_paid_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Paid Amount^ITEM_NAME=iAdPaidGrossAmount^';
COMMENT ON COLUMN &VIEW..tot_paid_in_advance IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Paid in Advance^ITEM_NAME=iTotPaidInAdvance^';
COMMENT ON COLUMN &VIEW..ad_payment_matched_amount IS  
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Advance Payment Matched Amount^ITEM_NAME=iAdvPaymentMatchedAmount^';
COMMENT ON COLUMN &VIEW..tot_ad_pay_matched_amount IS  
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^ITEM_NAME=iTotAdPayMatchedAmount^';
COMMENT ON COLUMN &VIEW..ot_invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice No.^ITEM_NAME=iOtInvoiceNo^';
COMMENT ON COLUMN &VIEW..ot_due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iOtDueDate^';
COMMENT ON COLUMN &VIEW..ot_net_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount Exclusive Tax^ITEM_NAME=iOtNetAmount^';
COMMENT ON COLUMN &VIEW..ot_tax_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iOtTaxAmount^';
COMMENT ON COLUMN &VIEW..ot_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoice Amount^ITEM_NAME=iOtGrossAmount^';
COMMENT ON COLUMN &VIEW..rem_unconsumed_advance IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Remaining Unconsumed Advance^ITEM_NAME=iRemUnconsumedAdvance^';
COMMENT ON COLUMN &VIEW..rem_amount_to_paid IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Remaining Amount to be paid^ITEM_NAME=iRemAmountToPaid^';
COMMENT ON COLUMN &VIEW..contact IS
   'FLAGS=A----^DATATYPE=STRING(270)^TITLE=Customer Contact:^ITEM_NAME=iContact^';
COMMENT ON COLUMN &VIEW..charge_order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Order Number^ITEM_NAME=iChargeOrderNo^';

COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price incl. Tax^ITEM_NAME=iPriceInclTax^';
COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iPriceInclTaxTotal^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge incl. Tax^ITEM_NAME=iChargeInclTax^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Gross Amount^ITEM_NAME=iChargeInclTaxTotal^';
COMMENT ON COLUMN &VIEW..PRINT_PRICES_INCL_TAX IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Print prices incl. Tax^ITEM_NAME=iPrintPricesInclTax^';
COMMENT ON COLUMN &VIEW..USE_PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Use Price Incl Tax^ITEM_NAME=iUsePriceInclTax^';

COMMENT ON COLUMN &VIEW..tax_invoice_type IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Invoice Type^ITEM_NAME=iTaxInvoiceType^';
COMMENT ON COLUMN &VIEW..several_value IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iSeveralValue^';
COMMENT ON COLUMN &VIEW..print_adv_pay_on_cu_inv IS
   'FLAGS=A----^DATATYPE=STRING(15)^ITEM_NAME=iPrintAdvPayOnCuInv^';
COMMENT ON COLUMN &VIEW..PAYMENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Net Amount^ITEM_NAME=iPayment^';
COMMENT ON COLUMN &VIEW..DEBIT_TAX IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Tax Amount^ITEM_NAME=iDebitTax^';
COMMENT ON COLUMN &VIEW..LINE_PAYMENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Net Amount^ITEM_NAME=iLinePayment^';
COMMENT ON COLUMN &VIEW..LINE_DEBIT_TAX IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Tax Amount^ITEM_NAME=iLineDebitTax^';
COMMENT ON COLUMN &VIEW..SHIP_DATE_FIRST IS 
   'FLAGS=A----^DATATYPE=NUMBER^ITEM_NAME=iShipDateFirst^';

COMMENT ON COLUMN &VIEW..BASE_VAT_SUM IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iBaseVatSum^';
COMMENT ON COLUMN &VIEW..GROSS_AMOUNT_IN_CURR IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount In Curr^ITEM_NAME=iGrossAmountInCurr^';
COMMENT ON COLUMN &VIEW..VERBALLY_INVOICE_AMOUNT IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Verbally^ITEM_NAME=iVerballyInvoiceAmount^';
COMMENT ON COLUMN &VIEW..pre_tax_curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iPreTaxCurrCode^';
COMMENT ON COLUMN &VIEW..REF_INVOICE_DATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Ref Invoice Date^ITEM_NAME=iRefInvoiceDate^';
COMMENT ON COLUMN &VIEW..DATE_OF_DUPLICATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Date Of Duplicate^ITEM_NAME=iDateOfDuplicate^';
COMMENT ON COLUMN &VIEW..DUPLICATE_OPTION IS 
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Duplicate Option^ITEM_NAME=iDuplicateOption^';
COMMENT ON COLUMN &VIEW..REF_INVOICE_LINE_DATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Ref Invoice Date^ITEM_NAME=iRefInvoiceLineDate^';
COMMENT ON COLUMN &VIEW..CORRECTION_TEXT IS 
   'FLAGS=A----^DATATYPE=STRING(20)^ITEM_NAME=iCorrectionText^';
COMMENT ON COLUMN &VIEW..CORR_TITLE IS 
   'FLAGS=A----^DATATYPE=STRING(20)^ITEM_NAME=iCorrectionTitle^';
COMMENT ON COLUMN &VIEW..INVOICE_AMOUNT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount^ITEM_NAME=iInvoiceAmount^';
COMMENT ON COLUMN &VIEW..PAYMENT_METHOD IS 
   'FLAGS=A----^DATATYPE=STRING(60)^TITLE=Payment Method^ITEM_NAME=iPaymentMethod^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT IS 
   'FLAGS=A----^DATATYPE=STRING(150)^TITLE=Bank Account^ITEM_NAME=iBankAccount^';
COMMENT ON COLUMN &VIEW..PAYMENT_METHOD_LINE IS 
   'FLAGS=A----^DATATYPE=STRING(60)^TITLE=Payment Method Line^ITEM_NAME=iPaymentMethodLine^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT_LINE IS 
   'FLAGS=A----^DATATYPE=STRING(150)^TITLE=Bank Account^ITEM_NAME=iBankAccountLine^';
COMMENT ON COLUMN &VIEW..TAX_CURR_RATE IS 
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rate Used^ITEM_NAME=iTaxCurrRate^';
COMMENT ON COLUMN &VIEW..DEB_TAX_CURR_RATE IS 
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Debit Rate Used^ITEM_NAME=iDebTaxCurrRate^';
COMMENT ON COLUMN &VIEW..DISCOUNT_PERCENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc%^ITEM_NAME=iDiscountPercent^';
COMMENT ON COLUMN &VIEW..DISCOUNT_NET IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iDiscountNet^';
COMMENT ON COLUMN &VIEW..DISCOUNT_TAX_PERCENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax%^ITEM_NAME=iDiscountTaxPercent^';   
COMMENT ON COLUMN &VIEW..DISCOUNT_TAX IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxAmount^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT_TEXT IS 
   'FLAGS=A----^DATATYPE=STRING(1000)^TITLE=Bank Account Text^ITEM_NAME=iBankAccountText^';
COMMENT ON COLUMN &VIEW..PREPAYMENT_EXIST IS 
   'FLAGS=A----^DATATYPE=STRING(5)^ITEM_NAME=iPrepaymentExist^';               
COMMENT ON COLUMN &VIEW..PREPAYMENT_TEXT IS 
   'FLAGS=A----^DATATYPE=STRING(20)^ITEM_NAME=iPrepaymentText^';               
COMMENT ON COLUMN &VIEW..PRE_NET_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax^ITEM_NAME=iPreNetCurrAmount^';
COMMENT ON COLUMN &VIEW..PRE_VAT_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax^ITEM_NAME=iPreVatCurrAmount^';
COMMENT ON COLUMN &VIEW..PRE_GROSS_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount to Pay^ITEM_NAME=iPreGrossCurrAmount^';   
COMMENT ON COLUMN &VIEW..PREPAY_INV_NO IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice No^ITEM_NAME=iPrepayInvNo^';   
COMMENT ON COLUMN &VIEW..PREPAY_INV_SERIES_ID IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Payment Series Id^ITEM_NAME=iPrepayInvSeriesId^';
COMMENT ON COLUMN &VIEW..PREPAY_TAX_AMOUNT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxAmount^';
COMMENT ON COLUMN &VIEW..delivery_note_ref IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Supplier Delivery Note Reference(s): ^ITEM_NAME=iDeliveryNoteRef^';
COMMENT ON COLUMN &VIEW..part_catalog_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..RETURN_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Return Line Notes^ITEM_NAME=iReturnLineNotes^';
COMMENT ON COLUMN &VIEW..REPORT_FOOT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Report Foot^ITEM_NAME=iReport Foot^';
COMMENT ON COLUMN &VIEW..TAX_FEE_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxFeeAmount^';
COMMENT ON COLUMN &VIEW..BIC_CODE_HEAD IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=BIC/Swift Code^ITEM_NAME=iBicCodeHead^'; 
COMMENT ON COLUMN &VIEW..BIC_CODE_LINE IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=BIC/Swift Code^ITEM_NAME=iBicCodeLine^';
COMMENT ON COLUMN &VIEW..airway_bill_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Airway Bill No(s): ^ITEM_NAME=iAirwayBillNo^';
COMMENT ON COLUMN &VIEW..grp_sum_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Tax Sum^ITEM_NAME=iGrpSumInclTax^';
COMMENT ON COLUMN &VIEW..sub_total_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Tax Sum^ITEM_NAME=iSubTotalInclTax^';
COMMENT ON COLUMN &VIEW..TAX_FEE_BASE_AMOUNT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxAmount^';
COMMENT ON COLUMN &VIEW..net_sales_price_curr IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Sales Price^ITEM_NAME=iNetSalesPrice^';
COMMENT ON COLUMN &VIEW..BASE_NET_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Net Curr Amount^';
COMMENT ON COLUMN &VIEW..serial_no IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Serial No^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..vat_reduction_at_pay IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Vat Reduction At Pay^ITEM_NAME=iVatReductionAtPay^';
COMMENT ON COLUMN &VIEW..RENTAL_TRANSACTION_START_DATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Start Date^ITEM_NAME=iStartDate^';
COMMENT ON COLUMN &VIEW..RENTAL_TRANSACTION_END_DATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=End Date^ITEM_NAME=iEndDate^';
COMMENT ON COLUMN &VIEW..ON_RENTAL_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=On Rental Qty^TITLE=iOnRentalQty^';
COMMENT ON COLUMN &VIEW..INVOICED_DURATION_DAYS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Duration Days^TITLE=iInvoicedDurationDays^';
COMMENT ON COLUMN &VIEW..RENTAL_MODE IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Rental Mode^TITLE=iRentalMode^';
COMMENT ON COLUMN CUSTOMER_ORDER_IVC_REP.latest_ship_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Latest Ship Date^ITEM_NAME=iLatestShipDate^';
COMMENT ON COLUMN &VIEW..package_order_line_pos
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iPackageOrderLinePos^';
COMMENT ON COLUMN &VIEW..package_line_no
   IS 'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iPackageLineNo^';
COMMENT ON COLUMN CUSTOMER_ORDER_IVC_REP.header_invoice_text
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Invoice Text^';
COMMENT ON COLUMN CUSTOMER_ORDER_IVC_REP.invoice_text
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Invoice Text^';
COMMENT ON COLUMN &VIEW..cor_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^';
COMMENT ON COLUMN &VIEW..cor_description IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Description^';
COMMENT ON COLUMN &VIEW..cor_total_unit_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^';
COMMENT ON COLUMN &VIEW..cor_tax_base_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Amount^';
COMMENT ON COLUMN &VIEW..cor_tax_texts IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cor Tax Texts^';
COMMENT ON COLUMN &VIEW..cor_total_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Discount^';
COMMENT ON COLUMN &VIEW..cor_vat_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cor Vat Percentage^';
COMMENT ON COLUMN &VIEW..cor_gross_amount_in_curr IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount In Curr^';
COMMENT ON COLUMN &VIEW..cor_tax_fee_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..cor_base_vat_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..cor_base_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^';
COMMENT ON COLUMN &VIEW..cor_base_description IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Description^';
COMMENT ON COLUMN &VIEW..cor_base_vat_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cor Base Vat Percentage^';
COMMENT ON COLUMN CUSTOMER_ORDER_IVC_REP.tot_tax_amount IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amount^';
COMMENT ON COLUMN CUSTOMER_ORDER_IVC_REP.cor_tot_tax_amount IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amount^';
COMMENT ON COLUMN &VIEW..rental_order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iRentalOrderLinePos^';
COMMENT ON COLUMN &VIEW..rental_line_no IS
'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iRentalLineNo^';
COMMENT ON COLUMN &VIEW..free_of_charge_tax_basis IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Free Of Charge Tax Basis^ITEM_NAME=iFreeOfChargeTaxBasis^';
COMMENT ON COLUMN &VIEW..company_bearing_Tax_amt IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Company Bearing Tax Amount^ITEM_NAME=iCompanyBearingTaxAmount^';
COMMENT ON COLUMN &VIEW..tot_pre_inv_deb_corr IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Previously Invoiced Debit/Corr (Inc.) Invoices^';
COMMENT ON COLUMN &VIEW..tot_pre_inv_cre_corr IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Previously Invoiced Credit/Corr (Dec.) Invoices';
COMMENT ON COLUMN &VIEW..tot_advance_received IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Advance Payment Received^';
COMMENT ON COLUMN &VIEW..pre_consumed_advance IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Previous Consumed Advance^';
COMMENT ON COLUMN &VIEW..pre_unconsumed_advance IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Previous Unconsumed Advance^';
COMMENT ON COLUMN &VIEW..header_correction_reason IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Correction Reason^';
COMMENT ON COLUMN &VIEW..correction_reason IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Correction Reason^';
COMMENT ON COLUMN &VIEW..advance_consumed_current IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Advance Consumed in Current Invoice^';
COMMENT ON COLUMN &VIEW..comp_branch_id IS 
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company Branch ID^';
COMMENT ON COLUMN &VIEW..comp_branch_desc IS 
'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Company Branch Desc^';
COMMENT ON COLUMN &VIEW..customer_branch IS 
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Customer Branch^';
COMMENT ON COLUMN &VIEW..prefix_a IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Component A^';
COMMENT ON COLUMN &VIEW..prefix_b IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Component B^';
COMMENT ON COLUMN &VIEW..prefix_c IS
'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Component C^';
COMMENT ON COLUMN &VIEW..prefix_a_title IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Component A Title^';
COMMENT ON COLUMN &VIEW..prefix_b_title IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Component B Title^';
COMMENT ON COLUMN &VIEW..prefix_c_title IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Component C Title^';
COMMENT ON COLUMN &VIEW..serial_number IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Serial Number^';
-- DIS003 start
COMMENT ON COLUMN &VIEW..company_pay_addr1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Payment Address^ITEM_NAME=iPayAddr1^';
COMMENT ON COLUMN &VIEW..company_pay_addr2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr2^ITEM_NAME=iPayAddr2^';
COMMENT ON COLUMN &VIEW..company_pay_addr3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PaypAddr3^ITEM_NAME=iPayAddr3^';
COMMENT ON COLUMN &VIEW..company_pay_addr4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr4^ITEM_NAME=iPayAddr4^';
COMMENT ON COLUMN &VIEW..company_pay_addr5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr5^ITEM_NAME=iPayAddr5^';
COMMENT ON COLUMN &VIEW..company_pay_addr6 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr6^ITEM_NAME=iPayAddr6^';
COMMENT ON COLUMN &VIEW..company_pay_addr7 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr7^ITEM_NAME=iPayAddr7^';
COMMENT ON COLUMN &VIEW..line_vat_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=VAT Amount^ITEM_NAME=iLVatAmount^';
COMMENT ON COLUMN &VIEW..line_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iLGrossAmount^';
COMMENT ON COLUMN &VIEW..deliveries IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery^ITEM_NAME=iDeliveries^';
COMMENT ON COLUMN &VIEW..tax_character IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Character^ITEM_NAME=iTaxCharacter^';
COMMENT ON COLUMN &VIEW..show_sub_total_items IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Show Sub Total Items^ITEM_NAME=iShowSubTotalItems^';
-- DIS003 end
COMMENT ON COLUMN &VIEW..tax_id_no_text1 IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Id No Text1^';
COMMENT ON COLUMN &VIEW..tax_id_no_text2 IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Id No Text2^';
COMMENT ON COLUMN &VIEW..tax_id_no_text3 IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Id No Text3^';
COMMENT ON COLUMN &VIEW..tax_id_no_text4 IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Id No Text4^';
COMMENT ON COLUMN &VIEW..tax_id_no_text5 IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Id No Text5^';
COMMENT ON COLUMN &VIEW..tax_id_no_text6 IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Id No Text6^';
COMMENT ON COLUMN &VIEW..tax_id_no2 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Id No2^';
COMMENT ON COLUMN &VIEW..tax_id_no3 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Id No3^';
COMMENT ON COLUMN &VIEW..tax_id_no4 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Id No4^';
COMMENT ON COLUMN &VIEW..tax_id_no5 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Id No5^';
COMMENT ON COLUMN &VIEW..tax_id_no6 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Id No6^';
COMMENT ON COLUMN &VIEW..customs_stat_no IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Customs No^ITEM_NAME=iCustomsStatNo^';
COMMENT ON COLUMN &VIEW..cig_code IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CIG Code^ITEM_NAME=iCigCode^';
COMMENT ON COLUMN &VIEW..cup_code IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CUP Code^ITEM_NAME=iCupCode^';
COMMENT ON COLUMN &VIEW..tax_exempt_cert_no IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Exemption Certificate No^ITEM_NAME=iTaxExCertNo^';
--Bug 139303, changed the length of cert_jurisdiction
COMMENT ON COLUMN &VIEW..cert_jurisdiction IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Certificate Jurisdiction^ITEM_NAME=iCertJurisdiction^';
-- gelr:in_hsn_sac_codes, GLOW-2262, begin
COMMENT ON COLUMN &VIEW..cgst_tax_amnt IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=CGST Amount^ITEM_NAME=iCgstTaxAmnt^';
COMMENT ON COLUMN &VIEW..sgst_tax_amnt IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=SGST Amount^ITEM_NAME=iSgstTaxAmnt^';
COMMENT ON COLUMN &VIEW..igst_tax_amnt IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=IGST Amount^ITEM_NAME=iIgstTaxAmnt^';
COMMENT ON COLUMN &VIEW..ugst_tax_amnt IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=UGST Amount^ITEM_NAME=iUgstTaxAmnt^';
COMMENT ON COLUMN &VIEW..other_tax_amnt IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Other Type Tax Amount^ITEM_NAME=iOtherTaxAmnt^';
COMMENT ON COLUMN &VIEW..cgst_tax_pct IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=CGST Rate^ITEM_NAME=iCgstTaxPct^';
COMMENT ON COLUMN &VIEW..sgst_tax_pct IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=SGST Rate^ITEM_NAME=iSgstTaxPct^';
COMMENT ON COLUMN &VIEW..igst_tax_pct IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=IGST Rate^ITEM_NAME=iIgstTaxPct^';
COMMENT ON COLUMN &VIEW..ugst_tax_pct IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=UGST Rate^ITEM_NAME=iUgstTaxPct^';
COMMENT ON COLUMN &VIEW..other_tax_pct IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Other Type Tax Rate^ITEM_NAME=iOtherTaxPct^';
COMMENT ON COLUMN &VIEW..cgst_fee_type IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=CGST Fee Type^ITEM_NAME=iCgstFeeType^';
COMMENT ON COLUMN &VIEW..sgst_fee_type IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=SGST Fee Type^ITEM_NAME=iSgstFeeType^';
COMMENT ON COLUMN &VIEW..igst_fee_type IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=IGST Fee Type^ITEM_NAME=iIgstFeeType^';
COMMENT ON COLUMN &VIEW..ugst_fee_type IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=UGST Fee Type^ITEM_NAME=iUgstFeeType^';
COMMENT ON COLUMN &VIEW..other_fee_type IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Other Tax Category Fee Type^ITEM_NAME=iOtherFeeType^';
-- gelr:in_hsn_sac_codes, GLOW-2262, end
-- gelr:prepayment_tax_document, begin
COMMENT ON COLUMN &VIEW..matched_tax_doc_base
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Matched Tax Doc Base^';
COMMENT ON COLUMN &VIEW..matched_tax_doc_tax
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Matched Tax Doc Tax^';
COMMENT ON COLUMN &VIEW..tax_doc_base
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Doc Base^';
COMMENT ON COLUMN &VIEW..tax_doc_tax
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Doc Tax^';
COMMENT ON COLUMN &VIEW..matched_tax_doc_base_acc_curr
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Matched Tax Doc Base Acc Curr^';
COMMENT ON COLUMN &VIEW..matched_tax_doc_tax_acc_curr
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Matched Tax Doc Tax Acc Curr^';
COMMENT ON COLUMN &VIEW..tax_doc_base_acc_curr
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Doc Base Acc Curr^';
COMMENT ON COLUMN &VIEW..tax_doc_tax_acc_curr
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Doc Tax Acc Curr^';
-- gelr:prepayment_tax_document, end
-- gelr:service_statistics_no, begin
COMMENT ON COLUMN &VIEW..service_statistics_no IS 
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Service Stat. No^';
-- gelr:service_statistics_no, end
--  
-- gelr:hu_org_invoice_no_ref begin
COMMENT ON COLUMN &VIEW..org_series_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Original Sereis ID^';
COMMENT ON COLUMN &VIEW..org_invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Original Invoice Number^';
-- gelr:hu_org_invoice_no_ref begin
-- gelr:tax_fulfilment_date, begin 
COMMENT ON COLUMN &VIEW..tax_fulfilment_date IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Tax Fulfilment Date^';
-- gelr:tax_fulfilment_date, end 
-- gelr:prepayment_tax_document, begin
COMMENT ON COLUMN &VIEW..orig_tax_doc_series_ref IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Original Tax Doc Series Ref^';
COMMENT ON COLUMN &VIEW..orig_tax_doc_number_ref IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Original Tax Doc Number Ref^';
-- gelr:prepayment_tax_document, end
-- gelr:hu_vat_control_statement, begin 
COMMENT ON COLUMN &VIEW..comp_group_tax_id_number IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Company Group Tax ID Number^';
COMMENT ON COLUMN &VIEW..cust_group_tax_id_number IS 
'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Group Tax ID Number^';
COMMENT ON COLUMN &VIEW..comp_domestic_tax_id_number IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Company Domestic Tax ID Number^';
COMMENT ON COLUMN &VIEW..cust_domestic_tax_id_number IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Domestic Tax ID Number^';
-- gelr:hu_vat_control_statement, end 
-- gelr:digital_signature, begin
COMMENT ON COLUMN &VIEW..digital_signature IS 
   'FLAGS=A----^DATATYPE=STRING(7)^TITLE=Digital Signature^';
-- gelr:digital_signature, end
-- gelr:pt_erp_certification, begin
COMMENT ON COLUMN &VIEW..document_type
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Document Type^';
COMMENT ON COLUMN &VIEW..erp_certificate
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=-Processed by certificated program Num.^';
-- gelr:pt_erp_certification, end
-- gelr:additional_tax_numbers, bug 148523, begin  
COMMENT ON COLUMN &VIEW..cust_delivery_gstin IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Delivery Gstin^';
COMMENT ON COLUMN &VIEW..cust_document_gstin IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Document Gstin^';
COMMENT ON COLUMN &VIEW..company_document_addr IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Company Document Address^';
COMMENT ON COLUMN &VIEW..company_delivery_addr IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Company Delivery Address^';
COMMENT ON COLUMN &VIEW..use_buyer_doc_addr IS
   'FLAGS=A----^DATATYPE=STRING(05)^TITLE=Use Buyer Doc Address^';
COMMENT ON COLUMN &VIEW..cust_document_pan IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Document Pan^';
COMMENT ON COLUMN &VIEW..cust_delivery_pan IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Delivery Pan^';
COMMENT ON COLUMN &VIEW..company_gstin IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Company Gstin^';
COMMENT ON COLUMN &VIEW..company_pan IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Company Pan^';
-- gelr:additional_tax_numbers, bug 148523, end  
-- MBrant 4-21-20
COMMENT ON COLUMN &VIEW..commodity_grp2 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Commodity Grp2^';
COMMENT ON COLUMN &VIEW..commodity_grp2_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Commodity Grp2 Desc^';
COMMENT ON COLUMN &VIEW..net_weight_uom IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Net Weight Uom^';
COMMENT ON COLUMN &VIEW..net_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN &VIEW..country_of_origin_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Country of Origin Desc^';
COMMENT ON COLUMN &VIEW..total_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Weight^';
COMMENT ON COLUMN &VIEW..line_net_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line Net Weight^';
COMMENT ON COLUMN &VIEW..cust_dft_lang_cd IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Default Language Cd^';

-- Added MBrant 6/12/2020
COMMENT ON COLUMN &VIEW..cc_first_name IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc First Name^';
COMMENT ON COLUMN &VIEW..cc_last_name IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc Last Name^';
COMMENT ON COLUMN &VIEW..cc_address_line IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc Address Line^';
COMMENT ON COLUMN &VIEW..cc_city IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc City^';
COMMENT ON COLUMN &VIEW..cc_state IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc State^';
COMMENT ON COLUMN &VIEW..cc_zip_code IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc Zip Code^';
COMMENT ON COLUMN &VIEW..cc_country IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc Country^';
COMMENT ON COLUMN &VIEW..cc_email_address IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cc Email Address^';
-- MBrant 9/28/20
COMMENT ON COLUMN &VIEW..coordinator_phone IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Coordinator Phone^';
-- MBrant 12/08/20
COMMENT ON COLUMN &VIEW..delivery_note_id IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Delivery Note ID^';
COMMENT ON COLUMN &VIEW..shipment_id IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Shipment ID^';

-- MBrant 02/04/21
COMMENT ON COLUMN &VIEW..payment_method_ln IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Payment Method Ln^';
COMMENT ON COLUMN &VIEW..bank_account_ln IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Bank Account Ln^';
COMMENT ON COLUMN &VIEW..bank_account_txt IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Bank Account Txt^';
COMMENT ON COLUMN &VIEW..bic_code_ln IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Bic Code Ln^';

-- MBrant 02/06/21
COMMENT ON COLUMN &VIEW..create_jinsui_invoice IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Create Jinsui Invoice^';

-- MBrant 6/14/21
COMMENT ON COLUMN &VIEW..harmonize_code IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Harmonize Code^';

-- MBrant 2/15/22
COMMENT ON COLUMN &VIEW..supplier_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Name^';
COMMENT ON COLUMN &VIEW..supplier_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Addr 1^';
COMMENT ON COLUMN &VIEW..supplier_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Addr 2^';
COMMENT ON COLUMN &VIEW..supplier_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Addr 3^';
COMMENT ON COLUMN &VIEW..supplier_addr_4 IS   
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Addr 4^';
COMMENT ON COLUMN &VIEW..supplier_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Addr 5^';
COMMENT ON COLUMN &VIEW..supplier_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Addr 6^';
COMMENT ON COLUMN &VIEW..supplier_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Addr 7^';
COMMENT ON COLUMN &VIEW..supplier_code   IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Code^';
COMMENT ON COLUMN &VIEW..supplier_no     IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier No^';

-- MBrant  3/31/22
COMMENT ON COLUMN &VIEW..supplier_site   IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Site^';
COMMENT ON COLUMN &VIEW..demand_code_db     IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Demand Code Db^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Invoice','&REPTAB','&PKG..&METHOD',1000,NULL,NULL,NULL,'PLSQL1.2');
   Report_SYS.Define_Report_Text_('&VIEW', 'DEBIT_INVOICE_TITLE', 'Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'CREDIT_INVOICE_TITLE', 'Credit Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_INVOICE_TITLE','Tax Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'CREDIT_TOTAL_TITLE', 'Your Total Credit Sum');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'CHARGES_TITLE', 'Charges');
   Report_SYS.Define_Report_Text_('&VIEW', 'STAGED_BILLING_INFO', 'Staged Billing Information');
   Report_SYS.Define_Report_Text_('&VIEW', 'ORDER_NO_TITLE', 'Order Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'RMA_NO_TITLE', 'RMA Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TAX', 'Tax in ');
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TOT_TAX', 'Total Tax in ');
   -- DIS003 start
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TOT_EX_TAX', 'Total Exclusive Tax in ');
   -- DIS003 end
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TOT', 'Invoice Amount to Pay in ');
   Report_SYS.Define_Report_Text_('&VIEW', 'SUM_TAX', 'Sum per Tax Code');
   Report_SYS.Define_Report_Text_('&VIEW', 'TXYES', 'Yes');
   Report_SYS.Define_Report_Text_('&VIEW', 'TXNO', 'No');
   Report_SYS.Define_Report_Text_('&VIEW', 'INSTALLMENT_PLAN','Installment Plan and Cash Discounts');
   Report_SYS.Define_Report_Text_('&VIEW', 'ADVANCE_PAYMENTS','Advance Payments');
   Report_SYS.Define_Report_Text_('&VIEW', 'OTHER_ORDER_INVOICES','Other Order Invoices');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTIVCADDMSG', 'Additional Discount is included in the Total Order Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'COPY', 'COPY');
   Report_SYS.Define_Report_Text_('&VIEW', 'PRELIM', 'Preliminary');
   Report_SYS.Define_Report_Text_('&VIEW', 'SEE_IVC_NOTES', '-- See invoice lines --');
   Report_SYS.Define_Report_Text_('&VIEW', 'STAGED_AMOUNT', ' % of total amount');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_TOTALS', 'Tax Totals');
   -- Bug 133109, begin
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_TOTALS_IN', 'Tax Totals in');
   Report_SYS.Define_Report_Text_('&VIEW', 'AMOUNT', 'Amount');
   -- Bug 133109, end
   Report_SYS.Define_Report_Text_('&VIEW', 'CREDIT_INVOICE_LABEL', 'Invoice Amount');
   Report_SYS.Define_Report_Text_('&VIEW', 'EUR_CREDIT_INVOICE_LABEL', 'Invoice Amount in EUR');
   Report_SYS.Define_Report_Text_('&VIEW', 'BEFORECORRECTION', 'Invoice before correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'AFTERCORRECTION', 'Invoice after correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'DECREASECORRECTION', 'Decrease Correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'INCREASECORRECTION', 'Increase Correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'TOTAL', 'Total');
   Report_SYS.Define_Report_Text_('&VIEW', 'GROSSAMOUNT', 'Gross Amount');
   Report_SYS.Define_Report_Text_('&VIEW', 'CORRECTION_INVOICE_TITLE', 'Correction Invoice');
-- Argentinean texts begin
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOMER_TITLE', 'Customer Name:');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOMER_ADDR', 'Customer Address:');
   Report_SYS.Define_Report_Text_('&VIEW', 'INVOICE_NUMBER', 'Invoice Number:');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAY_TERM', 'Payment Term:');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_ID_NO', 'Tax Identity No:');
-- Argentinean texts end
   Report_SYS.Define_Report_Text_('&VIEW', 'DUPLICATE', 'DUPLICATE');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_IN_BASE_CURR_TAG', 'Tax Amount in');
   Report_SYS.Define_Report_Text_('&VIEW', 'PREPAYMENTLINES', 'Prepayment Invoice Lines');
   Report_SYS.Define_Report_Text_('&VIEW', 'PURCHSIGN', 'Purch Sign' );   
   Report_SYS.Define_Report_Text_('&VIEW', 'SELLSIGN', 'Sell Sign' );  
   Report_SYS.Define_Report_Text_('&VIEW', 'CUST_ORDER_LINE', 'Sales');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUST_ORDER_RENTAL_LINE', 'Rental');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUST_ORD_FREE_OF_CHARGE_LINE', 'Free Of Charge');
   Report_SYS.Define_Report_Text_('&VIEW', 'TOT_PRE_INV_DEBIT_LABEL', 'Total Previously Invoiced Debit/Correction (Increase) Invoices');
   Report_SYS.Define_Report_Text_('&VIEW', 'TOT_PRE_INV_CREDIT_LABEL', 'Total Previously Invoiced Credit/Correction (Decrease) Invoices');      
   -- Bug 131335 Frwopl, Added colon to Payment Address, Begin
   -- DIS003 start
   Report_SYS.Define_Report_Text_('&VIEW', 'PAYMENT_ADDRESS', 'Payment Address:' );
   Report_SYS.Define_Report_Text_('&VIEW', 'TAXFREETEXT', 'TF' );   
   Report_SYS.Define_Report_Text_('&VIEW', 'NOTAXTEXT', 'NT' );   
   -- DIS003 end
   -- Bug 131335 Frwopl, End
   -- gelr:pt_erp_certification, begin
   Report_SYS.Define_Report_Text_('&VIEW', 'PT_FOOTER_PRINT', 'Document issued for Formation purposes' );
   -- gelr:pt_erp_certification, end
   -- gelr:in_hsn_sac_codes, bug 148523, begin
   Report_SYS.Define_Report_Text_('&VIEW', 'TXT_POS_ADDRESS', 'Place of Supply');
   Report_SYS.Define_Report_Text_('&VIEW', 'TXT_PAN_NO', 'PAN:');
   Report_SYS.Define_Report_Text_('&VIEW', 'TXT_GSTIN_NO', 'GSTIN:');
   -- gelr:in_hsn_sac_codes, bug 148523, end
   Report_SYS.Refresh_('&VIEW');

   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   -- Bug 135829, start
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Invoice','CUSTOMER_ORDER_IVC_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','InvoiceItem','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/INVOICE_LINES/INVOICE_LINE');
   -- Bug 135829, end
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/INVOICE_LINES/INVOICE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustOrderLineAddress','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/INVOICE_LINES/INVOICE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','SalesChargeType','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/INVOICE_LINES/INVOICE_LINE/PACKAGE_LINES/PACKAGE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderLineStagedBilling','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/INVOICE_LINES/INVOICE_LINE/STAGED_BILLING_ITEMS/STAGED_BILLING_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrder','CUSTOMER_ORDER_IVC_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ReturnMaterial','CUSTOMER_ORDER_IVC_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderCharge','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderInvHead','CUSTOMER_ORDER_IVC_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderInvItem','CUSTOMER_ORDER_IVC_REP/INVOICE_LINE_TYPES/INVOICE_LINE_TYPE/INVOICE_LINES/INVOICE_LINE');
   
END;
/


COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_IVC_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);


-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

FUNCTION Calculate_To_Base___ (
   company_            IN VARCHAR2,   
   currency_code_      IN VARCHAR2,
   amount_             IN NUMBER,
   currency_rate_      IN NUMBER,
   date_               IN DATE,
   currency_rate_type_ IN VARCHAR2 ) RETURN NUMBER
IS
   base_curr_amount_ NUMBER;
   conv_factor_      NUMBER;
BEGIN
   conv_factor_      := Currency_Rate_API.Get_Conv_Factor(company_, currency_code_, currency_rate_type_, date_);
   base_curr_amount_ := amount_ * (currency_rate_ / conv_factor_);
   RETURN base_curr_amount_;
END Calculate_To_Base___;

FUNCTION Calc_To_Euro___ (
   company_            IN VARCHAR2,
   order_curr_code_    IN VARCHAR2,
   order_amount_       IN NUMBER,
   date_               IN DATE,
   currency_rate_type_ IN VARCHAR2,
   euro_company_       IN VARCHAR2,
   rate_               IN NUMBER,   
   base_curr_code_     IN VARCHAR2 ) RETURN NUMBER
IS
   eur_amount_     NUMBER;
   amount_in_base_ NUMBER;
BEGIN
   IF (order_curr_code_ != base_curr_code_) THEN
      amount_in_base_ := Calculate_To_Base___(company_,                                              
                                              order_curr_code_, 
                                              order_amount_,
                                              rate_,
                                              date_,
                                              currency_rate_type_);
   ELSE
      amount_in_base_ := order_amount_;
   END IF;
   IF (euro_company_ = 'TRUE') THEN
      eur_amount_ := amount_in_base_;
   ELSE
      eur_amount_ := Currency_Amount_API.Calculate_To_Euro(company_,
                                                           'EUR',
                                                           date_,
                                                           amount_in_base_);
   END IF;
   RETURN NVL(eur_amount_, 0);
END Calc_To_Euro___;

PROCEDURE Get_Config_Id_And_Desc___ (
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN     VARCHAR2,
   catalog_no_        IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2 )
IS
   part_no_    VARCHAR2(25);
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_       := configuration_id_;
      part_no_         := Sales_Part_API.Get_Part_No(contract_, catalog_no_);     
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN   
          config_spec_desc_ := Configuration_Spec_API.Get_Description(NVL(part_no_, catalog_no_), configuration_id_);        
      $ELSE   
          config_spec_desc_ := NULL;
      $END    
   ELSE
      config_id_ := NULL;
      config_spec_desc_ := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

PROCEDURE Check_And_Append_String___ (
   string_     IN OUT VARCHAR2,
   value_      IN VARCHAR2,
   max_length_ IN NUMBER )
IS
BEGIN
   -- If value_ is not in string_, append it to string_ with a comma and trim to the max_length_
   IF (value_ IS NOT NULL AND NOT INSTR(', ' || string_, ', ' || value_ || ',') > 0) THEN
      string_ := SUBSTR(string_ || value_ || ', ' , 1, max_length_);
   END IF;

END Check_And_Append_String___;

-- DIS003 begin
-- Only for backward compatibility
FUNCTION Get_Delivery_Note2 (
   company_    VARCHAR2,
   invoice_id_ NUMBER ) RETURN VARCHAR2
IS
 deliver_        VARCHAR2(500) := NULL;  -- Bug 135523, length set to 500
 CURSOR Get_Delivery_Notes IS
   SELECT DISTINCT delnote_no
   FROM  customer_order_delivery_tab cod,  cust_delivery_inv_ref_tab cdi
   WHERE cod.deliv_no   = cdi.deliv_no
   AND   cdi.company    = company_
   AND   cdi.invoice_id = invoice_id_;

BEGIN
   FOR get_deliver IN Get_Delivery_Notes LOOP
      IF get_deliver.delnote_no IS NOT NULL THEN
         deliver_   := substr(deliver_ || get_deliver.delnote_no || ', ' , 1, 500);  -- Bug 135523, length set to 500
      END IF;
   END LOOP;
   deliver_ := RTRIM(RTRIM(deliver_), ',');
   RETURN deliver_;
END Get_Delivery_Note2;
-- DIS003 end

-----------------------------------------------------------------------------
-- Get_Delivery_Info_Lists
--    This method outs comma seperated lists of airway bill no, supplier delivery note
--    and supplier delivery note reference.
-----------------------------------------------------------------------------
PROCEDURE Get_Delivery_Info_Lists (
   airway_bill_no_    OUT VARCHAR2,
   delivery_note_     OUT VARCHAR2,
   delivery_note_ref_ OUT VARCHAR2,
   company_            IN VARCHAR2,
   invoice_id_         IN NUMBER,
   item_id_            IN NUMBER ) 
IS
   alt_delnote_no_ VARCHAR2(50);
   -- gelr:pt_erp_certification, begin
   transport_doc_number_  VARCHAR2(60);
   -- gelr:pt_erp_certification, end
   CURSOR get_deliv_info IS
      SELECT airway_bill_no, delnote_no, delivery_note_ref
        FROM customer_order_delivery_tab cod,  cust_delivery_inv_ref_tab cdi
       WHERE cod.deliv_no   = cdi.deliv_no
         AND cdi.company    = company_
         AND cdi.invoice_id = invoice_id_
         AND cdi.item_id    = item_id_
         AND (airway_bill_no IS NOT NULL OR delnote_no IS NOT NULL OR delivery_note_ref IS NOT NULL)
         AND cod.cancelled_delivery = 'FALSE';
   
BEGIN
   airway_bill_no_    := NULL; 
   delivery_note_     := NULL;
   delivery_note_ref_ := NULL;

   FOR deliv_info IN get_deliv_info LOOP
      -- Add to the list only if it hasn't already added in previous  iterations
      Check_And_Append_String___(airway_bill_no_, deliv_info.airway_bill_no, 2000);
      Check_And_Append_String___(delivery_note_ref_, deliv_info.delivery_note_ref, 200);
      IF deliv_info.delnote_no IS NOT NULL THEN
         -- gelr:pt_erp_certification, begin
         IF (Company_API.Get_Localization_Country_Db(company_) = 'PT' AND company_localization_API.Get_Parameter_Value_Db(company_, 'PT_ERP_CERTIFICATION') = Localization_Param_Yes_No_API.DB_YES) THEN
            transport_doc_number_ := Delivery_Note_API.Get_Transport_Doc_Number(deliv_info.delnote_no);
            alt_delnote_no_       := REPLACE(SUBSTR(transport_doc_number_,INSTR(transport_doc_number_,' ',1)),'/','-');
         ELSE
            alt_delnote_no_ := Delivery_Note_API.Get_Alt_Delnote_No(deliv_info.delnote_no);
         END IF;
         -- gelr:pt_erp_certification, end
         Check_And_Append_String___(delivery_note_, alt_delnote_no_, 100);
      END IF;
   END LOOP;
   airway_bill_no_    := RTRIM(RTRIM(airway_bill_no_), ',');
   delivery_note_     := RTRIM(RTRIM(delivery_note_), ',');
   delivery_note_ref_ := RTRIM(RTRIM(delivery_note_ref_), ',');
END Get_Delivery_Info_Lists;

-----------------------------------------------------------------------------
-- Get_Comp_Delivery_Info_Lists
--    This method outs comma seperated lists of airway bill no, supplier delivery note
--    and supplier delivery note reference for component parts.
-----------------------------------------------------------------------------
PROCEDURE Get_Comp_Delivery_Info_Lists (
   airway_bill_no_    OUT VARCHAR2,
   delivery_note_     OUT VARCHAR2,
   delivery_note_ref_ OUT VARCHAR2,
   order_no_           IN VARCHAR2,
   line_no_            IN VARCHAR2,
   rel_no_             IN VARCHAR2,
   line_item_no_       IN NUMBER ) 
IS
   alt_delnote_no_ VARCHAR2(50);

   CURSOR get_deliv_info IS
      SELECT airway_bill_no, delnote_no, delivery_note_ref
        FROM customer_order_delivery_tab 
       WHERE order_no = order_no_         
         AND line_no  = line_no_
         AND rel_no   = rel_no_
         AND line_item_no = line_item_no_
         AND (airway_bill_no IS NOT NULL OR delnote_no IS NOT NULL OR delivery_note_ref IS NOT NULL)
         AND cancelled_delivery = 'FALSE';  
   
BEGIN
   airway_bill_no_    := NULL; 
   delivery_note_     := NULL;
   delivery_note_ref_ := NULL; 

   FOR deliv_info IN get_deliv_info LOOP
      -- Add to the list only if it hasn't already added in previous  iterations
      Check_And_Append_String___(airway_bill_no_, deliv_info.airway_bill_no, 2000);
      Check_And_Append_String___(delivery_note_ref_, deliv_info.delivery_note_ref, 200);
      IF deliv_info.delnote_no IS NOT NULL THEN
         alt_delnote_no_ := Delivery_Note_API.Get_Alt_Delnote_No(deliv_info.delnote_no);
         Check_And_Append_String___(delivery_note_, alt_delnote_no_, 100);
      END IF;
   END LOOP;

   airway_bill_no_    := RTRIM(RTRIM(airway_bill_no_), ',');
   delivery_note_     := RTRIM(RTRIM(delivery_note_), ',');
   delivery_note_ref_ := RTRIM(RTRIM(delivery_note_ref_), ',');
END Get_Comp_Delivery_Info_Lists;

FUNCTION Check_Company_Country_Code (
   company_          IN VARCHAR2,
   delivery_country_ IN VARCHAR2 ) RETURN VARCHAR2
IS
 country_code_  VARCHAR2(50);

BEGIN
  country_code_ := Company_API.Get_Country(company_);
  country_code_ := Iso_Country_API.Encode(country_code_);

  IF (delivery_country_ = country_code_ ) THEN
     RETURN 'TRUE';
  ELSE
     RETURN 'FALSE';
  END IF;
END Check_Company_Country_Code;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

-- DIS003 begin
FUNCTION Get_Tax_Character_Display___(
   company_   IN VARCHAR2,
   fee_code_  IN VARCHAR2) RETURN VARCHAR2
IS
   tax_character_ VARCHAR2(20); 
BEGIN
   -- seems to be pointless, but it's easier to correct values here than at the layout  
   tax_character_ := Statutory_Fee_API.Get_Tax_Character_Db(company_, fee_code_);
   IF tax_character_ = 'TAXFREE' THEN
      tax_character_ := 'TF';
   ELSIF tax_character_ = 'NOTAX' THEN
      tax_character_ := 'NT';
   ELSIF tax_character_ = 'EXPORT' THEN
      tax_character_ := 'E';
   ELSE
      tax_character_ := 'N';
   END IF;
   RETURN tax_character_;
END Get_Tax_Character_Display___;
-- DIS003 end

-- Bug 140588, Removed parameter first_correction_ivc_.
PROCEDURE Print_Invoice_Line___(
   lines_exist_               OUT    VARCHAR2,
   currency_rounding_         OUT    NUMBER,
   xml_                       IN OUT CLOB,
   print_config_id_           IN OUT NUMBER,
   ref_invoice_id_            IN OUT NUMBER,
   net_curr_amount_           IN OUT NUMBER,
   vat_curr_amount_           IN OUT NUMBER,
   sub_total_                 IN OUT NUMBER,
   sub_total_gross_           IN OUT NUMBER,
   row_no_                    IN OUT NUMBER,
   parent_row_no_             IN OUT NUMBER,
   sub_total_incl_tax_        IN OUT NUMBER,
   address_rec_               IN OUT Address_Presentation_API.Address_Rec_Type,
   addr_rec_                  IN     Customer_Order_Address_API.Cust_Ord_Addr_Rec,
   invoice_id_                IN     NUMBER,
   tax_invoice_param_         IN     NUMBER,
   item_sign_                 IN     NUMBER,
   result_key_                IN     NUMBER,   
   order_no_                  IN     VARCHAR2,
   header_print_control_code_ IN     VARCHAR2,
   several_value_             IN     VARCHAR2,
   print_tax_db_              IN     VARCHAR2,
   use_price_incl_tax_db_     IN     VARCHAR2,
   debit_inv_ref_             IN     VARCHAR2,
   invoice_type_              IN     VARCHAR2,
   cor_inv_type_              IN     VARCHAR2,
   company_                   IN     VARCHAR2,
   contract_                  IN     VARCHAR2,
   language_code_             IN     VARCHAR2,
   document_code_             IN     VARCHAR2,
   customer_po_no_            IN     VARCHAR2,
   ref_tax_inv_no_            IN     VARCHAR2,
   prel_update_allowed_       IN     VARCHAR2,
   tax_id_no_                 IN     VARCHAR2,
   do_xml_                    IN     BOOLEAN,
   do_rs_                     IN     BOOLEAN,
   rental_db_                 IN     VARCHAR2,

   free_of_charge_db_         IN     VARCHAR2,
   -- DIS003 start
   prepayment_text_           IN     VARCHAR2
   -- DIS003 end   
     )
IS
   customer_part_no_              VARCHAR2(45);
   gtin_no_                       VARCHAR2(14);
   ord_ship_via_desc_             VARCHAR2(35);
   line_del_term_desc_            VARCHAR2(35);
   ship_addr_line_                VARCHAR2(2000);
   line_tax_id_no_                VARCHAR2(50);
   line_debit_inv_ref_            VARCHAR2(70);   
   debit_invoice_no_              VARCHAR2(50);
   debit_invoice_series_          VARCHAR2(20);
   forward_agent_line_            VARCHAR2(100);
   cust_line_ref_name_            VARCHAR2(100) := NULL;
   config_id_                     VARCHAR2(50);
   config_spec_desc_              VARCHAR2(2000);
   taxable_                       VARCHAR2(1);
   tax_liability_type_db_         VARCHAR2(20);
   partca_part_notes_             VARCHAR2(2000);
   inv_part_notes_                VARCHAR2(2000);
   sales_part_notes_              VARCHAR2(2000);
   part_taxable_                  VARCHAR2(20);
   condition_code_                VARCHAR2(10);
   condition_code_description_    VARCHAR2(35);
   note_text_                     VARCHAR2(2000);
   lot_batch_nos_                 VARCHAR2(2000);
   serial_nos_                    VARCHAR2(2000);
   incl_tax_amount_in_price_      VARCHAR2(5);
   numeration_group_              VARCHAR2(100);
   ship_addr_1_                   VARCHAR2(100);
   ship_country_code_             VARCHAR2(2);
   ship_country_                  VARCHAR2(50);
   line_ship_addr_2_              VARCHAR2(1025);
   line_ship_addr_3_              VARCHAR2(1025);
   line_ship_addr_4_              VARCHAR2(1025);
   line_ship_addr_5_              VARCHAR2(1025);
   line_ship_addr_6_              VARCHAR2(1025);
   line_ship_addr_7_              VARCHAR2(1025);
   line_ship_addr_8_              VARCHAR2(1025);
   line_ship_addr_9_              VARCHAR2(1025);
   line_ship_addr_10_             VARCHAR2(1025);
   line_ship_addr_11_             VARCHAR2(1025);
   fee_type_                      VARCHAR2(10);
   delivery_                      VARCHAR2(100);
   delivery_note_ref_             VARCHAR2(200);
   airway_bill_no_                VARCHAR2(2000);
   sales_unit_meas_               VARCHAR2(10);
   print_char_code_               VARCHAR2(3);
   part_no_                       VARCHAR2(25);
   print_control_code_            VARCHAR2(10);
   xml_element_                   VARCHAR2(100);
   customer_comp_part_no_         VARCHAR2(45);
   company_country_db_            VARCHAR2(2);
   customer_comp_part_desc_       &VIEW..customer_part_desc%TYPE;   
   catalog_no_                    &VIEW..catalog_no%TYPE;
   ref_invoice_line_date_         DATE;
   real_ship_date_                DATE;
   temp_rowno_                    NUMBER := 0;
   temp_prowno_                   NUMBER := 0;
   parent_row_no2_                NUMBER := 0;
   ship_date_first_               NUMBER:= 1;
   parent_row_no3_                NUMBER;
   total_on_line_                 NUMBER;   
   pkg_qty_invoiced_              NUMBER;   
   price_incl_tax_                NUMBER;
   price_total_incl_tax_          NUMBER;   
   net_sales_price_curr_          NUMBER;
   total_tax_pct_                 NUMBER;
   price_total_                   NUMBER;
   price_per_price_unit_          NUMBER;
   total_tax_percentage_          NUMBER;
   partca_part_note_id_           NUMBER;
   inv_part_note_id_              NUMBER;
   sales_part_note_id_            NUMBER;
   same_as_header_                NUMBER;
   same_as_header_ship_via_       NUMBER;
   same_as_header_terms_          NUMBER;
   same_as_header_terms_loc_      NUMBER;
   same_as_header_agents_         NUMBER;
   same_as_header_tax_id_no_      NUMBER;
   same_as_header_contact_        NUMBER;
   customer_order_return_note_id_ NUMBER;
   debit_inv_id_                  NUMBER;
   line_debit_payment_            NUMBER;
   line_debit_tax_                NUMBER;
   qty_invoiced_                  NUMBER;
   total_order_discount_          NUMBER;
   sales_price_                   NUMBER;
   line_disc_amount_              NUMBER;
   line_additional_disc_amount_   NUMBER;
   line_group_disc_amount_        NUMBER;
   line_no_                       customer_order_inv_item.item_id%TYPE;
   order_line_pos_                customer_order_inv_item.pos%TYPE;

   -- rental
   invoiced_duration_days_        NUMBER;
   transaction_date_              DATE;
   transaction_end_date_          DATE;
   on_rental_qty_                 NUMBER;
   rental_mode_desc_              VARCHAR2(100);   
   rental_line_no_                customer_order_inv_item.item_id%TYPE;
   rental_order_line_pos_         customer_order_inv_item.pos%TYPE;
   
   commodity_grp2_                VARCHAR2(2000); 
   commodity_grp2_desc_           VARCHAR2(2000); 
   net_weight_uom_                VARCHAR2(200);
   net_weight_                    NUMBER;
   country_of_origin_desc_        VARCHAR2(200);
   line_net_weight_               NUMBER := 0;
        
   -- MBrant 9/28/20
   cust_dft_lang_cd_              VARCHAR2(200);
   
   -- MBrant 12/08/20
   delivery_note_id_              VARCHAR2(200); 
   shipment_id_                   VARCHAR2(200); 
   
   -- MBrant 6/14/21              
   harmonize_code_                VARCHAR2(2000); 
   
	-- MBrant 2/15/22  Supplier Shipped From Address                  
   supplier_code_                 VARCHAR2(2000); 
   supplier_no_                   VARCHAR2(2000); 
   
   -- Add Mod MBrant 3/11/22
   characteristic_code_             VARCHAR2(2000); 
   -- End Mod MBrant 3/11/22
   
     -- MBrant 3/31/22               
   supply_site_                   VARCHAR2(2000); 
   supplier_number_               VARCHAR2(2000); 
   demand_code_db_                VARCHAR2(2000);   
   supply_code_db_                VARCHAR2(2000);    
    
   
   $IF Component_Rental_SYS.INSTALLED $THEN
      rental_transaction_rec_ Rental_Transaction_API.Public_Rec;
      rental_object_rec_      Rental_Object_API.Public_Rec;
   $END
   --
   char_rec_                      Characteristic_Printout_API.Public_Rec;
   debit_inv_rec_                 Customer_Order_Inv_Head_API.Public_Rec;
   sales_part_desc_               SALES_PART_TAB.catalog_desc%TYPE; 
   co_line_catalog_desc_          SALES_PART_TAB.catalog_desc%TYPE;
   note_text_tab_                 Document_Text_API.Note_Text_Table;
   
   country_of_origin_             VARCHAR2(3);
   customs_stat_no_               VARCHAR2(2000);
   part_rec_                      Sales_Part_API.Public_Rec;
   tax_table_                     Source_Tax_Item_API.source_tax_table;
   line_total_tax_pct_            NUMBER;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Bug 141485, added free_of_charge_tax_basis
   CURSOR get_order_row(prel_update_allowed_ VARCHAR2) IS
      SELECT order_no                            order_no,
             line_no                             line_no,
             release_no                          rel_no,
             line_item_no                        line_item_no,
             pos                                 pos,
             catalog_no                          catalog_no,
             description                         catalog_desc,
             invoiced_qty                        qty_invoiced,
             sale_um                             sales_unit_meas,
             sale_unit_price                     price_per_price_unit,
             unit_price_incl_tax                 unit_price_incl_tax,
             net_curr_amount                     price_total,
             net_curr_amount + vat_curr_amount   price_total_incl_tax,
             order_discount                      order_discount,
             discount                            discount,
             price_conv * invoiced_qty           price_qty,
             price_um                            price_unit_meas,
             net_curr_amount                     net_curr_amount,
             vat_curr_amount                     vat_curr_amount,
             stage                               stage,
             rma_no                              rma_no,
             rma_line_no                         rma_line_no,
             contract                            contract,
             item_id                             item_id,
             vat_code                            line_vat_code,
             customer_po_no                      customer_po_no,
             number_reference                    number_reference,
             series_reference                    series_reference,
             prepay_invoice_no                   prepay_invoice_no,
             prepay_invoice_series_id            prepay_invoice_series_id,
             -- gelr:disc_price_rounded:DIS005, begin
             CASE 
               WHEN (Customer_Order_API.Get_Disc_Price_Round(order_no) = Fnd_Boolean_API.DB_TRUE) THEN
                  CASE
                    WHEN Self_Billing_Header_API.Get_Sb_Ref_By_Inv_Id(company, invoice_id) IS NOT NULL THEN 0
                    WHEN (charge_seq_no IS NOT NULL) AND (order_no IS NOT NULL) THEN 0
                    ELSE additional_discount
                  END 
               ELSE additional_discount
             END                                 additional_discount,
             -- gelr:disc_price_rounded:DIS005, end
             rental_transaction_id               rental_transaction_id,
             invoice_text                        invoice_text,
             base_comp_bearing_tax_amt           base_comp_bearing_tax_amt,
             correction_reason                   correction_reason,
             free_of_charge_tax_basis            free_of_charge_tax_basis,
             objkey                              objkey,
             -- gelr:in_hsn_sac_codes begin, GLOW-2226
             hsn_sac_code                        hsn_sac_code  
             -- gelr:in_hsn_sac_codes end, GLOW-2226
      FROM   customer_order_inv_item
      WHERE  charge_seq_no IS NULL      -- Note : no charge items
      AND    rma_charge_no IS NULL      -- Note : no rma charge items
      AND    invoice_id = invoice_id_
      AND    company = company_
      AND    prel_update_allowed = prel_update_allowed_
      AND    ((rental_db_ = 'TRUE' AND rental_transaction_id IS NOT NULL) OR (rental_db_ = 'FALSE' AND rental_transaction_id IS NULL))
      -- gelr:prepayment_tax_document, begin
      AND    tax_doc_id IS NULL
      -- gelr:prepayment_tax_document, end
      ORDER BY item_id;
   
   CURSOR get_order_row_customer_order(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ VARCHAR2) IS
      SELECT col.note_id                   note_id,
             col.customer_part_no          customer_part_no,
             col.customer_part_unit_meas   customer_part_unit_meas,
             col.customer_part_conv_factor customer_part_conv_factor,
             col.cust_part_invert_conv_fact cust_part_invert_conv_fact,
             col.default_addr_flag         temp_default_addr_flag,
             col.addr_flag                 temp_addr_flag,
             col.ship_addr_no              temp_ship_addr_no,
             col.forward_agent_id          temp_forward_agent_id,
             col.ship_via_code             temp_ship_via_code,
             col.delivery_terms            temp_delivery_terms,
             col.del_terms_location        temp_del_terms_location,
             cola.addr_1                   temp_addr_1,
             cola.addr_2                   temp_addr_2,
             cola.addr_3                   temp_addr_3,
             cola.addr_4                   temp_addr_4,
             cola.addr_5                   temp_addr_5,
             cola.addr_6                   temp_addr_6,
             cola.address1,
             cola.address2,
             cola.address3,
             cola.address4,
             cola.address5,
             cola.address6,
             cola.zip_code,
             cola.city,
             cola.state,
             cola.county,
             cola.country_code             temp_country_code,
             DECODE(col.sale_unit_price, col.part_price + col.char_price, 'NOT MANUAL', 'MANUAL')
                                           manual_flag,
             col.configuration_id          configuration_id,
             col.configured_line_price_id  configured_line_price_id,
             col.ref_id                    ref_id,
             col.cust_warranty_id          cust_warranty_id,
             col.condition_code            condition_code,
             col.deliver_to_customer_no,
             col.contact,
             col.classification_part_no,
             col.classification_unit_meas,
             col.free_of_charge,
             col.free_of_charge_tax_basis,
             col.rowkey                   col_key,
             cola.objkey                  cola_key,
		      -- Add Mod MBrant 2/15/22
             Customer_Order_Line_API.Get_Supply_Code_Db(col.Order_no, col.Line_no, col.Rel_no, col.Line_Item_no) supply_code_db,
             col.vendor_no                supplier_no, 
             -- End Mod	
             -- Add Mod MBrant 3/31/22 - 4/26/22
             col.supply_site              supply_site, 
             Customer_Order_Line_API.Get_Demand_Code_DB(col.Order_no, col.Line_no, col.Rel_no, col.Line_Item_no) demand_code_db, 
             Customer_Order_Line_API.Get_Demand_Order_Ref1(col.Order_no, col.Line_no, col.Rel_no, col.Line_Item_no) demand_order_ref1
             -- End Mod 3/31/22 - 4/26/22
      FROM   customer_order_line_tab col, cust_order_line_address_2 cola
      WHERE  col.line_item_no = line_item_no_
      AND    col.rel_no = rel_no_
      AND    col.line_no = line_no_
      AND    col.order_no = order_no_
      AND    cola.line_item_no = col.line_item_no
      AND    cola.rel_no = col.rel_no
      AND    cola.line_no = col.line_no
      AND    cola.order_no = col.order_no
      ORDER BY to_number(col.line_no), to_number(col.rel_no), col.line_item_no;
      
   -- Bug 135829, Added objkey.   
   CURSOR get_header IS
      SELECT company                           company,
             contract                          contract,
             invoice_type                      invoice_type,
             delivery_identity                 customer_no,
             delivery_address_id               delivery_address_id,
             currency                          curr_code,
             your_reference                    cust_ref,
             invoice_address_id                bill_addr_no,
             forward_agent_id                  forward_agent_id,
             ship_via                          ship_via_desc,
             delivery_terms                    delivery_terms_desc,
             del_terms_location                del_terms_location,
             rma_no                            rma_no,
             Party_Type_API.Decode(party_type) party_type,
             objkey                            objkey
      FROM   customer_order_inv_head
      WHERE  invoice_id = invoice_id_;  
   
   
   
   -- Add MBrant 12/08/20  Include Join to Shipment_Line_OVW
   -- Chg MBrant 3/11/22 
   CURSOR get_shipment_id(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ VARCHAR2) IS
      SELECT coi.company                           company,
             coi.contract                          contract,
             coi.invoice_type                      invoice_type,
             sl.shipment_id                                                        sl_shipment_id,                                              
             Delivery_Note_API.Get_Delnote_No_For_Shipment(sl.shipment_id)         sl_delivery_note_id   
      FROM   customer_order_inv_head coi, Shipment_Line_OVW sl
      WHERE  sl.source_ref1 = CREATORS_REFERENCE                  
                          and sl.source_ref2 = line_no_                                 
                          and sl.source_ref3 = rel_no_                                       
                          and sl.source_ref4 = line_item_no_               
                          and invoice_id = invoice_id_;
     
   
      -- Note : For Argentinian Layout
   CURSOR get_lot_batch_nos(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, item_id_ IN NUMBER ) IS
      SELECT DISTINCT lot_batch_no
      FROM customer_order_reservation_tab
      WHERE order_no = order_no_
      AND line_no = line_no_
      AND rel_no = rel_no_
      AND line_item_no = line_item_no_
      AND deliv_no IN (SELECT deliv_no
                       FROM   cust_delivery_inv_ref_tab
                       WHERE  invoice_id = invoice_id_
                       AND    item_id = item_id_
                       AND    company = company_);
   
   CURSOR get_serial_nos(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, item_id_ IN NUMBER ) IS
      SELECT DISTINCT serial_no
      FROM customer_order_reservation_tab
      WHERE order_no = order_no_
      AND line_no = line_no_
      AND rel_no = rel_no_
      AND line_item_no = line_item_no_
      AND deliv_no IN (SELECT deliv_no
                       FROM   cust_delivery_inv_ref_tab
                       WHERE  invoice_id = invoice_id_
                       AND    item_id = item_id_
                       AND    company = company_);
      
   CURSOR get_warranty_note(warranty_id_ IN NUMBER, language_code_ IN VARCHAR2) IS
      SELECT note_id
      FROM warranty_lang_desc
      WHERE warranty_id = warranty_id_
      AND language_code = language_code_;
   
   CURSOR get_deliveries(item_id_ IN NUMBER) IS
      SELECT deliv_no
      FROM   cust_delivery_inv_ref_tab
      WHERE  invoice_id = invoice_id_
      AND    item_id = item_id_;
   
   -- Note : Package component cursor
   CURSOR get_package_part(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_item_no                      line_item_no,
             catalog_no                        catalog_no,
             catalog_desc                      catalog_desc,
             nvl(customer_part_buy_qty, revised_qty_due) revised_qty_due,
             nvl(customer_part_unit_meas, sales_unit_meas) sales_unit_meas,
             price_conv_factor * qty_invoiced  price_qty,
             price_conv_factor                 price_conv_factor,
             price_unit_meas                   price_unit_meas,
             note_id                           note_id,
             catalog_no                        sales_part_no,
             DECODE(sale_unit_price, part_price + char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             configuration_id                  configuration_id,
             configured_line_price_id          configured_line_price_id,
             cust_warranty_id                  cust_warranty_id,
             condition_code                    condition_code,
             qty_per_assembly                  qty_per_assembly,
             rowkey                            rowkey
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no > 0
      ORDER BY line_item_no;
   
   CURSOR get_delivery_info(deliv_no_ IN NUMBER) IS 
      SELECT date_delivered, qty_invoiced
      FROM   customer_order_delivery_tab
      WHERE  deliv_no = deliv_no_
      AND    cancelled_delivery = 'FALSE';
   
   -- Note : Staged Billing
   CURSOR get_stages(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, stage_ NUMBER) IS
      SELECT stage,
             description,
             total_percentage,
             note_id,
             rowkey
      FROM order_line_staged_billing_tab
      WHERE order_no     = order_no_
      AND   line_no      = line_no_
      AND   rel_no       = rel_no_
      AND   line_item_no = line_item_no_
      AND   stage        = stage_;
   
   -- gelr:in_hsn_sac_codes, GLOW-2262, begin
   CURSOR get_gst_tax_code (item_id_ IN NUMBER) IS
      SELECT source_ref2, t.tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage , tax_type_db, SUM(tax_base_curr_amount) base_curr_amount
             , SUM(tax_dom_amount) tax_code_dom_tot, SUM(tax_base_dom_amount) base_dom_amount, tax_type_category
      FROM source_tax_item_pub t, Statutory_Fee_tab s
      WHERE t.company = company_
      AND   source_ref_type_db = Tax_Source_API.DB_INVOICE
      AND   source_ref1 = TO_CHAR(invoice_id_)
      AND   source_ref2 = TO_CHAR(item_id_)
      AND   t.company = s.company
      AND   t.tax_code = s.fee_code
      GROUP BY source_ref2, t.tax_code, tax_percentage, tax_type_db, tax_type_category
      ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');
   -- gelr:in_hsn_sac_codes, GLOW-2262, end
   
   delivery_rec_   get_delivery_info%ROWTYPE;
   ord_row_rec_    get_order_row_customer_order%ROWTYPE;
   header_rec_     get_header%ROWTYPE; 
   -- Add Mod MBrant 3/11/22
   shipment_id_rec_     get_shipment_id%ROWTYPE;    
   -- End Mod MBrant 3/11/22   
   -- DIS003 start 
   loc_line_no_                       NUMBER;
   -- gelr:tax_char_on_invoice, Bug 147520, code removed
   loc_tax_character_                 VARCHAR2(20);
   tax_char_on_invoice_enabled_       VARCHAR2(20);
   -- DIS003 end
   -- gelr:in_hsn_sac_codes, GLOW-2262, begin
   cgst_tax_amount_                   NUMBER;
   sgst_tax_amount_                   NUMBER; 
   igst_tax_amount_                   NUMBER;
   ugst_tax_amount_                   NUMBER; 
   other_tax_amount_                  NUMBER;       
   cgst_tax_pct_                      NUMBER;
   sgst_tax_pct_                      NUMBER;
   igst_tax_pct_                      NUMBER;
   ugst_tax_pct_                      NUMBER;
   other_tax_pct_                     NUMBER;
   cgst_fee_type_                     VARCHAR2(10);
   sgst_fee_type_                     VARCHAR2(10);
   igst_fee_type_                     VARCHAR2(10);
   ugst_fee_type_                     VARCHAR2(10);
   other_fee_type_                    VARCHAR2(10);
   -- gelr:in_hsn_sac_codes, GLOW-2262, end
   -- gelr:service_statistics_no, begin
   service_statistics_no_             VARCHAR2(15);
   -- gelr:service_statistics_no, end
   -- gelr:pt_diff_tax_code_credit_invoic, begin
   pt_credit_invoice_                 NUMBER := &FALSE;
   -- gelr:pt_diff_tax_code_credit_invoic, end   

   
   
BEGIN
   OPEN  get_header;
   FETCH get_header INTO header_rec_;
   CLOSE get_header;
   
   numeration_group_         := Identity_Invoice_Info_API.Get_Numeration_Group(header_rec_.company, header_rec_.customer_no, header_rec_.party_type);
   incl_tax_amount_in_price_ := Invoice_Numeration_Group_API.Get_Incl_Tax_Amount_Inv_Print(company_, header_rec_.party_type, numeration_group_);
   company_country_db_       := Company_API.Get_Country_Db(company_);
   currency_rounding_        := Currency_Code_API.Get_Currency_Rounding(company_, header_rec_.curr_code);
   -- DIS003 start
   tax_char_on_invoice_enabled_ := Company_Localization_API.Get_Parameter_Value_Db(company_, 'TAX_CHAR_ON_INVOICE');
   -- DIS003 end
   -- gelr:pt_diff_tax_code_credit_invoic, begin
   IF Company_Localization_API.Get_Parameter_Value_Db(company_, 'PT_DIFF_TAX_CODE_CREDIT_INVOIC') = Localization_Param_Yes_No_API.DB_YES THEN 
      pt_credit_invoice_ := &TRUE;
   END IF;
   -- gelr:pt_diff_tax_code_credit_invoic, end
   lines_exist_ :='FALSE';  
   
   IF (do_xml_)THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_RENTAL_LINES');
      ELSIF (free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_FREE_OF_CHARGE_LINES');
      ELSE
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINES');
      END IF;
   END IF;
   
   -- DIS003 start
   IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
      -- added independent counter for invoice lines...reset start
      loc_line_no_ := 0;
   END IF;
   -- DIS003 end
   FOR next_row_ IN get_order_row(prel_update_allowed_) LOOP
            
      -- DIS003 start
      IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
         loc_line_no_ := loc_line_no_+1;
      END IF;
      -- DIS003 end
      
      -- rental
      IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         lines_exist_ :='TRUE';
         $IF Component_Rental_SYS.INSTALLED $THEN
            rental_transaction_rec_ := Rental_Transaction_API.Get(next_row_.rental_transaction_id);
            rental_object_rec_      := Rental_Object_API.Get_Rental_Rec(next_row_.order_no,
                                                                        next_row_.line_no, 
                                                                        next_row_.rel_no, 
                                                                        next_row_.line_item_no,
                                                                        Rental_Type_API.DB_CUSTOMER_ORDER);
            transaction_date_       := rental_transaction_rec_.transaction_date;
            transaction_end_date_   := rental_transaction_rec_.transaction_end_date;
            on_rental_qty_          := rental_transaction_rec_.on_rental_qty;
            invoiced_duration_days_ := Rental_Object_Manager_API.Calculate_Chargeable_Days(transaction_date_,
                                                                                           transaction_end_date_,
                                                                                           rental_object_rec_.chargeable_id,
                                                                                           rental_object_rec_.exception_id,
                                                                                           rental_object_rec_.period_rounding);
            rental_mode_desc_       := Rental_Mode_API.Get_Description(rental_transaction_rec_.rental_mode_id);
         $ELSE
            NULL;
         $END
      END IF;
      
      -- Moved  MBrant 12/08/20  -- Chg    MBrant 3/11/22
      OPEN get_shipment_id(next_row_.order_no, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      FETCH get_shipment_id INTO shipment_id_rec_;
      CLOSE get_shipment_id;
     -- End Mod 12/08/20 3/11/22
     
      customer_part_no_ := Customer_Order_Line_API.Get_Customer_Part_No(next_row_.order_no,
                                                                        next_row_.line_no, 
                                                                        next_row_.rel_no, 
                                                                        next_row_.line_item_no);
      
      -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
      sales_part_desc_      := NULL;
      co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( contract_, next_row_.catalog_no, language_code_);
      
      IF ( customer_part_no_ IS NOT NULL ) OR ( next_row_.catalog_desc != co_line_catalog_desc_) THEN
         sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(contract_, next_row_.catalog_no, language_code_), co_line_catalog_desc_);
      END IF;
      
      gtin_no_     := Part_Gtin_API.Get_Default_Gtin_No(next_row_.catalog_no);
      
      ord_row_rec_ := NULL;
      
      OPEN get_order_row_customer_order(next_row_.order_no, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      FETCH get_order_row_customer_order INTO ord_row_rec_;
      CLOSE get_order_row_customer_order;
      
      IF (free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         CONTINUE WHEN (ord_row_rec_.free_of_charge IS NULL) OR (ord_row_rec_.free_of_charge = Fnd_Boolean_API.DB_FALSE);
         lines_exist_ :='TRUE';
      ELSIF (free_of_charge_db_ = Fnd_Boolean_API.DB_FALSE) AND (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         CONTINUE WHEN ord_row_rec_.free_of_charge = Fnd_Boolean_API.DB_TRUE;
         lines_exist_ :='TRUE';
      END IF;
      
      ord_ship_via_desc_        := Mpccom_Ship_Via_API.Get_Description(ord_row_rec_.temp_ship_via_code, language_code_);
      line_del_term_desc_       := Order_Delivery_Term_API.Get_Description(ord_row_rec_.temp_delivery_terms, language_code_);
      same_as_header_           :=  &TRUE;
      same_as_header_ship_via_  :=  &TRUE;
      same_as_header_terms_     :=  &TRUE;
      same_as_header_terms_loc_ :=  &TRUE;
      same_as_header_agents_    :=  &TRUE;
      same_as_header_tax_id_no_ :=  &TRUE;
      ship_addr_line_           :=  NULL;
      
      -- check to add line ship addr name
      IF (((ord_row_rec_.temp_default_addr_flag = 'Y')) OR
            ((ord_row_rec_.temp_addr_flag = 'N') AND (addr_rec_.addr_flag = 'N') AND (ord_row_rec_.temp_ship_addr_no = header_rec_.delivery_address_id)) OR
            ((ord_row_rec_.temp_addr_flag = 'Y') AND (ord_row_rec_.temp_addr_flag != addr_rec_.addr_flag) AND
            ((NVL(ord_row_rec_.temp_addr_1, ' ')       = NVL(addr_rec_.addr_1, ' '))        AND
            (NVL(ord_row_rec_.address1, ' ')          = NVL(addr_rec_.address1, ' '))      AND 
            (NVL(ord_row_rec_.address2, ' ')          = NVL(addr_rec_.address2, ' '))      AND 
            (NVL(ord_row_rec_.address3, ' ')          = NVL(addr_rec_.address3, ' '))      AND 
            (NVL(ord_row_rec_.address4, ' ')          = NVL(addr_rec_.address4, ' '))      AND 
            (NVL(ord_row_rec_.address5, ' ')          = NVL(addr_rec_.address5, ' '))      AND 
            (NVL(ord_row_rec_.address6, ' ')          = NVL(addr_rec_.address6, ' '))      AND 
            (NVL(ord_row_rec_.zip_code, ' ')          = NVL(addr_rec_.zip_code, ' '))      AND 
            (NVL(ord_row_rec_.city, ' ')              = NVL(addr_rec_.city, ' '))          AND 
            (NVL(ord_row_rec_.state, ' ')             = NVL(addr_rec_.state, ' '))         AND 
            (NVL(ord_row_rec_.county, ' ')            = NVL(addr_rec_.county, ' '))        AND  
            (NVL(ord_row_rec_.temp_country_code, ' ') = NVL(addr_rec_.country_code, ' ')))) OR
            (next_row_.order_no IS NULL) OR
            ((next_row_.order_no IS NOT NULL) AND (header_rec_.rma_no IS NOT NULL) AND
            (ord_row_rec_.temp_addr_flag = 'N') AND
            (ord_row_rec_.temp_ship_addr_no = header_rec_.delivery_address_id)) OR
            ((ord_row_rec_.temp_addr_flag = 'Y') AND (ord_row_rec_.temp_addr_flag = addr_rec_.addr_flag) AND (ord_row_rec_.temp_default_addr_flag = 'N') AND
            ((NVL(ord_row_rec_.temp_addr_1, ' ')       = NVL(addr_rec_.addr_1, ' '))        AND
            (NVL(ord_row_rec_.address1, ' ')          = NVL(addr_rec_.address1, ' '))      AND 
            (NVL(ord_row_rec_.address2, ' ')          = NVL(addr_rec_.address2, ' '))      AND
            (NVL(ord_row_rec_.address3, ' ')          = NVL(addr_rec_.address3, ' '))      AND 
            (NVL(ord_row_rec_.address4, ' ')          = NVL(addr_rec_.address4, ' '))      AND 
            (NVL(ord_row_rec_.address5, ' ')          = NVL(addr_rec_.address5, ' '))      AND 
            (NVL(ord_row_rec_.address6, ' ')          = NVL(addr_rec_.address6, ' '))      AND             
            (NVL(ord_row_rec_.zip_code, ' ')          = NVL(addr_rec_.zip_code, ' '))      AND 
            (NVL(ord_row_rec_.city, ' ')              = NVL(addr_rec_.city, ' '))          AND 
            (NVL(ord_row_rec_.state, ' ')             = NVL(addr_rec_.state, ' '))         AND 
            (NVL(ord_row_rec_.county, ' ')            = NVL(addr_rec_.county, ' '))        AND  
            (NVL(ord_row_rec_.temp_country_code, ' ') = NVL(addr_rec_.country_code, ' '))))) THEN
         IF (ord_row_rec_.deliver_to_customer_no = header_rec_.customer_no) THEN
            same_as_header_ := &TRUE;
         ELSE
            same_as_header_ := &FALSE;
         END IF;
      ELSE
         same_as_header_ := &FALSE;
      END IF;
      
	  -- Add Mod MBrant 2/15/22        
     --  supplier_code_  := ord_row_rec_.supplier_code; 
      supplier_no_    := ord_row_rec_.supplier_no; 
      -- End Mod 2/15/22 	 
      
      same_as_header_contact_ := &TRUE;
      IF ord_row_rec_.temp_default_addr_flag = 'N' THEN
         cust_line_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, ord_row_rec_.temp_ship_addr_no, ord_row_rec_.contact), ord_row_rec_.contact), 1, 100);
         IF (ord_row_rec_.contact = header_rec_.cust_ref) THEN
            IF SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, ord_row_rec_.contact), ord_row_rec_.contact), 1, 100) = cust_line_ref_name_ THEN
               cust_line_ref_name_ := NULL;
            ELSE
               same_as_header_contact_ := &FALSE;
            END IF;
         ELSE 
            same_as_header_contact_ := &FALSE;
         END IF;
      END IF;
      
      -- check to add line ship via descriptions
      IF (ord_ship_via_desc_ = header_rec_.ship_via_desc) THEN
         same_as_header_ship_via_ := &TRUE;
      ELSE
         same_as_header_ship_via_ := &FALSE;
      END IF;
      
      -- check to add line del terms location
      IF (ord_row_rec_.temp_del_terms_location = header_rec_.del_terms_location) THEN
         same_as_header_terms_loc_ := &TRUE;
      ELSE
         same_as_header_terms_loc_ := &FALSE;
      END IF;
      
      -- check to add line delivery terms descriptions
      IF (line_del_term_desc_ = header_rec_.delivery_terms_desc) THEN
         same_as_header_terms_ := &TRUE;
      ELSE
         same_as_header_terms_ := &FALSE;
      END IF;
      
      -- check to add line forward agent id
      IF (ord_row_rec_.temp_forward_agent_id = header_rec_.forward_agent_id) THEN
         same_as_header_agents_ := &TRUE;
      ELSE
         same_as_header_agents_ := &FALSE;
         forward_agent_line_    := Forwarder_Info_API.Get_Name(ord_row_rec_.temp_forward_agent_id);
      END IF;
      
      IF (next_row_.order_no IS NOT NULL) THEN
         line_tax_id_no_ := Customer_Order_Line_API.Get_Tax_Id_No(next_row_.order_no, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      ELSE
         -- RMAs lines wihout order connected..
         line_tax_id_no_ := tax_id_no_;
      END IF;
      
      -- check to add line vat no descriptions
      IF (line_tax_id_no_ = tax_id_no_) THEN
         same_as_header_tax_id_no_ := &TRUE;
      ELSE
         same_as_header_tax_id_no_ := &FALSE;
      END IF;
      
      line_debit_inv_ref_   := NULL;
      debit_invoice_no_     := NULL;
      debit_invoice_series_ := NULL;
      -- Note : Retrieve note_id for the RMA line
      IF (next_row_.rma_no IS NOT NULL) AND (next_row_.rma_line_no IS NOT NULL) THEN
         customer_order_return_note_id_ := Return_Material_Line_API.Get_Note_Id(next_row_.rma_no,  next_row_.rma_line_no);
         
         IF (debit_inv_ref_ IS NULL) THEN
            debit_invoice_no_     := next_row_.number_reference;
            debit_invoice_series_ := next_row_.series_reference;
            
            debit_inv_id_       := Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No(header_rec_.company, debit_invoice_no_, debit_invoice_series_ );
            debit_inv_rec_      := Customer_Order_Inv_Head_API.Get(header_rec_.company, debit_inv_id_);
            line_debit_payment_ := debit_inv_rec_.net_curr_amount;
            line_debit_tax_     := debit_inv_rec_.vat_curr_amount;
            IF (debit_invoice_no_ IS NOT NULL) THEN
               line_debit_inv_ref_ := next_row_.series_reference || debit_invoice_no_;
               IF tax_invoice_param_ = 1 THEN                             
                  IF ref_tax_inv_no_ IS NOT NULL THEN
                     line_debit_inv_ref_ := debit_inv_rec_.series_id||ref_tax_inv_no_;
                  END IF;
               END IF;
            END IF;
         END IF;
      ELSE
         customer_order_return_note_id_ := NULL;
      END IF;
      
      Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                   partca_part_notes_,
                                   inv_part_note_id_,
                                   inv_part_notes_,
                                   sales_part_note_id_,
                                   sales_part_notes_,     
                                   contract_,
                                   next_row_.catalog_no,
                                   document_code_,
                                   language_code_);
      
      net_curr_amount_ := net_curr_amount_ + next_row_.net_curr_amount;
      vat_curr_amount_ := vat_curr_amount_ + next_row_.vat_curr_amount;
      
      -- Note : Insert values for order line
      -- Note : Always set line_item_no to 0 in order to avoid extra lines on invoice when invoiceing
      -- Note : package components separetely after closing a package not fully delivered.
      -- Note : (line_item_no is used in layout file to identify package components)
      
      -- Note : If item is ordered in customer parts it's inviced quantity should be calculated
      -- Note : from the actually shipped and invoiced quantity, not just the ordered quantity in
      -- Note : customer units.
      IF ord_row_rec_.customer_part_no IS NULL THEN
         qty_invoiced_ := next_row_.qty_invoiced;
      ELSE
         qty_invoiced_ := next_row_.qty_invoiced / NVL(ord_row_rec_.customer_part_conv_factor, 1) * NVL(ord_row_rec_.cust_part_invert_conv_fact, 1);
      END IF;
      
      -- Note : print extra configuration id information if the part is configurable
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                next_row_.catalog_no, ord_row_rec_.configuration_id);
      
      taxable_ := '1';
      IF (next_row_.rma_no IS NOT NULL) THEN
         tax_liability_type_db_ := Return_Material_Line_API.Get_Tax_Liability_Type_Db(next_row_.rma_no, next_row_.rma_line_no);
      ELSE
         tax_liability_type_db_ := Customer_Order_Charge_API.Get_Conn_Tax_Liability_Type_Db(next_row_.order_no, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, NULL, NULL);
      END IF;
      IF (tax_liability_type_db_ != 'EXM') THEN
         part_taxable_ := Sales_Part_API.Get_Taxable_Db(contract_, next_row_.catalog_no);
         IF (part_taxable_ = Fnd_Boolean_API.DB_TRUE) THEN
            taxable_ := '0';
         END IF;
      END IF;
      
      condition_code_ := Customer_Order_Inv_Item_API.Get_Condition_Code(header_rec_.company, invoice_id_, next_row_.item_id);
      IF (condition_code_ IS NOT NULL) THEN
         condition_code_description_ := Condition_Code_API.Get_Description(condition_code_);
      ELSE
         condition_code_description_ := NULL;
      END IF;
      
      total_order_discount_ := next_row_.order_discount + next_row_.additional_discount;
      sales_price_          := ABS(next_row_.price_qty * next_row_.price_per_price_unit);
      IF (use_price_incl_tax_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         line_disc_amount_ := ROUND((sales_price_ * next_row_.discount/100),currency_rounding_);
      ELSE
         line_disc_amount_ := Cust_Invoice_Item_Discount_API.Get_Total_Line_Discount(company_, invoice_id_, next_row_.item_id, next_row_.price_qty, 1, currency_rounding_ );
      END IF;
      
      line_additional_disc_amount_ := ROUND((sales_price_-line_disc_amount_) * next_row_.additional_discount/100,currency_rounding_);
      line_group_disc_amount_      := ROUND((sales_price_-line_disc_amount_) * next_row_.order_discount/100,currency_rounding_);
      line_disc_amount_            := line_disc_amount_ + line_additional_disc_amount_ + line_group_disc_amount_;
      
      -- Note : For Argentinian Layout
      note_text_ := Customer_Order_Line_API.Get_Note_Text(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      
      lot_batch_nos_ := NULL;
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         FOR lot_batch_no_ IN get_lot_batch_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.item_id) LOOP
            lot_batch_nos_ := SUBSTR(lot_batch_nos_ ||';'|| lot_batch_no_.lot_batch_no, 1, 2000);
         END LOOP;
         lot_batch_nos_ := LTRIM(lot_batch_nos_,';');
      ELSE
         $IF Component_Rental_SYS.INSTALLED $THEN
            lot_batch_nos_ := Rental_Transaction_API.Get_Lot_Batch_No(next_row_.rental_transaction_id);
         $ELSE
            NULL;
         $END
      END IF;
      
      serial_nos_ := NULL;
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN      
         FOR serial_no_ IN get_serial_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.item_id) LOOP
            serial_nos_ := SUBSTR(serial_nos_ ||';'|| serial_no_.serial_no, 1, 2000);
         END LOOP;
         serial_nos_ := LTRIM(serial_nos_,';');
      ELSE
         $IF Component_Rental_SYS.INSTALLED $THEN 
            serial_nos_ := Rental_Transaction_API.Get_Serial_No(next_row_.rental_transaction_id);
         $ELSE
            NULL;
         $END         
      END IF;
      
      -- Note: Displsying tax codes, rates and tax amounts in sales unit price for Argentinian Layout
      IF (incl_tax_amount_in_price_ = 'TRUE') AND (company_country_db_ = 'AR') THEN
         total_tax_percentage_ := 0;
         tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_), TO_CHAR(next_row_.item_id), '*', '*', '*');
         FOR i IN 1 .. tax_table_.COUNT LOOP
            IF Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_table_(i).tax_code) = 'INCLUDE' THEN
               total_tax_percentage_ :=  total_tax_percentage_ + tax_table_(i).tax_percentage;
            END IF;
         END LOOP;
         
         price_per_price_unit_ := next_row_.price_per_price_unit * (1 + total_tax_percentage_/100);
         price_total_     := next_row_.price_total * (1 + total_tax_percentage_/100);         
      ELSE
         price_per_price_unit_ := next_row_.price_per_price_unit;
         price_incl_tax_       := next_row_.unit_price_incl_tax;
         price_total_          := next_row_.price_total;
         price_total_incl_tax_ := next_row_.price_total_incl_tax;         
      END IF;
      sub_total_       := sub_total_ + price_total_;
      sub_total_gross_ := sub_total_gross_ + price_total_incl_tax_;
            
      temp_rowno_  := row_no_;
      temp_prowno_ := parent_row_no_;
      
      IF (same_as_header_ = 0) THEN
         ship_addr_1_       := ord_row_rec_.temp_addr_1;
         ship_country_code_ := ord_row_rec_.temp_country_code;
         IF (ship_country_code_ IS NOT NULL) THEN
            ship_country_ := SUBSTR(Iso_Country_API.Get_Description(ship_country_code_, Iso_Language_API.Get_Description(language_code_)), 1, 50);
         ELSE
            ship_country_ := NULL;
         END IF;
         -- Convert the ship address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(ord_row_rec_.temp_country_code,
                                                                                 ord_row_rec_.address1,
                                                                                 ord_row_rec_.address2,
                                                                                 ord_row_rec_.zip_code,
                                                                                 ord_row_rec_.city,
                                                                                 ord_row_rec_.state,
                                                                                 ord_row_rec_.county,
                                                                                 ship_country_,
                                                                                 ord_row_rec_.address3,
                                                                                 ord_row_rec_.address4,
                                                                                 ord_row_rec_.address5,
                                                                                 ord_row_rec_.address6);
         line_ship_addr_2_ := address_rec_.address1;
         line_ship_addr_3_ := address_rec_.address2;
         line_ship_addr_4_ := address_rec_.address3;
         line_ship_addr_5_ := address_rec_.address4;
         line_ship_addr_6_ := address_rec_.address5;
         line_ship_addr_7_ := address_rec_.address6;
         line_ship_addr_8_ := address_rec_.address7;
         line_ship_addr_9_ := address_rec_.address8;
         line_ship_addr_10_ := address_rec_.address9;
         line_ship_addr_11_ := address_rec_.address10;
         
         -- Make the ship address line
         -- It is always needed to check whether the address is null when concatenating comma seperators,
         -- to avoid displaying consecutive commas in ship_addr_line_.
         IF ship_addr_1_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_1_ || ', ';
         END IF;
         
         IF line_ship_addr_2_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_2_ || ', ';
         END IF;
         
         IF line_ship_addr_3_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_3_ || ', ';
         END IF;
         
         IF line_ship_addr_4_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_4_ || ', ';
         END IF;
         
         IF line_ship_addr_5_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_5_ || ', ';
         END IF;
         
         IF line_ship_addr_6_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_6_ || ', ';
         END IF;
         
         IF line_ship_addr_7_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_7_ || ', ';
         END IF;
         
         IF line_ship_addr_8_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_8_ || ', ';
         END IF;
         
         IF line_ship_addr_9_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_9_ || ', ';
         END IF;
         
         IF line_ship_addr_10_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_10_ || ', ';
         END IF;
         
         IF line_ship_addr_11_ IS NOT NULL THEN
            ship_addr_line_ := ship_addr_line_ || line_ship_addr_11_ || ', ';
         END IF;
         -- Since adding comma seperators after each address it is needed to remove last two characters
         -- including comma and space from full length
         ship_addr_line_ := SUBSTR(ship_addr_line_, 0, LENGTH(ship_addr_line_)-2);
      END IF;
      
      -- gelr:tax_char_on_invoice, Bug 147520, localized code removed
      fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, next_row_.line_vat_code );
      IF (fee_type_ = 'NOTAX') THEN
         total_tax_pct_ := '';  
      ELSE
         total_tax_pct_ := Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_),
                                                                        TO_CHAR(next_row_.item_id), '*', '*', '*');
      END IF;
      IF Source_Tax_Item_API.Multiple_Tax_Items_Exist(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_),
                                                      TO_CHAR(next_row_.item_id), '*', '*', '*') = 'TRUE' THEN
         line_total_tax_pct_ := NULL;
      ELSE
         line_total_tax_pct_ := total_tax_pct_;
      END IF;                                                   
      
      ref_invoice_line_date_ := Customer_Order_Inv_Head_API.Get_Invoice_Date(header_rec_.company, debit_invoice_no_);
      
       Get_Delivery_Info_Lists(airway_bill_no_, delivery_, delivery_note_ref_, company_, invoice_id_, next_row_.item_id);            
      
      IF (use_price_incl_tax_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         net_sales_price_curr_ := price_per_price_unit_ * (1 - NVL(next_row_.discount, 0)/100);
      ELSE
         net_sales_price_curr_ := price_per_price_unit_ - Cust_Invoice_Item_Discount_API.Get_Total_Line_Discount(header_rec_.company, invoice_id_, next_row_.item_id, 1, 1);
      END IF;
      
      part_rec_ := Sales_Part_API.Get(contract_, next_row_.catalog_no);
      IF (part_rec_.catalog_type = 'NON') THEN
         country_of_origin_        := part_rec_.country_of_origin;
         country_of_origin_desc_   := Iso_Country_API.Get_Description( part_rec_.country_of_origin ); 
      ELSE
         -- Bug 146434, Modified the parameter next_row_.catalog_no to part_rec_.part_no.
         country_of_origin_        := Inventory_Part_API.Get_Country_Of_Origin(contract_, part_rec_.part_no);
         country_of_origin_desc_   := Iso_Country_API.Get_Description( Inventory_Part_API.Get_Country_Of_Origin(contract_, part_rec_.part_no) ); 
      END IF;   
      
      -- MBrant 12/08/20
      delivery_note_id_      := shipment_id_rec_.sl_delivery_note_id; 
      shipment_id_           := shipment_id_rec_.sl_shipment_id;
      -- End Mod 12/08/20
      
      -- Mod MBrant 6/14/21
         customs_stat_no_ := part_rec_.customs_stat_no;
         
      -- Mod Mbrant 6/14/21     
      IF (next_row_.contract = 'DC' ) THEN  
         harmonize_code_         := Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, 'HARMA');
      END IF;   
      -- Mod Mbrant 6/14/21   
      IF (next_row_.contract = 'DG' ) THEN  
         harmonize_code_         := Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, 'DGHAR');
      END IF;
      -- Mod MBrant 6/14/21
      IF (next_row_.contract = 'DD' ) THEN  
         harmonize_code_         := Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, 'DDHAR');
      END IF;   
      -- End Mod 06/14/21
            
       commodity_grp2_        := NULL; 
       commodity_grp2_desc_   := NULL;
       cust_dft_lang_cd_      := Customer_Info_API.Get_Default_Language_Db( header_rec_.customer_no ); 
       
       -- Add Mod MBrant 3/31/22  CHG 4/26/22
       IF (ord_row_rec_.demand_code_db = 'IPT') OR (ord_row_rec_.demand_code_db = 'IPD') THEN
          demand_code_db_ := ord_row_rec_.demand_code_db;
       ELSE 
          demand_code_db_ := NULL; 
       END IF; 
       IF (ord_row_rec_.supply_code_db = 'IPD') THEN
          supply_code_db_   := ord_row_rec_.supply_code_db;
       ELSE 
          supply_code_db_   := NULL;
       END IF;           
         
      IF (ord_row_rec_.demand_code_db = 'IPT') OR (ord_row_rec_.demand_code_db = 'IPD') OR (ord_row_rec_.supply_code_db = 'IPD') THEN 
         IF (ord_row_rec_.demand_order_ref1 > ' ' ) THEN 
            supply_site_     := Purchase_Order_API.Get_Contract(ord_row_rec_.demand_order_ref1); 
            supplier_no_     := Purchase_Order_API.Get_Vendor_No(ord_row_rec_.demand_order_ref1);   
         ELSE 
            supply_site_     := ord_row_rec_.supply_site;
            supplier_no_     := ord_row_rec_.supplier_no;           
         END IF;     
      END IF;          
          
       
       -- Add Mod MBrant 3/11/22
       -- To translate a foreign language to English go to "Data Migration Basis Data Conversion Lists" and "Part_Class_Characteristic_Translation"  
       
       characteristic_code_ := next_row_.contract || 'CLA';
       
       IF ( Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, characteristic_code_ ) IS NOT NULL ) THEN
          IF (cust_dft_lang_cd_ = 'en') THEN   
             commodity_grp2_desc_ :=  NVL(Intface_Conv_List_Cols_API.Get_New_Value('PART_CLASS_CHARACTERISTIC_TRANSLATION' , Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, characteristic_code_ )), '******');   
          ELSE
             commodity_grp2_desc_ := NVL(Discrete_Charac_Value_API.Get_Characteristic_Value_Desc(characteristic_code_, Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, characteristic_code_ )),  '******');
          END IF; 
       END IF;       
       
       -- RMV MBrant 3/11/22 
       -- MBrant 9/28/20   
       --IF (cust_dft_lang_cd_ = 'de') THEN  
       --commodity_grp2_desc_   := Discrete_Charac_Value_API.Get_Characteristic_Value_Desc('DGCLA',Inventory_Part_Char_API.Get_Attr_Value(contract_, part_rec_.part_no, 'DGCLA'));
       --ELSE
       --  To translate German to English go to "Data Migration Basis Data Conversion Lists" Item Characteristics Translate German to English   
       --   commodity_grp2_desc_   := NVL(intface_conv_list_cols_api.get_new_value('ITEMCHARTRANS', 
       --         Discrete_Charac_Value_API.Get_Characteristic_Value_Desc('DGCLA',Inventory_Part_Char_API.Get_Attr_Value(contract_, part_rec_.part_no, 'DGCLA'))),'******');
       --END IF;
       
       -- End Mod 3/11/22      
       
      
      net_weight_            := Inventory_Part_API.Get_Weight_Net(contract_, part_rec_.part_no);
      line_net_weight_       := net_weight_ * qty_invoiced_; 
      net_weight_uom_        := Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract_));
      
      -- gelr:in_hsn_sac_codes, GLOW-2262, begin
      cgst_tax_amount_  := 0;
      sgst_tax_amount_  := 0;
      igst_tax_amount_  := 0;
      ugst_tax_amount_  := 0;
      other_tax_amount_ := 0;
      cgst_tax_pct_     := 0;
      sgst_tax_pct_     := 0;
      igst_tax_pct_     := 0;
      ugst_tax_pct_     := 0;
      other_tax_pct_    := 0;
      cgst_fee_type_    := NULL;
      sgst_fee_type_    := NULL;
      igst_fee_type_    := NULL;
      ugst_fee_type_    := NULL;
      other_fee_type_   := NULL;
      IF (Company_Localization_API.Get_Parameter_Value_Db(company_, 'IN_HSN_SAC_CODES') = Localization_Param_Yes_No_API.DB_YES) THEN
         FOR gst_rec_ IN get_gst_tax_code(next_row_.item_id) LOOP
            IF gst_rec_.tax_type_category = 'CGST' THEN 
               cgst_tax_amount_ := cgst_tax_amount_ + gst_rec_.tax_code_tot;
               cgst_tax_pct_    := cgst_tax_pct_ + gst_rec_.tax_percentage;
               cgst_fee_type_   := Statutory_Fee_API.Get_Fee_Type_Db(company_, gst_rec_.tax_code);
            ELSIF gst_rec_.tax_type_category = 'SGST' THEN 
               sgst_tax_amount_ := sgst_tax_amount_ + gst_rec_.tax_code_tot;
               sgst_tax_pct_    := sgst_tax_pct_ + gst_rec_.tax_percentage;
               sgst_fee_type_   := Statutory_Fee_API.Get_Fee_Type_Db(company_, gst_rec_.tax_code);
            ELSIF gst_rec_.tax_type_category = 'IGST' THEN 
               igst_tax_amount_ := igst_tax_amount_ + gst_rec_.tax_code_tot;
               igst_tax_pct_    := igst_tax_pct_ + gst_rec_.tax_percentage;
               igst_fee_type_   := Statutory_Fee_API.Get_Fee_Type_Db(company_, gst_rec_.tax_code);
            ELSIF gst_rec_.tax_type_category = 'UGST' THEN 
               ugst_tax_amount_ := ugst_tax_amount_ + gst_rec_.tax_code_tot;
               ugst_tax_pct_    := ugst_tax_pct_ + gst_rec_.tax_percentage;
               ugst_fee_type_   := Statutory_Fee_API.Get_Fee_Type_Db(company_, gst_rec_.tax_code);
            ELSE
               other_tax_amount_ := other_tax_amount_ + gst_rec_.tax_code_tot;
               other_tax_pct_    := other_tax_pct_ + gst_rec_.tax_percentage; 
               other_fee_type_   := Statutory_Fee_API.Get_Fee_Type_Db(company_, gst_rec_.tax_code);
            END IF;         
         END LOOP;
      END IF;
      -- gelr:in_hsn_sac_codes, GLOW-2262, end
      -- gelr:service_statistics_no, begin
      service_statistics_no_         := NULL;
      IF(Company_Localization_API.Get_Parameter_Value_Db(company_, 'SERVICE_STATISTICS_NO') = Localization_Param_Yes_No_API.DB_YES) THEN
           service_statistics_no_  :=  part_rec_.cpa_code;
      END IF;
      -- gelr:service_statistics_no, end          
      IF (do_xml_) THEN
         IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_RENTAL_LINE');
         ELSIF (free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_FREE_OF_CHARGE_LINE');
         ELSE
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINE');
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'TAXABLE', taxable_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NOTE_TEXT', note_text_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LOT_BATCH_NO', lot_batch_nos_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SERIAL_NO', serial_nos_);
         -- DIS003 start
         IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
            -- Bug 134081, start
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', NVL(loc_line_no_, next_row_.line_no));
            ELSE   
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_LINE_NO', NVL(loc_line_no_, next_row_.item_id));
            END IF;   
            -- Bug 134081, end
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_INV_NO', NVL(next_row_.prepay_invoice_no, next_row_.number_reference));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_INV_SERIES_ID', NVL(next_row_.prepay_invoice_series_id, next_row_.series_reference));
            loc_tax_character_ := Get_Tax_Character_Display___(header_rec_.company, next_row_.line_vat_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', loc_tax_character_); 
         ELSE
	        IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
	           Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.item_id);
	        ELSE
	           Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_LINE_NO', next_row_.item_id);            
	        END IF;
            -- Bug 126827, end
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_INV_NO', next_row_.prepay_invoice_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_INV_SERIES_ID', next_row_.prepay_invoice_series_id);
         END IF;
         -- DIS003 end
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_POS', next_row_.pos);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_ORDER_LINE_POS', next_row_.pos);
         END IF;
         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_INV_NO', next_row_.prepay_invoice_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_INV_SERIES_ID', next_row_.prepay_invoice_series_id);
         
         
         IF (customer_part_no_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
         ELSIF ord_row_rec_.classification_part_no IS NOT NULL THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', ord_row_rec_.classification_part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
         END IF;
         -- Moved code to print if catalog description exist.
         IF (sales_part_desc_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
         ELSE
             Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', next_row_.catalog_desc);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO',gtin_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_INVOICED', qty_invoiced_ * item_sign_);
         IF (ord_row_rec_.customer_part_unit_meas IS NOT NULL) THEN 
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', ord_row_rec_.customer_part_unit_meas);
         ELSIF (customer_part_no_ IS NULL) AND (ord_row_rec_.classification_unit_meas IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS',ord_row_rec_.classification_unit_meas);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS',next_row_.sales_unit_meas);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_PER_PRICE_UNIT', price_per_price_unit_);
         --Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_DISCOUNT', total_order_discount_);
         -- gelr:pt_diff_tax_code_credit_invoic, begin
         IF (pt_credit_invoice_ = &TRUE) THEN 
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL', ABS(price_total_ * item_sign_));               
         -- gelr:pt_diff_tax_code_credit_invoic, end   
         ELSE 
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL', price_total_ * item_sign_);               
         END IF;
         IF (free_of_charge_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         -- DIS003 start 
         IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
            -- skip discount and price_qty info for prepayment invoice lines
            IF NVL(prepayment_text_,'NOTPREPAYLINES') != 'PREPAYMENTLINES' THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', Customer_Order_Inv_Item_API.Get_Tot_Discount_For_Ivc_Item(company_, invoice_id_, next_row_.item_id));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_QTY', next_row_.price_qty * item_sign_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDITIONAL_DISCOUNT', ROUND(next_row_.additional_discount, 2));
         ELSE
            -- gelr:pt_diff_tax_code_credit_invoic, begin
            IF (pt_credit_invoice_ = &TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', ABS(Customer_Order_Inv_Item_API.Get_Tot_Discount_For_Ivc_Item(company_, invoice_id_, next_row_.item_id)));
            -- gelr:pt_diff_tax_code_credit_invoic, end   
            ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', Customer_Order_Inv_Item_API.Get_Tot_Discount_For_Ivc_Item(company_, invoice_id_, next_row_.item_id));
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDITIONAL_DISCOUNT', ROUND(next_row_.additional_discount, 2));
         END IF;
         -- DIS003 end
         END IF;
         
         -- MBrant 12/08/20
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_NOTE_ID',      delivery_note_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_ID',           shipment_id_);
         
         -- MBrant 
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMMODITY_GRP2',         commodity_grp2_ );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMMODITY_GRP2_DESC',    commodity_grp2_desc_ );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT',             net_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NET_WEIGHT',        line_net_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT_UOM',         net_weight_uom_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COUNTRY_OF_ORIGIN_DESC', country_of_origin_desc_);
         
         -- MBrant 6/14/21
          Xml_Record_Writer_SYS.Add_Element(xml_, 'HARMONIZE_CODE',        harmonize_code_ );
                                    
		   -- Add Mod MBrant 2/15/22
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_CODE',           supply_code_db_ );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_NO',             supplier_no_   );
         -- End Mod MBrant 2/15/22   
         
         -- Add Mod MBrant 3/31/22
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_SITE',           supply_site_  );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEMAND_CODE_DB',          demand_code_db_ );
         -- End Mod MBrant 3/31/22
         
         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_QTY', next_row_.price_qty * item_sign_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_UNIT_MEAS', next_row_.price_unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_ID', ord_row_rec_.ref_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', condition_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ORDER_NO', next_row_.order_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_NO', next_row_.line_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_REL_NO', next_row_.rel_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', 0);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEBIT_INVOICE_REF', line_debit_inv_ref_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_CUSTOMER_PO_NO', next_row_.customer_po_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_PAYMENT', line_debit_payment_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEBIT_TAX', line_debit_tax_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_CODE', next_row_.line_vat_code);
         -- DIS003 start
         IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
            -- skip line disc amount info for prepayment invoice lines
            IF NVL(prepayment_text_,'NOTPREPAYLINES') != 'PREPAYMENTLINES' THEN
            -- It seems it is Core bug. For correction invoice in the lines "before correction" the discount amount was negative
               IF (header_rec_.invoice_type = cor_inv_type_) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DISC_AMOUNT', ABS(line_disc_amount_ * item_sign_));
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DISC_AMOUNT', line_disc_amount_ * item_sign_);
               END IF;
            END IF;
            -- gelr:tax_char_on_invoice, Bug 147520, begin
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_AMOUNT', next_row_.vat_curr_amount  * item_sign_);    -- not used anymore in layout
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_GROSS_AMOUNT', (next_row_.net_curr_amount + next_row_.vat_curr_amount) * item_sign_); -- not used anymore in layout         
            -- gelr:tax_char_on_invoice, Bug 147520, end
         ELSE
            -- gelr:pt_diff_tax_code_credit_invoic, begin
            IF (pt_credit_invoice_ = &TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DISC_AMOUNT', ABS(line_disc_amount_ * item_sign_));
            -- gelr:pt_diff_tax_code_credit_invoic, end   
            ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DISC_AMOUNT', line_disc_amount_ * item_sign_);
         END IF;
         END IF;
         -- DIS003 end 
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_PERCENT', line_total_tax_pct_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_INVOICE_LINE_DATE', ref_invoice_line_date_);               
         -- Bug 122510 Frwopl, Gross amount as sum of net and tax amounts fetched from invoice_tab instead of recalculating on the basis of price, Begin
         IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_TAX_AMOUNT', next_row_.vat_curr_amount * item_sign_);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAY_TAX_AMOUNT', ABS(ROUND((price_total_ * total_tax_pct_ / 100), currency_rounding_)));
         END IF;
         -- Bug 122510 Frwopl, End 
         
         IF (same_as_header_terms_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEL_TERMS_DESC', line_del_term_desc_);
         END IF;
         IF (same_as_header_terms_loc_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEL_TERMS_LOCATION', ord_row_rec_.temp_del_terms_location);
         END IF;
         IF (same_as_header_agents_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FORWARD_AGENT', forward_agent_line_);
         END IF;
         IF (same_as_header_tax_id_no_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_NO', line_tax_id_no_);
         END IF;
         IF (same_as_header_ = &FALSE) THEN
            IF (next_row_.prepay_invoice_no IS NULL) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SHIP_ADDR_1', ship_addr_line_);
            END IF;
         END IF;
         IF (same_as_header_ship_via_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SHIP_VIA_DESC', ord_ship_via_desc_);
         END IF;
         IF (same_as_header_contact_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTACT', cust_line_ref_name_);
         END IF;
         IF (print_tax_db_ = 'Y' OR use_price_incl_tax_db_ = Fnd_Boolean_API.DB_TRUE OR free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_INCL_TAX',price_incl_tax_ );
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_INCL_TAX_TOTAL',ABS(price_total_incl_tax_) );
         END IF;
         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY', delivery_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_NOTE_REF', delivery_note_ref_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AIRWAY_BILL_NO', airway_bill_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_SALES_PRICE_CURR', net_sales_price_curr_);
         
         IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ON_RENTAL_QTY', on_rental_qty_ );
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_TRANSACTION_START_DATE', transaction_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_TRANSACTION_END_DATE', transaction_end_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICED_DURATION_DAYS', invoiced_duration_days_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_MODE', rental_mode_desc_ );
         END IF;
         
         IF (free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            -- Bug 141485, fetch free_of_charge_tax_basis from next_row_ insead of ord_row_rec_
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FREE_OF_CHARGE_TAX_BASIS', next_row_.free_of_charge_tax_basis );
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_BEARING_TAX_AMT', next_row_.base_comp_bearing_tax_amt);
         END IF;
         
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN' , country_of_origin_ );
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_STAT_NO' , customs_stat_no_ );
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TEXT', next_row_.invoice_text); 
         Xml_Record_Writer_SYS.Add_Element(xml_,'CORRECTION_REASON', next_row_.correction_reason);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', ord_row_rec_.col_key, 'CUSTOMER_ORDER_IVC_REP', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustOrderLineAddress', ord_row_rec_.cola_key, 'CUSTOMER_ORDER_IVC_REP', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderInvItem', next_row_.objkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
         -- Bug 135829, start
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'InvoiceItem', next_row_.objkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
         -- Bug 135829, end
         
         -- gelr:in_hsn_sac_codes, GLOW-2226, begin
         IF (Company_Localization_API.Get_Parameter_Value_Db(header_rec_.company, 'IN_HSN_SAC_CODES') = Localization_Param_Yes_No_API.DB_YES) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'HSN_SAC_CODE', next_row_.hsn_sac_code);
            -- gelr:in_hsn_sac_codes, GLOW-2262, begin
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CGST_TAX_AMNT', cgst_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SGST_TAX_AMNT', sgst_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'IGST_TAX_AMNT', igst_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'UGST_TAX_AMNT', ugst_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OTHER_TAX_AMNT', ugst_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CGST_TAX_PCT',  cgst_tax_pct_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SGST_TAX_PCT',  sgst_tax_pct_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'IGST_TAX_PCT',  igst_tax_pct_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'UGST_TAX_PCT',  ugst_tax_pct_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OTHER_TAX_PCT',  ugst_tax_pct_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CGST_FEE_TYPE',  cgst_fee_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SGST_FEE_TYPE',  sgst_fee_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'IGST_FEE_TYPE',  igst_fee_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'UGST_FEE_TYPE',  ugst_fee_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OTHER_FEE_TYPE', other_fee_type_);
            -- gelr:in_hsn_sac_codes, GLOW-2262, end
         END IF;
         -- gelr:in_hsn_sac_codes, GLOW-2226, end
         -- gelr:service_statistics_no, begin
         IF (Company_Localization_API.Get_Parameter_Value_Db(header_rec_.company, 'SERVICE_STATISTICS_NO') = Localization_Param_Yes_No_API.DB_YES) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SERVICE_STATISTICS_NO', service_statistics_no_);
      END IF;
         -- gelr:service_statistics_no, end
      END IF;
      IF (do_rs_) THEN
         IF (ord_row_rec_.customer_part_unit_meas IS NOT NULL) THEN 
            sales_unit_meas_ := ord_row_rec_.customer_part_unit_meas;
         ELSIF (customer_part_no_ IS NULL) AND (ord_row_rec_.classification_unit_meas IS NOT NULL) THEN
            sales_unit_meas_ := ord_row_rec_.classification_unit_meas;
         ELSE
            sales_unit_meas_ :=next_row_.sales_unit_meas;
         END IF;
         
         IF (customer_part_no_ IS NULL) AND (ord_row_rec_.classification_part_no IS NOT NULL) THEN
            customer_part_no_ := ord_row_rec_.classification_part_no;
         END IF;
         
         catalog_no_ := NULL;
         IF (customer_part_no_ IS NOT NULL) OR (ord_row_rec_.classification_part_no IS NOT NULL) THEN
            catalog_no_ := next_row_.catalog_no;
         END IF;

         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            line_no_               := next_row_.item_id;
            rental_line_no_        := NULL;
            order_line_pos_        := next_row_.pos;
            rental_order_line_pos_ := NULL;
         ELSE
            line_no_               := NULL;
            rental_line_no_        := next_row_.item_id;
            order_line_pos_        := NULL;
            rental_order_line_pos_ := next_row_.pos;
         END IF;
         
         -- Bug 141485, fetch free_of_charge_tax_basis from next_row_ insead of ord_row_rec_         
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no,
            &ORDER_LINE_POS, &RENTAL_ORDER_LINE_POS, &LINE_NO, &RENTAL_LINE_NO, &LINE_ITEM_NO, &CATALOG_NO, &CATALOG_DESC,
            &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC, &GTIN_NO, &QTY_INVOICED,
            &SALES_UNIT_MEAS, &PRICE_PER_PRICE_UNIT, 
            &PRICE_TOTAL, 
            &TAXABLE, &ORDER_DISCOUNT,
            &DISCOUNT, 
            &ADDITIONAL_DISCOUNT, &PRICE_QTY, &PRICE_UNIT_MEAS,
            &REF_ID,
            &CONFIG_ID, &CONFIG_SPEC_DESC, &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION,
            &LINE_ORDER_NO, &ORDER_LINE_NO, &ORDER_REL_NO, &BLOCK_NO, &LINE_DEBIT_INVOICE_REF, &LINE_CUSTOMER_PO_NO, 
            &NOTE_TEXT,
            &LOT_BATCH_NO,
            &LINE_SHIP_ADDR_1,
            &LINE_SHIP_VIA_DESC,
            &LINE_DEL_TERMS_DESC,
            &LINE_FORWARD_AGENT,
            &LINE_VAT_NO,
            &LINE_VAT_CODE,
            &LINE_DISC_AMOUNT,
            &LINE_PAYMENT, 
            &LINE_DEBIT_TAX,
            &DELIVERY,
            &DELIVERY_NOTE_REF,
            &AIRWAY_BILL_NO,
            &CONTACT,
            &LINE_DEL_TERMS_LOCATION,
            &NET_SALES_PRICE_CURR,
            &LINE_VAT_PERCENT,
            &SERIAL_NO,
            &RENTAL_TRANSACTION_START_DATE,
            &RENTAL_TRANSACTION_END_DATE,
            &ON_RENTAL_QTY,
            &INVOICED_DURATION_DAYS,
            &FREE_OF_CHARGE_TAX_BASIS,
            &COMPANY_BEARING_TAX_AMT,
            &COUNTRY_OF_ORIGIN,
            &CUSTOMS_STAT_NO,
            &RENTAL_MODE,
            &INVOICE_TEXT,
            &CORRECTION_REASON,
            -- gelr:in_hsn_sac_codes, GLOW-2226, begin
            &HSN_SAC_CODE,
            -- gelr:in_hsn_sac_codes, GLOW-2226, end
            -- gelr:in_hsn_sac_codes, GLOW-2262, begin
            &CGST_TAX_AMNT,
            &SGST_TAX_AMNT,
            &IGST_TAX_AMNT,
            &UGST_TAX_AMNT,
            &OTHER_TAX_AMNT,
            &CGST_TAX_PCT,
            &SGST_TAX_PCT,
            &IGST_TAX_PCT,
            &UGST_TAX_PCT,
            &OTHER_TAX_PCT,
            &CGST_FEE_TYPE,
            &SGST_FEE_TYPE,
            &IGST_FEE_TYPE,
            &UGST_FEE_TYPE,
            &OTHER_FEE_TYPE,
            -- gelr:in_hsn_sac_codes, GLOW-2262, end
            -- gelr:service_statistics_no, begin
            &SERVICE_STATISTICS_NO, 
            -- gelr:service_statistics_no, end
            &COMMODITY_GRP2,   
            &COMMODITY_GRP2_DESC,
            &NET_WEIGHT_UOM, 
            &NET_WEIGHT,
            &COUNTRY_OF_ORIGIN_DESC, 
            &LINE_NET_WEIGHT, 
            -- MBrant 12/08/20
            &DELIVERY_NOTE_ID, 
            &SHIPMENT_ID, 
            -- MBrant 6/14/21
            &HARMONIZE_CODE, 
            -- MBrant 2/15/22
            &SUPPLIER_CODE, 
            &SUPPLIER_NO, 
            -- MBrant 3/31/22
            &SUPPLIER_SITE, 
            &DEMAND_CODE_DB
           )
         VALUES
            (result_key_, row_no_, parent_row_no_, order_line_pos_, rental_order_line_pos_,
            line_no_, rental_line_no_, 0, catalog_no_,
            sales_part_desc_, NVL(customer_part_no_, next_row_.catalog_no), next_row_.catalog_desc, gtin_no_,
            qty_invoiced_,          -- the quantity either in customer part qty or sales quantity
            nvl(ord_row_rec_.customer_part_unit_meas, next_row_.sales_unit_meas),
            price_per_price_unit_, 
            decode(pt_credit_invoice_, &FALSE, price_total_, ABS(price_total_)), 
            taxable_,
            total_order_discount_, 
            decode(pt_credit_invoice_, &FALSE, next_row_.discount, ABS(next_row_.discount)), 
            ROUND(next_row_.additional_discount, 2),
            next_row_.price_qty, next_row_.price_unit_meas,
            ord_row_rec_.ref_id,
            config_id_, config_spec_desc_, condition_code_, condition_code_description_,
            next_row_.order_no,next_row_.line_no, next_row_.rel_no, &BLOCK_ORDER_LINES, line_debit_inv_ref_, next_row_.customer_po_no, 
            note_text_,
            lot_batch_nos_,
            decode(same_as_header_, &FALSE, ship_addr_line_, NULL),
            decode(same_as_header_ship_via_, &FALSE, ord_ship_via_desc_, NULL),
            decode(same_as_header_terms_, &FALSE, line_del_term_desc_, NULL),
            decode(same_as_header_agents_, &FALSE, forward_agent_line_, NULL),
            decode(same_as_header_tax_id_no_, &FALSE, line_tax_id_no_, NULL),
            next_row_.line_vat_code,
            line_disc_amount_,
            line_debit_payment_, 
            line_debit_tax_,
            delivery_, delivery_note_ref_,
            airway_bill_no_,
            cust_line_ref_name_,
            DECODE(same_as_header_terms_loc_, &FALSE, ord_row_rec_.temp_del_terms_location, NULL),
            net_sales_price_curr_,
            line_total_tax_pct_,
            serial_nos_,
            transaction_date_,
            transaction_end_date_,
            on_rental_qty_,
            invoiced_duration_days_,
            next_row_.free_of_charge_tax_basis,
            next_row_.base_comp_bearing_tax_amt,
            country_of_origin_,
            customs_stat_no_, 
            rental_mode_desc_,
            next_row_.invoice_text,
            next_row_.correction_reason,
            -- gelr:in_hsn_sac_codes, GLOW-2226, begin
            next_row_.hsn_sac_code,
            -- gelr:in_hsn_sac_codes, GLOW-2226, end
            -- gelr:in_hsn_sac_codes, GLOW-2262, begin
            cgst_tax_amount_,
            sgst_tax_amount_,
            igst_tax_amount_,
            ugst_tax_amount_,
            other_tax_amount_,
            cgst_tax_pct_,
            sgst_tax_pct_,
            igst_tax_pct_,
            ugst_tax_pct_,
            other_tax_pct_,
            cgst_fee_type_,
            sgst_fee_type_,
            igst_fee_type_,
            ugst_fee_type_,
            other_fee_type_,
            -- gelr:in_hsn_sac_codes, GLOW-2262, end
            -- gelr:service_statistics_no, begin
            service_statistics_no_,
            -- gelr:service_statistics_no, end
            commodity_grp2_,            
            commodity_grp2_desc_,      
            net_weight_uom_,                  
            net_weight_, 
            country_of_origin_desc_,
            line_net_weight_, 
            -- MBrant 12/08/20
            delivery_note_id_,
            shipment_id_, 
            -- MBrant 6/14/21
            harmonize_code_,             
			  -- MBrant 2/15/22
            supply_code_db_, 
            supplier_no_,
            -- MBrant 3/31/22
           supply_site_, 
           demand_code_db_            
            ); 
         
         parent_row_no2_ := row_no_;            -- save for characteristic lines
         row_no_         := row_no_ + 1;
      END IF;
      
      IF (ord_row_rec_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;
         
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(ord_row_rec_.note_id, document_code_);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
         END IF; 
      END IF;
      
      IF (customer_order_return_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'RETURN_DOC_TEXTS');
         END IF;
         
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_order_return_note_id_, &DOCCREDITINVOICE);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'RETURN_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'RETURN_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'RETURN_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &RETURN_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'RETURN_DOC_TEXTS');
         END IF; 
      END IF;
      
      IF (sales_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, document_code_);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP            
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES',note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF; 
      END IF;
      
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         FOR warr_rec_ IN get_warranty_note(ord_row_rec_.cust_warranty_id, language_code_) LOOP
            IF (warr_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(warr_rec_.note_id, document_code_);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'WARRANTY_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &WARRANTY_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXTS');
               END IF; 
            END IF;
         END LOOP;
      END IF;

      IF (partca_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, document_code_);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF; 
      END IF;
      
      IF (inv_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, document_code_);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF; 
      END IF;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'REAL_SHIP_DATES');
         IF (several_value_ = 'TRUE') THEN
            FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
               OPEN get_delivery_info(del_rec_.deliv_no);
               FETCH get_delivery_info INTO delivery_rec_;
               CLOSE get_delivery_info;
               Xml_Record_Writer_SYS.Start_Element(xml_, 'REAL_SHIP_DATE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REAL_SHIP_DATE', delivery_rec_.date_delivered);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_INVOICED', delivery_rec_.qty_invoiced);
               Xml_Record_Writer_SYS.End_Element(xml_, 'REAL_SHIP_DATE');
            END LOOP;
         END IF;
         Xml_Record_Writer_SYS.End_Element(xml_, 'REAL_SHIP_DATES');
      END IF;
      IF (do_rs_) THEN
         IF (several_value_ = 'TRUE') THEN
            FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
               OPEN get_delivery_info(del_rec_.deliv_no);
               FETCH get_delivery_info INTO delivery_rec_;
               CLOSE get_delivery_info;
               
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &BLOCK_NO, &REAL_SHIP_DATE, &QTY_INVOICED, &SHIP_DATE_FIRST)
               VALUES
                  (result_key_, row_no_, parent_row_no_, &BLOCK_DELIVERIES, delivery_rec_.date_delivered, delivery_rec_.qty_invoiced, ship_date_first_);     
               ship_date_first_ := 0;
               row_no_          := row_no_ + 1;
            END LOOP;
         END IF;
         ship_date_first_ := 1;
      END IF;
      
      ord_row_rec_.customer_part_no        := NULL;
      ord_row_rec_.customer_part_unit_meas := NULL;
      
      -- Note : Retrieve the print character code in order to determine if package components
      -- Note : and sales configurator options should be displayed or not
      -- Note : First retrieve the print control code
      IF (header_print_control_code_ IS NOT NULL) THEN
         print_control_code_ := header_print_control_code_;
      ELSE
         -- Retrieve the default print control code from SalesPart
         print_control_code_ := Sales_Part_API.Get_Print_Control_Code(contract_, next_row_.catalog_no);
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
      END IF;
      
      print_char_code_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, document_code_);
      
      -- Note : added intialization of characteristic_printout_api for printing characteristics
         -- Note : initialize characteristic printout values        
         $IF (Component_Cfgchr_SYS.INSTALLED) $THEN   
            char_rec_.reportname                 := &REPORTNAME;
            char_rec_.doc_code                   := document_code_;
            char_rec_.order_no                   := order_no_;
            char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
            char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
            char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
            char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
            char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
            char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
            char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
            char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
            char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
            char_rec_.language_code              := language_code_;
            char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
            char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;            
         $END
      
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN      
         -- Note : added new views for printing characteristics
         -- Note : handle configuration
         $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
            IF (ord_row_rec_.configuration_id != '*') THEN               
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := next_row_.line_no;
               char_rec_.rel_no                   := next_row_.rel_no;
               char_rec_.line_item_no             := next_row_.line_item_no;
               -- Bug 144243, Modified variable assigned into char_rec_.sales_part_no.
               char_rec_.sales_part_no            := next_row_.catalog_no;               
               char_rec_.manual_flag              := ord_row_rec_.manual_flag;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := ord_row_rec_.configuration_id;
               char_rec_.configured_line_price_id := ord_row_rec_.configured_line_price_id;
               char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
               char_rec_.characteristic_sub_block := NULL;
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
               IF (do_xml_) THEN 
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINE_CHARACTERISTICS');
                  xml_element_ := 'CHARACTERISTIC_ITEM';
               END IF;
               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINE_CHARACTERISTICS');
               END IF;
            END IF;
         $ELSE
            NULL;
         $END
      END IF;         
      
      IF ((next_row_.line_item_no = -1) AND (print_char_code_ = '1')) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
         END IF;
         -- Note : Package components should be displayed
         FOR next_part_ IN get_package_part(order_no_, next_row_.line_no, next_row_.rel_no) LOOP
            customer_comp_part_no_   := Sales_Part_Cross_Reference_API.Get_Customer_Part_No(header_rec_.customer_no,
                                                                                            header_rec_.contract,
                                                                                            next_part_.catalog_no);
            
            customer_comp_part_desc_ := Sales_Part_Cross_Reference_API.Get_Catalog_Desc(header_rec_.customer_no,
                                                                                        header_rec_.contract,
                                                                                        customer_comp_part_no_);
            
            -- Note : print extra configuration id information if the part is configurable
            Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                      next_part_.catalog_no, next_part_.configuration_id);
            
            
            Get_Comp_Delivery_Info_Lists(airway_bill_no_, delivery_, delivery_note_ref_, next_row_.order_no, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no);
                               
            IF (several_value_ = 'TRUE' ) THEN
               real_ship_date_ := Customer_Order_Line_API.Get_Real_Ship_Date(next_row_.order_no, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no);
            ELSE
               real_ship_date_ := NULL;
            END IF;
            
            IF (next_part_.condition_code IS NOT NULL) THEN
               condition_code_description_ := Condition_Code_API.Get_Description(next_part_.condition_code);
            ELSE
               condition_code_description_ := NULL;
            END IF;
            
            pkg_qty_invoiced_ := next_part_.qty_per_assembly * next_row_.qty_invoiced;
            
            part_rec_ := Sales_Part_API.Get(contract_, next_part_.catalog_no);
            IF (part_rec_.catalog_type = 'NON') THEN
               country_of_origin_ := part_rec_.country_of_origin;
            ELSE
               -- Bug 146434, Modified the parameter next_row_.catalog_no to part_rec_.part_no.                              
               country_of_origin_ := Inventory_Part_API.Get_Country_Of_Origin(contract_, part_rec_.part_no);
            END IF;
            customs_stat_no_ := part_rec_.customs_stat_no;
            
            -- Mod Mbrant 6/14/21     
            IF (next_row_.contract = 'DC' ) THEN  
               harmonize_code_         := Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, 'HARMA');
            END IF;   
            -- Mod Mbrant 6/14/21   
            IF (next_row_.contract = 'DG' ) THEN  
               harmonize_code_         := Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, 'DGHAR');
            END IF;
            -- Mod MBrant 6/14/21
            IF (next_row_.contract = 'DD' ) THEN  
               harmonize_code_         := Inventory_Part_Char_API.Get_Attr_Value(next_row_.contract, part_rec_.part_no, 'DDHAR');
            END IF;   
            -- End Mod 06/14/21
            
                        
            IF (do_xml_) THEN
               -- Note : Insert values for package component
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
               Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_ORDER_LINE_POS', next_row_.pos);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_LINE_NO', next_row_.item_id);
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO', next_part_.line_item_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO', next_part_.catalog_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC', next_part_.catalog_desc);
               Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_INVOICED', pkg_qty_invoiced_ * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS', next_part_.sales_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_QTY', pkg_qty_invoiced_ * next_part_.price_conv_factor * item_sign_ );
               Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', next_part_.price_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID', config_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC', config_spec_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE', next_part_.condition_code);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION', condition_code_description_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_comp_part_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_comp_part_desc_);
               
               Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY', delivery_);
               
               -- MBrant 6/14/21
               Xml_Record_Writer_SYS.Add_Element(xml_,'HARMONIZE_CODE' , harmonize_code_);
               
               Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_NOTE_REF', delivery_note_ref_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'AIRWAY_BILL_NO', airway_bill_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN' , country_of_origin_ );
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_STAT_NO' , customs_stat_no_ );
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', next_part_.rowkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
            END IF;
            IF (do_rs_) THEN
               -- Note : Insert values for package component
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                  &PACKAGE_ORDER_LINE_POS, &PACKAGE_LINE_NO, &LINE_ITEM_NO, &CATALOG_NO, &CATALOG_DESC,
                  &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC, &QTY_INVOICED,
                  &SALES_UNIT_MEAS, &PRICE_QTY, &PRICE_UNIT_MEAS,
                  &CONFIG_ID, &CONFIG_SPEC_DESC,
                  &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION, &DELIVERY_NOTE_REF,
                  &AIRWAY_BILL_NO, &COUNTRY_OF_ORIGIN, &CUSTOMS_STAT_NO, &BLOCK_NO, &HARMONIZE_CODE)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                  next_row_.pos, next_row_.line_no,
                  next_part_.line_item_no, next_part_.catalog_no, next_part_.catalog_desc,
                  customer_comp_part_no_, customer_comp_part_desc_, next_part_.qty_per_assembly * next_row_.qty_invoiced,
                  next_part_.sales_unit_meas, next_part_.price_qty, next_part_.price_unit_meas,
                  config_id_, config_spec_desc_,
                  next_part_.condition_code, condition_code_description_, delivery_note_ref_,
                  airway_bill_no_, country_of_origin_, customs_stat_no_, &BLOCK_PACKAGE_LINES, harmonize_code_);
               
               -- Note : added for printing characteristics
               parent_row_no2_ := row_no_;             -- Note : save for characteristic lines
               row_no_         := row_no_ + 1;
            END IF;
            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATES');
               IF (several_value_ = 'TRUE') THEN
                  FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
                     OPEN get_delivery_info(del_rec_.deliv_no);
                     FETCH get_delivery_info INTO delivery_rec_;
                     CLOSE get_delivery_info;
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'REAL_SHIP_DATE', delivery_rec_.date_delivered);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_INVOICED', delivery_rec_.qty_invoiced);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATE');
                  END LOOP;
               END IF;
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATES');
            END IF;
            IF (do_rs_) THEN
               IF (several_value_ = 'TRUE') THEN   
                  FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
                     OPEN get_delivery_info(del_rec_.deliv_no);
                     FETCH get_delivery_info INTO delivery_rec_;
                     CLOSE get_delivery_info;
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no, &BLOCK_NO, &REAL_SHIP_DATE, &QTY_INVOICED, &SHIP_DATE_FIRST)
                     VALUES
                        (result_key_, row_no_, parent_row_no_, &BLOCK_PKG_DELIVERIES, delivery_rec_.date_delivered, delivery_rec_.qty_invoiced, ship_date_first_);     
                     row_no_          := row_no_ + 1;
                     ship_date_first_ := 0;
                  END LOOP;
                  ship_date_first_ := 1;
               END IF;
            END IF;
            
            IF (next_part_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
               END IF;
               
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_part_.note_id, document_code_);
               
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
               END IF; 
            END IF;
            
            IF (customer_order_return_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'RETURN_DOC_TEXTS');
               END IF;
               
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_order_return_note_id_, &DOCCREDITINVOICE);
               
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'RETURN_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'RETURN_LINE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'RETURN_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &RETURN_LINE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'RETURN_DOC_TEXTS');
               END IF; 
            END IF;
            
            FOR warr_rec_ IN get_warranty_note(next_part_.cust_warranty_id, language_code_) LOOP
               IF (warr_rec_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(warr_rec_.note_id, document_code_);
                  
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'WARRANTY_DOC_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &WARRANTY_DOC_TEXT)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXTS');
                  END IF; 
               END IF;
            END LOOP;
            
            -- Note : added for printing characteristics
            -- Note : handle configuration
            $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
               IF (next_part_.configuration_id != '*')THEN                  
                  char_rec_.print_char_code          := print_char_code_;
                  char_rec_.print_control_code       := print_control_code_;
                  char_rec_.line_no                  := next_row_.line_no;
                  char_rec_.rel_no                   := next_row_.rel_no;
                  char_rec_.line_item_no             := next_part_.line_item_no;
                  -- Bug 144243, Modified variable assigned into char_rec_.sales_part_no.
                  char_rec_.sales_part_no            := next_part_.catalog_no;                  
                  char_rec_.manual_flag              := next_part_.manual_flag;
                  char_rec_.result_key               := result_key_;
                  char_rec_.parent_row_no            := parent_row_no2_;
                  char_rec_.configuration_id         := next_part_.configuration_id;
                  char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                  char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                  char_rec_.characteristic_sub_block := NULL;
                  char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                     xml_element_ := 'CHARACTERISTIC_ITEM';
                  END IF;
                  Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                  END IF;
               END IF;               
            $END
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
            END IF;
         END LOOP;  -- Note : package loop
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
         END IF;
      END IF;
      
      -----------------------------------------------------------------------------
      -- Staged Billing
      -----------------------------------------------------------------------------
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) AND (free_of_charge_db_ = Fnd_Boolean_API.DB_FALSE ) THEN 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'STAGED_BILLING_ITEMS');
         END IF;
         FOR stage_rec_ IN get_stages(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.stage) LOOP
            total_on_line_ := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
            delivery_      := NULL;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'STAGED_BILLING_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'STAGE', stage_rec_.stage);
               Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', stage_rec_.description);
               -- gelr:pt_diff_tax_code_credit_invoic, begin
               IF (pt_credit_invoice_ = &TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ON_LINE', ABS(total_on_line_));
               -- gelr:pt_diff_tax_code_credit_invoic, end   
               ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ON_LINE', total_on_line_);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_PERCENTAGE',stage_rec_.total_percentage);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderLineStagedBilling', stage_rec_.rowkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                  &STAGE,
                  &DESCRIPTION,
                  &TOTAL_PERCENTAGE,
                  &TOTAL_ON_LINE,
                  &BLOCK_NO)
               VALUES
                  (result_key_, row_no_, parent_row_no2_,
                  stage_rec_.stage,
                  stage_rec_.description,
                  stage_rec_.total_percentage,
                  decode(pt_credit_invoice_, &FALSE, total_on_line_, ABS(total_on_line_)),
                  &BLOCK_STAGED_BILLING);
               parent_row_no3_ := row_no_; 
               row_no_         := row_no_ + 1;
            END IF;
         END LOOP;
         FOR stage_rec_ IN get_stages(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.stage) LOOP
            IF (stage_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BILLING_DOC_TEXTS');
               END IF;

               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(stage_rec_.note_id, document_code_);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'BILLING_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'STAGE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'BILLING_DOC_TEXT');
                     END IF;

                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &STAGE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        row_no_ := row_no_ + 1;
                     END IF;
                  END LOOP;
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BILLING_DOC_TEXTS');
               END IF; 
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'STAGED_BILLING_ITEM'); 
            END IF;
         END LOOP;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'STAGED_BILLING_ITEMS');
         END IF;
      END IF;
      -----------------------------------------------------------------------------
      -- Note : End Staged Billing
      -----------------------------------------------------------------------------
      
      IF (do_xml_) THEN
         IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_RENTAL_LINE');
         ELSIF (free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_FREE_OF_CHARGE_LINE');
         ELSE            
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINE');
         END IF;
      END IF;
      sub_total_incl_tax_ := sub_total_incl_tax_ + price_total_incl_tax_;
   END LOOP;   -- end invoice line loop
   
   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_RENTAL_LINES');
      ELSIF (free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_FREE_OF_CHARGE_LINES');
      ELSE         
         Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINES');
      END IF;
   END IF;
END Print_Invoice_Line___;
      
-- gelr:prepayment_tax_document, begin
PROCEDURE Ins_Tax_Doc_Det___(
   xml_               IN OUT NOCOPY CLOB,
   row_no_            IN OUT NUMBER,
   result_key_        IN     NUMBER,    
   parent_row_no_     IN     NUMBER,   
   company_           IN     VARCHAR2,   
   invoice_id_        IN     NUMBER,
   debit_inv_id_      IN     NUMBER,
   tax_doc_           IN     BOOLEAN,   
   tax_curr_rate_     IN     NUMBER,
   curr_code_         IN     VARCHAR2,      
   do_xml_            IN     BOOLEAN,
   do_rs_             IN     BOOLEAN   )
IS 
   series_id_                VARCHAR2(20);
   invoice_no_               VARCHAR2(50);
   adv_series_id_            VARCHAR2(20);
   adv_invoice_no_           VARCHAR2(50);   
   credit_invoice_id_        NUMBER;
   base_acc_crrr_            NUMBER;
   tax_acc_crrr_             NUMBER;   
   matched_base_acc_crrr_    NUMBER;
   matched_tax_acc_crrr_     NUMBER;   
   curr_rounding_            NUMBER;
   curr_rate_                NUMBER;
   
   CURSOR get_tax_doc IS 
      SELECT vat_code, prepay_tax_base, prepay_tax_amount
      FROM   invoice_item_tab 
      WHERE  company = company_             
      AND    invoice_id = invoice_id_;  
   
   CURSOR get_tax_doc_offset IS 
      SELECT t.tax_doc_id, i.adv_inv_ref, t.tax_code, ii.prepay_tax_base, ii.prepay_tax_amount, t.offset_amount, t.tax_amount
      FROM   invoice_tab i, invoice_item_tab ii, tax_doc_offset_tab t
      WHERE  t.company = company_             
      AND    t.invoice_id = invoice_id_ 
      AND    i.company = t.company
      AND    i.invoice_id = t.tax_doc_id      
      AND    ii.company = t.company 
      AND    ii.invoice_id = t.tax_doc_id
      AND    ii.vat_code = t.tax_code;    
   
   CURSOR get_tax_doc_offset_credit IS 
      SELECT ii.tax_doc_id, it.debit_invoice_id  adv_inv_ref, ii.vat_code  tax_code, it.prepay_tax_base, it.prepay_tax_amount, ii.prepay_tax_base offset_amount, ii.prepay_tax_amount tax_amount
      FROM   invoice_item_tab ii, invoice_item_tab it 
      WHERE  ii.company    = company_ 
      AND    ii.invoice_id = invoice_id_
      AND    ii.company    = it.company 
      AND    ii.tax_doc_id = it.invoice_id
      AND    ii.vat_code   = it.vat_code;
   
   CURSOR get_credit_invoice_id IS
         SELECT invoice_id
         FROM   invoice_tab 
         WHERE  company = company_
         AND    credit_invoice_id = invoice_id_;
BEGIN 
   curr_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_DOCS');
   END IF;   
   curr_rate_ := Invoice_API.Get_Curr_Rate(company_, invoice_id_);
   IF (tax_doc_) THEN      
      FOR rec_ IN get_tax_doc LOOP            
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_DOC');         
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE', rec_.vat_code);      
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_BASE', rec_.prepay_tax_base);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_TAX', rec_.prepay_tax_amount);               
            Currency_Amount_API.Calc_Amount ( base_acc_crrr_, company_, curr_code_,  curr_rate_, rec_.prepay_tax_base );
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_BASE_ACC_CURR', base_acc_crrr_);            
            Currency_Amount_API.Calc_Amount ( tax_acc_crrr_, company_, curr_code_,  tax_curr_rate_, rec_.prepay_tax_amount );
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_TAX_ACC_CURR', tax_acc_crrr_);   
            Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_DOC');      
         END IF;
         row_no_ := row_no_ + 1;    
         IF (do_rs_) THEN
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no, &VAT_CODE, &TAX_DOC_BASE, &TAX_DOC_TAX, &TAX_DOC_BASE_ACC_CURR, &TAX_DOC_TAX_ACC_CURR)
            VALUES
               (result_key_, row_no_, parent_row_no_, rec_.vat_code, rec_.prepay_tax_base, rec_.prepay_tax_amount, base_acc_crrr_, tax_acc_crrr_);        
         END IF;   
      END LOOP;   
   ELSE    
      IF (debit_inv_id_ IS NULL) THEN
         OPEN get_credit_invoice_id;
         FETCH get_credit_invoice_id INTO credit_invoice_id_;
         CLOSE get_credit_invoice_id;         
      END IF;
      
      IF (debit_inv_id_ IS NULL AND credit_invoice_id_ IS NULL) THEN               
         FOR rec_ IN get_tax_doc_offset LOOP   
            Invoice_API.Get_Series_And_No(series_id_, invoice_no_, company_, rec_.tax_doc_id);
            Invoice_API.Get_Series_And_No(adv_series_id_, adv_invoice_no_, company_, rec_.adv_inv_ref);
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_DOC');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_NO', series_id_ ||' '||invoice_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ADV_INVOICE_NO', adv_series_id_ ||' '||adv_invoice_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE', rec_.tax_code);      
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_BASE', rec_.prepay_tax_base);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_TAX', rec_.prepay_tax_amount);  
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_BASE', rec_.offset_amount - rec_.tax_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_TAX', rec_.tax_amount);                          
               Currency_Amount_API.Calc_Amount ( base_acc_crrr_, company_, curr_code_,  curr_rate_, rec_.prepay_tax_base );
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_BASE_ACC_CURR', base_acc_crrr_);            
               Currency_Amount_API.Calc_Amount ( tax_acc_crrr_, company_, curr_code_,  tax_curr_rate_, rec_.prepay_tax_amount );
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_TAX_ACC_CURR', tax_acc_crrr_);                           
               Currency_Amount_API.Calc_Amount ( matched_base_acc_crrr_, company_, curr_code_,  curr_rate_, (rec_.offset_amount - rec_.tax_amount));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_BASE_ACC_CURR', matched_base_acc_crrr_ );            
               Currency_Amount_API.Calc_Amount ( matched_tax_acc_crrr_, company_, curr_code_,  tax_curr_rate_, rec_.tax_amount );
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_TAX_ACC_CURR', matched_tax_acc_crrr_ );               
               Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_DOC');      
            END IF;
            row_no_ := row_no_ + 1;    
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &OT_INVOICE_NO, &AD_INVOICE_NO, &VAT_CODE, 
                  &MATCHED_TAX_DOC_BASE, &MATCHED_TAX_DOC_TAX, &MATCHED_TAX_DOC_BASE_ACC_CURR, &MATCHED_TAX_DOC_TAX_ACC_CURR,
                  &TAX_DOC_BASE, &TAX_DOC_TAX, &TAX_DOC_BASE_ACC_CURR, &TAX_DOC_TAX_ACC_CURR)
               VALUES
                  (result_key_, row_no_, parent_row_no_, series_id_ ||' '||invoice_no_, adv_series_id_ ||' '||adv_invoice_no_, rec_.tax_code, 
                  rec_.offset_amount - rec_.tax_amount, rec_.tax_amount, matched_base_acc_crrr_, matched_tax_acc_crrr_, 
                  rec_.prepay_tax_base, rec_.prepay_tax_amount, base_acc_crrr_, tax_acc_crrr_);                
            END IF;   
         END LOOP;      
      ELSE 
         -- credit matching invoice
         FOR rec_ IN get_tax_doc_offset_credit LOOP   
            Invoice_API.Get_Series_And_No(series_id_, invoice_no_, company_, rec_.tax_doc_id);
            Invoice_API.Get_Series_And_No(adv_series_id_, adv_invoice_no_, company_, rec_.adv_inv_ref);
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_DOC');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_NO', series_id_ ||' '||invoice_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ADV_INVOICE_NO', adv_series_id_ ||' '||adv_invoice_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE', rec_.tax_code);      
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_BASE', rec_.prepay_tax_base);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_TAX', rec_.prepay_tax_amount);  
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_BASE', rec_.offset_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_TAX', rec_.tax_amount);                          
               Currency_Amount_API.Calc_Amount ( base_acc_crrr_, company_, curr_code_,  curr_rate_, rec_.prepay_tax_base );
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_BASE_ACC_CURR', base_acc_crrr_);            
               Currency_Amount_API.Calc_Amount ( tax_acc_crrr_, company_, curr_code_,  tax_curr_rate_, rec_.prepay_tax_amount );
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_DOC_TAX_ACC_CURR', tax_acc_crrr_);                           
               Currency_Amount_API.Calc_Amount ( matched_base_acc_crrr_, company_, curr_code_,  curr_rate_, rec_.offset_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_BASE_ACC_CURR', matched_base_acc_crrr_ );            
               Currency_Amount_API.Calc_Amount ( matched_tax_acc_crrr_, company_, curr_code_,  tax_curr_rate_, rec_.tax_amount );
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MATCHED_TAX_DOC_TAX_ACC_CURR', matched_tax_acc_crrr_ );               
               Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_DOC');      
            END IF;
            row_no_ := row_no_ + 1;    
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &OT_INVOICE_NO, &AD_INVOICE_NO, &VAT_CODE, 
                  &MATCHED_TAX_DOC_BASE, &MATCHED_TAX_DOC_TAX, &MATCHED_TAX_DOC_BASE_ACC_CURR, &MATCHED_TAX_DOC_TAX_ACC_CURR,
                  &TAX_DOC_BASE, &TAX_DOC_TAX, &TAX_DOC_BASE_ACC_CURR, &TAX_DOC_TAX_ACC_CURR)
               VALUES
                  (result_key_, row_no_, parent_row_no_, series_id_ ||' '||invoice_no_, adv_series_id_ ||' '||adv_invoice_no_, rec_.tax_code, 
                  rec_.offset_amount - rec_.tax_amount, rec_.tax_amount, matched_base_acc_crrr_, matched_tax_acc_crrr_, 
                  rec_.prepay_tax_base, rec_.prepay_tax_amount, base_acc_crrr_, tax_acc_crrr_);                
            END IF;   
         END LOOP;      
      END IF;
   END IF;
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_DOCS');
   END IF;      
END Ins_Tax_Doc_Det___;   
-----------------------------------------------------------------------------
-- Purpose: Generate Customer Invoice Report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                    NUMBER;
   invoice_id_                    NUMBER;
   order_no_                      VARCHAR2(12);
   row_no_                        NUMBER := 1;
   customer_note_id_              NUMBER;
   parent_row_no_                 NUMBER;

   phrases_                       VARCHAR2(2000);
   page_footer_1_                 VARCHAR2(2000);
   page_footer_2_                 VARCHAR2(2000);
   page_footer_3_                 VARCHAR2(2000);
   page_footer_4_                 VARCHAR2(2000);
   bill_addr_1_                   VARCHAR2(100);
   bill_country_                  VARCHAR2(50);
   check_delivery_country_        VARCHAR2(50);
   deliv_country_                 VARCHAR2(50);   
   print_tax_in_alternative_curr_ BOOLEAN;
   cust_del_add_same_country_     BOOLEAN;
   vat_registered_same_country_   BOOLEAN;
   vat_curr_amount_               NUMBER;
   net_curr_amount_               NUMBER;
   gross_curr_amount_             NUMBER;
   fee_amount_                    NUMBER;
   fee_vat_amount_                NUMBER;
   round_amount_                  NUMBER;
   tax_round_amount_              NUMBER;
   eur_vat_curr_amount_           NUMBER;
   eur_net_curr_amount_           NUMBER;
   eur_gross_curr_amount_         NUMBER;
   contract_                      VARCHAR2(5);
   contract_description_          VARCHAR2(100);
   country_code_                  VARCHAR2(3);
   note_id_                       NUMBER;
   language_code_                 VARCHAR2(4);
   archive_notes_                 VARCHAR2(200);
   translated_paytermdesc_        VARCHAR2(100);
   invoice_type_                  VARCHAR2(20);
   
   tax_id_no_                     VARCHAR2(50);
   forward_agent_                 VARCHAR2(100);
   deliv_addr_id_                 VARCHAR2(100);
   ship_country_                  VARCHAR2(50);
   invoice_date_                  DATE;
   curr_code_                     VARCHAR2(3);
   curr_rate_                     NUMBER;
   order_date_                    DATE;
   base_curr_code_                VARCHAR2(3);
   parallel_curr_code_            VARCHAR2(3);
   company_                       VARCHAR2(20);

   sub_total_amount_              NUMBER := 0;
   total_charge_group_vat_sum_    NUMBER := 0;
   total_charge_sum_              NUMBER := 0;
   charge_group_desc_             VARCHAR2(35);
   charge_type_desc_              VARCHAR2(2000);
   charge_type_doc_text_          VARCHAR2(2000);
   charge_row_doc_text_           VARCHAR2(2000);
   charge_group_sum_              NUMBER := 0;
   old_charge_group_              VARCHAR2(25) := NULL;
   
   charge_group_desc_rec_         Sales_Charge_Group_Desc_API.Public_Rec;
   charge_type_desc_rec_          Sales_Charge_Type_Desc_API.Public_Rec;
   rma_charge_rec_                Return_Material_Charge_API.Public_Rec;
   co_charge_rec_                 Customer_Order_Charge_API.Public_Rec;
   charge_type_rec_               Sales_Charge_Type_API.Public_Rec;
   print_charge_type_db_          VARCHAR2(20);
   charge_type_                   VARCHAR2(25);
   charge_row_note_id_            NUMBER;
   charge_amount_                 NUMBER;
   charged_qty_                   NUMBER;
   charge_sales_unit_meas_        VARCHAR2(30);
   stage_notes_                   VARCHAR2(2000);
   vat_percentage_                NUMBER;
   copy_text_                     VARCHAR2(20);
   document_code_                 VARCHAR2(3);

   -- Note : declarations for printing characteristics
   parent_row_no2_                NUMBER := 0;
   char_rec_                      Characteristic_Printout_API.Public_Rec;
   print_config_id_               NUMBER := 0;
   count_date_                    NUMBER;
   several_value_                 VARCHAR2(2000);
   count_date_package_            NUMBER;

-- Note : StreamServe start
   -- Note : Streamserve variables
   customer_fax_                  VARCHAR2(200);
   customer_email_                VARCHAR2(200);
   printer_flag_                  VARCHAR2(1);
   fax_flag_                      VARCHAR2(1);
   email_flag_                    VARCHAR2(1);
   user_email_                    VARCHAR2(250);
   user_file_dir_                 VARCHAR2(250);
   -- Note : StreamServe stop
-- Chg MBrant 6/21/21    
-- Rmv   description_                   VARCHAR2(100);   
   description_                   VARCHAR2(2000); 

   logotype_                      VARCHAR2(100);
   company_name_                  VARCHAR2(100);
   customer_po_no_                VARCHAR2(50);
   
   -- Note : Condition Code
   condition_print_               VARCHAR2(5);
   header_note_id_                NUMBER;
   -- Note : For Argentinian Layout      
   party_                         VARCHAR2(200);
   numeration_group_              VARCHAR2(100);
   comp_addr1_                    VARCHAR2(200);
   comp_addr2_                    VARCHAR2(200);
   comp_addr3_                    VARCHAR2(200);
   comp_addr4_                    VARCHAR2(200);
   comp_addr5_                    VARCHAR2(200);
   comp_addr6_                    VARCHAR2(200);
   comp_zip_                      VARCHAR2(200);
   comp_country_                  VARCHAR2(200);
   comp_phone_                    VARCHAR2(200);
   comp_zip_country_              VARCHAR2(400);
   comp_state_                    VARCHAR2(35);
   comp_addr_id_                  COMPANY_ADDRESS_PUB.address_id%TYPE;
   salesman_                      VARCHAR2(200);
   salesman_id_                   VARCHAR2(20);
   salesman_desc_                 VARCHAR2(100);
   region_                        VARCHAR2(35);
   district_                      VARCHAR2(35);
   region_district_               VARCHAR2(200);   
   customer_state_                VARCHAR2(35);
   authorization_id_              VARCHAR2(30);
   auth_id_expire_date_           DATE;
   activity_start_date_           DATE;
   start_month_year_              VARCHAR2(20);
   comp_tax_id_number_            VARCHAR2(50);
   cust_tax_id_number_            VARCHAR2(50);
   cust_tax_liability_            VARCHAR2(20);
   comp_tax_liability_            VARCHAR2(20);
   numeration_                    VARCHAR2(100);
   invoice_reference_             VARCHAR2(100);
   our_id_at_tax_off_             VARCHAR2(20);
   cust_number_name_              VARCHAR2(200);
   
   invoice_copy_no_               NUMBER;
   invoice_copy_label_            VARCHAR2(200);
   customer_no_                   &VIEW..customer_no%TYPE;
   pay_term_base_date_            DATE;
   comp_register_code_            VARCHAR2(10);
   cust_register_code_            VARCHAR2(10);  
   
   document_address_id_           CUST_ORD_CUSTOMER_ADDRESS_PUB.addr_no%TYPE;
   doc_add_state_code_            VARCHAR2(35);
   incl_tax_amount_in_price_      VARCHAR2(5);
   fee_type_                      VARCHAR2(10);
   fee_rate_                      NUMBER;   
   tax_amount_at_inv_print_       VARCHAR2(20);
   
   sub_total_                     NUMBER := 0;
   sub_total_gross_               NUMBER := 0;
   sub_total_with_charges_        NUMBER := 0;
   total_tax_                     NUMBER := 0;
   total_                         NUMBER := 0;
   block_                         VARCHAR2(2000);
   pay_method_desc_               VARCHAR2(2000);
   due_date_                      DATE;
   fee_amount_tax_                NUMBER := 0;
   fee_amount_ar_                 NUMBER := 0;
   charge_amount_tax_             NUMBER := 0;
   temp_charge_amount_            NUMBER := 0;
   temp_charge_amount_incl_tax_   NUMBER := 0;
   comp_city_                     VARCHAR2(35);
   comp_city_name_                VARCHAR2(100);
   comp_city_desc_                VARCHAR2(140);
   comp_state_name_               VARCHAR2(100);
   comp_state_desc_               VARCHAR2(140);
   comp_county_                   VARCHAR2(35);
   cust_tax_id_no_                VARCHAR2(70);
   comp_tax_id_no_                VARCHAR2(70);
   charge_net_curr_amount_        NUMBER := 0;
   customer_city_                 VARCHAR2(35);
   customer_city_name_            VARCHAR2(100);
   customer_city_desc_            VARCHAR2(140);
   customer_state_name_           VARCHAR2(100);
   customer_state_desc_           VARCHAR2(140);
   customer_zip_code_             VARCHAR2(35);
   customer_zip_country_          VARCHAR2(240);
   customer_county_               VARCHAR2(35);
   cust_liability_desc_           VARCHAR2(200);
   cust_tax_liability_desc_       VARCHAR2(225);
   comp_liability_desc_           VARCHAR2(200);
   comp_tax_liability_desc_       VARCHAR2(225);
   report_type_                   VARCHAR2(2);

   --- Advance invoice
   tot_paid_in_advance_           NUMBER;
   tot_pre_invoiced_              NUMBER;
   rem_unconsumed_advance_        NUMBER;
   rem_amount_to_paid_            NUMBER;
   no_of_adv_invoices_            NUMBER;
   print_date_                    DATE;
   tot_ad_pay_matched_amount_     NUMBER;
   ivc_amount_tobe_paid_          NUMBER;

   do_xml_                        BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                           CLOB;
   package_name_                  VARCHAR2(100) := 'CUSTOMER_ORDER_IVC_REP';
   exist_charges_                 NUMBER := &FALSE;
   pagefoot_rec1_                 pagefoot_type;
   pagefoot_rec2_                 pagefoot_type;
   pagefoot_rec3_                 pagefoot_type;
   pagefoot_rec4_                 pagefoot_type;
   
   company_country_db_            VARCHAR2(2); 
   
   addr_rec_                      Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   debit_inv_ref_                 VARCHAR2(70);
   
   print_tax_db_                  VARCHAR2(1);
   cust_print_tax_                VARCHAR2(60);

   total_chg_tax_pct_             NUMBER;
   charge_incl_tax_               NUMBER;
   charge_incl_tax_total_         NUMBER;
   tax_invoice_param_             NUMBER;
   tax_invoice_type_              NUMBER;
   inv_series_and_no_             VARCHAR2(100);
   invoice_date_str_              VARCHAR2(15);
   valid_from_                    DATE;
   valid_until_                   DATE;
   count_all_                     NUMBER;
   count_discount_                NUMBER;
   header_print_control_code_     VARCHAR2(10);
   print_adv_pay_on_cu_inv_       VARCHAR2(15);
   offset_amount_excl_tax_        NUMBER;
   offset_amount_incl_tax_        NUMBER;
   tax_percentage_                NUMBER;
   tax_amount_                    NUMBER;
   
   is_rs_                         VARCHAR2(5);
   is_xml_                        VARCHAR2(5);
   debit_inv_rec_                 Customer_Order_Inv_Head_API.Public_Rec;
   debit_inv_id_                  NUMBER;
   debit_payment_                 NUMBER;
   debit_tax_                     NUMBER;
    
   note_text_tab_                 Document_Text_API.Note_Text_Table;

   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   bill_addr_2_                   address_rec_.address1%TYPE;
   bill_addr_3_                   address_rec_.address2%TYPE;
   bill_addr_4_                   address_rec_.address3%TYPE;
   bill_addr_5_                   address_rec_.address4%TYPE;
   bill_addr_6_                   address_rec_.address5%TYPE;
   bill_addr_7_                   address_rec_.address6%TYPE;
   bill_addr_8_                   address_rec_.address7%TYPE;
   bill_addr_9_                   address_rec_.address8%TYPE;
   bill_addr_10_                  address_rec_.address9%TYPE;
   bill_addr_11_                  address_rec_.address10%TYPE;
   ship_addr_2_                   address_rec_.address1%TYPE;
   ship_addr_3_                   address_rec_.address2%TYPE;
   ship_addr_4_                   address_rec_.address3%TYPE;
   ship_addr_5_                   address_rec_.address4%TYPE;
   ship_addr_6_                   address_rec_.address5%TYPE;
   ship_addr_7_                   address_rec_.address6%TYPE;
   ship_addr_8_                   address_rec_.address7%TYPE;
   ship_addr_9_                   address_rec_.address8%TYPE;
   ship_addr_10_                  address_rec_.address9%TYPE;
   ship_addr_11_                  address_rec_.address10%TYPE;
   line_ship_addr_2_              address_rec_.address1%TYPE;
   line_ship_addr_3_              address_rec_.address2%TYPE;
   line_ship_addr_4_              address_rec_.address3%TYPE;
   line_ship_addr_5_              address_rec_.address4%TYPE;
   line_ship_addr_6_              address_rec_.address5%TYPE;
   line_ship_addr_7_              address_rec_.address6%TYPE;
   line_ship_addr_8_              address_rec_.address7%TYPE;
   line_ship_addr_9_              address_rec_.address8%TYPE;
   line_ship_addr_10_             address_rec_.address9%TYPE;
   line_ship_addr_11_             address_rec_.address10%TYPE;

   original_                      VARCHAR2(5);

   item_sign_                     NUMBER := 1;
   prel_update_allowed_           VARCHAR2(5);
   correction_text_               VARCHAR2(20);
   count_                         NUMBER := 1;
   tax_gross_amount_              NUMBER;
   corr_gross_curr_amount_        NUMBER;
   corr_fee_amount_               NUMBER;
   corr_tax_base_amount_          NUMBER;
   corr_round_amount_             NUMBER;
   corr_title_                    VARCHAR2(10);
   tax_code_fee_amount_           NUMBER;
   tax_amount_disc_               NUMBER;
   tax_per_tax_code_              NUMBER;

   tax_base_cre_amt_              NUMBER;
   tax_base_deb_amt_              NUMBER;
   tax_code_cre_fee_amount_       NUMBER;
   tax_code_deb_fee_amount_       NUMBER;

   corr_round_amount_cre_         NUMBER;
   corr_round_amount_deb_         NUMBER;

   pre_net_curr_amount_           NUMBER := 0;
   pre_vat_curr_amount_           NUMBER := 0;
   pre_gross_curr_amount_         NUMBER := 0;  
   
   simulated_payment_plan_        Invoice_API.Simulated_Pay_Plan_Array;
   installment_count_             NUMBER;
   has_adv_inv_                   VARCHAR2(5);  

   report_foot_                   VARCHAR2(2000);  
   cust_ref_name_                 VARCHAR2(100);
   cust_ref_desc_                 VARCHAR2(100);

   euro_company_                  VARCHAR2(10);
   currency_rate_type_            VARCHAR2(10);
   counter_                       NUMBER;   
   pos_                           NUMBER;
   grp_sum_incl_tax_              NUMBER := 0;
   sub_total_incl_tax_            NUMBER := 0;
   default_language_              VARCHAR2(2) := NULL;
   tax_fee_base_amount_           NUMBER;
   output_code_                   VARCHAR2(10);
   base_net_curr_amount_          NUMBER; 
   selected_alternative_curr_     VARCHAR2(20);
   base_vat_sum_                  NUMBER;
   customer_order_rowkey_         VARCHAR2(50);
   rma_rowkey_                    VARCHAR2(50);
   rental_installed_              VARCHAR2(5);
   display_co_lines_              VARCHAR2(5);
   display_rental_lines_          VARCHAR2(5);
   prel_series_id_                VARCHAR2(20);
   tot_tax_amount_                NUMBER;
   cor_tot_tax_amount_            NUMBER;
   tax_table_                     Source_Tax_Item_API.source_tax_table;
   is_zero_tax_amount_            VARCHAR2(5);
   tax_code_rec_                  Statutory_Fee_API.Public_Rec;
   source_ref_type_db_   CONSTANT VARCHAR2(100) := Tax_Source_API.DB_INVOICE;
   rma_rec_                       Return_Material_API.Public_Rec;
       
   -- DIS003 begin
   pay_addr_id_                   VARCHAR2(20);
   comppayaddr1_                  VARCHAR2(200);
   comppayaddr2_                  VARCHAR2(200);
   comppayaddr3_                  VARCHAR2(200);
   comppayaddr4_                  VARCHAR2(200);
   comppayaddr5_                  VARCHAR2(200);
   comppayaddr6_                  VARCHAR2(200);
   comppayaddr7_                  VARCHAR2(200);
   loc_deliveries_                VARCHAR2(500);  -- Bug 135523, length set to 500
   loc_tax_character_             VARCHAR2(20);
   compaddr1_                     VARCHAR2(200);
   compaddr2_                     VARCHAR2(200);
   compaddr3_                     VARCHAR2(200);
   compaddr4_                     VARCHAR2(200);
   compaddr5_                     VARCHAR2(200);
   compaddr6_                     VARCHAR2(200);
   compaddr7_                     VARCHAR2(200);
   loc_show_subtotal_             BOOLEAN := TRUE;
   loc_charge_group_vat_sum_      NUMBER :=0;
   loc_sub_total_tax_amount_      NUMBER := 0;
   loc_show_sub_total_items_      VARCHAR2(5);
   loc_base_net_curr_amount_      NUMBER; 
   tax_char_on_invoice_enabled_   VARCHAR2(1);
   -- DIS003 end
   -- gelr:hu_vat_control_statement, begin 
   hu_vat_control_statement_enabled_       VARCHAR2(20);
   -- gelr:hu_vat_control_statement, end 
   -- gelr:tax_exemption_certify, begin
   cig_code_                      VARCHAR2(10);
   cup_code_                      VARCHAR2(15);
   tax_exemption_certify_enabled_ VARCHAR2(30);
   show_installment_block_        BOOLEAN := FALSE;
   cert_no_                       CUSTOMER_DEL_TAX_EXEMPT_TAB.tax_exemption_cert_no%TYPE;
   jurisdiction_                  CUSTOMER_DEL_TAX_EXEMPT_TAB.certificate_jurisdiction%TYPE;
   -- gelr:additional_tax_numbers, bug 148523, begin 
   -- gelr:in_hsn_sac_codes, bug 148523, begin
   cust_address_                  VARCHAR2(2000);
   cust_document_gstin_           VARCHAR2(50);
   cust_delivery_gstin_           VARCHAR2(50);
   use_buyer_doc_addr_            VARCHAR2(05);
   company_document_addr_         VARCHAR2(4000);
   company_delivery_addr_         VARCHAR2(4000);   
   cust_delivery_pan_             VARCHAR2(50);
   company_gstin_                 VARCHAR2(50);
   company_pan_                   VARCHAR2(50);
   -- gelr:additional_tax_numbers, bug 148523, end
   -- gelr:in_hsn_sac_codes, bug 148523, end
       
   -- MBrant 6/3/2020
   total_weight_                  NUMBER := 0;   
   
   -- MBrant 6/9/2020
   cust_dft_lang_cd_              VARCHAR2(200);
   
   -- Added MBrant 6/2/2020
   cc_first_name_                 VARCHAR2(2000);
   cc_last_name_                  VARCHAR2(2000);
   cc_address_line_               VARCHAR2(2000);
   cc_city_                       VARCHAR2(2000); 
   cc_state_                      VARCHAR2(2000);
   cc_zip_code_                   VARCHAR2(2000);
   cc_country_                    VARCHAR2(2000);  
   cc_email_address_              VARCHAR2(2000);
   
   -- MBrant 9/28/20
   coordinator_phone_             VARCHAR2(50);  
   
    -- MBrant 10/05/20
    pay_addr_name_                VARCHAR2(2000);  
    pay_address_1_                VARCHAR2(2000);
    pay_address_2_                VARCHAR2(2000);
    pay_address_3_                VARCHAR2(2000);
    pay_address_4_                VARCHAR2(2000);
    pay_address_5_                VARCHAR2(2000);
    pay_address_6_                VARCHAR2(2000);
    pay_addr_zipcode_             VARCHAR2(2000);
    pay_addr_city_                VARCHAR2(2000);
    pay_addr_county_              VARCHAR2(2000);
    pay_addr_state_               VARCHAR2(2000);
    pay_addr_country_             VARCHAR2(2000);
    pay_addr_country_code_        VARCHAR2(2000);
    
   pay_addr_1_                    VARCHAR2(100);
   pay_addr_rec_                  Address_Presentation_API.Address_Rec_Type;
   pay_addr_2_                    pay_addr_rec_.address1%TYPE;
   pay_addr_3_                    pay_addr_rec_.address2%TYPE;
   pay_addr_4_                    pay_addr_rec_.address3%TYPE;
   pay_addr_5_                    pay_addr_rec_.address4%TYPE;
   pay_addr_6_                    pay_addr_rec_.address5%TYPE;
   pay_addr_7_                    pay_addr_rec_.address6%TYPE;
   pay_addr_8_                    pay_addr_rec_.address7%TYPE;
   pay_addr_9_                    pay_addr_rec_.address8%TYPE;
   pay_addr_10_                   pay_addr_rec_.address9%TYPE;
   pay_addr_11_                   pay_addr_rec_.address10%TYPE;
   pay_country_                   VARCHAR2(2000);    
   
   -- MBrant 02/04/21
   payment_method_code_           VARCHAR2(2000); 
   payment_method_ln_             VARCHAR2(2000); 
   bank_account_ln_               VARCHAR2(2000);
   bank_account_txt_              VARCHAR2(2000);
   bic_code_ln_                   VARCHAR2(2000); 
   
   -- MBrant 02/06/21
   create_jinsui_invoice_         VARCHAR2(200); 
   
   -- MBrant 6/14/21 
   harmonize_code_                VARCHAR2(2000); 
   
     -- MBrant 2/15/22  Supplier Shipped From Address              
   supplier_name_                 VARCHAR2(2000);
   supplier_address_1_            VARCHAR2(2000); 
   supplier_address_2_            VARCHAR2(2000); 
   supplier_address_3_            VARCHAR2(2000); 
   supplier_address_4_            VARCHAR2(2000); 
   supplier_address_5_            VARCHAR2(2000); 
   supplier_address_6_            VARCHAR2(2000); 
   supplier_address_7_            VARCHAR2(2000);
   supplier_addr_city_            VARCHAR2(2000); 
   supplier_addr_state_           VARCHAR2(2000); 
   supplier_addr_county_          VARCHAR2(2000);   
   supplier_addr_zip_             VARCHAR2(2000); 
   supplier_addr_country_         VARCHAR2(2000);  
   supplier_addr_country_code_    VARCHAR2(2000);  
   supplier_addr_rec_             Address_Presentation_API.Address_Rec_Type;
   supplier_addr_2_               supplier_addr_rec_.address1%TYPE;
   supplier_addr_3_               supplier_addr_rec_.address2%TYPE;
   supplier_addr_4_               supplier_addr_rec_.address3%TYPE;
   supplier_addr_5_               supplier_addr_rec_.address4%TYPE;
   supplier_addr_6_               supplier_addr_rec_.address5%TYPE;
   supplier_addr_7_               supplier_addr_rec_.address6%TYPE;
   supplier_addr_8_               supplier_addr_rec_.address7%TYPE;
   supplier_addr_9_               supplier_addr_rec_.address8%TYPE;
   supplier_addr_10_              supplier_addr_rec_.address9%TYPE;
   supplier_addr_11_              supplier_addr_rec_.address10%TYPE;
   supplier_addr_1_               VARCHAR2(2000);   
   supplier_country_              VARCHAR2(2000);      
   -- End Mod MBrant 2/15/22
   
      
   test_address_                  VARCHAR2(4000); 
   keep_blank_field_              BOOLEAN := FALSE;
   pay_address_record_            VARCHAR2(2000); 
   -- End Mod --    
   
      
     -- MBrant 10/05/20 
  CURSOR get_pay_addr IS
   SELECT  ci.name
       ,ci.address1 
       ,ci.address2
       ,ci.address3
       ,ci.address4
       ,ci.address5
       ,ci.address6
       ,ci.zip_code
       ,ci.city
       ,ci.county
       ,ci.state
       ,ci.country
   FROM customer_order_inv_head coi, customer_info_address_tab ci, customer_info_address_type_tab cit 
   WHERE    coi.invoice_id   = invoice_id_
        AND ci.customer_id   = coi.IDENTITY 
        AND cit.address_id   = ci.address_id 
        AND cit.customer_id  = ci.customer_id 
        AND cit.address_type_code = 'PAY' 
        AND NVL(cit.def_address,'FALSE') = 'TRUE'
        FETCH FIRST ROW ONLY;  
   -- End Mod -- 
   
-- Add Mod MBrant 2/15/2022
   CURSOR get_supplier_addr IS
      SELECT 
            NVL(Supplier_Info_Address_API.Get_Name(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')   
           ,NVL(Supplier_Info_Address_API.Get_Address1(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'') 
           ,NVL(Supplier_Info_Address_API.Get_Address2(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')    
           ,NVL(Supplier_Info_Address_API.Get_Address3(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')    
           ,NVL(Supplier_Info_Address_API.Get_Address4(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')    
           ,NVL(Supplier_Info_Address_API.Get_Address5(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')  
           ,NVL(Supplier_Info_Address_API.Get_Address6(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')
           ,NVL(Supplier_Info_Address_API.Get_City(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')  
           ,NVL(Supplier_Info_Address_API.Get_State(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'') 
           ,NVL(Supplier_Info_Address_API.Get_Zip_Code(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'') 
           ,NVL(Supplier_Info_Address_API.Get_County(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'') 
           ,NVL(Supplier_Info_Address_API.Get_Country(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')   
           ,NVL(Supplier_Info_Address_API.Get_Country_Code(col.vendor_no,Supplier_Info_Address_API.Get_Id_By_Type(col.vendor_no, 'Delivery')),'')               
      FROM customer_order_inv_item coi, customer_order_line_tab col
      WHERE coi.order_no      = col.order_no       and 
            coi.line_no       = col.line_no        and
            coi.release_no    = col.rel_no         and
            coi.line_item_no  = col.line_item_no   and 
            coi.invoice_id    = invoice_id_        and
            coi.company       = company_           and
   -- Rmv MBrant 3/22/22   col.supply_code   = 'IPD'              and
            col.vendor_no     IS NOT NULL  
      FETCH FIRST ROW ONLY;        
   -- End Mod 2/15/2022
   
   -- Bug 129639 Frwopl, Simplified cursor get_tax_exempt_info, added parameter supply_country_; Begin
   CURSOR get_tax_exempt_info (customer_ VARCHAR2, 
                               address_id_ VARCHAR2, 
                               supply_country_ VARCHAR2,
                               invoice_date_ DATE) IS
      SELECT t.tax_exemption_cert_no      tax_exemption_cert_no,
             t.certificate_jurisdiction   certificate_jurisdiction
      FROM CUSTOMER_DEL_TAX_EXEMPT_TAB t
      WHERE t.company = company_
      AND   t.customer_id = customer_
      AND   t.address_id = address_id_
      AND   t.supply_country = supply_country_
      AND   TRUNC(invoice_date_) BETWEEN TRUNC(t.certification_date) and TRUNC(t.expiration_date);
   -- Bug 129639 Frwopl, End
   -- gelr:tax_exemption_certify, begin, end
      
   -- gelr:prepayment_tax_document, Added adv_inv_ref
   -- Bug 129639 Frwopl, Added supply_country, Begin
   -- gelr:additional_tax_numbers, bug 148523,Added cust_delivery_gstin,cust_document_gstin
   -- Note : head cursor
   CURSOR get_header IS
      SELECT company                   company,
             contract                  contract,
             party_type                party_type,
             creators_reference        order_no,
             order_date                date_entered,
             our_reference             authorize_name,
             identity                  customer_no_pay,
             delivery_identity         customer_no,
             delivery_address_id       delivery_address_id,
             your_reference            cust_ref,
             invoice_address_id        bill_addr_no,
             forward_agent_id          forward_agent_id,
             ship_via                  ship_via_desc,
             label_note                label_note,
             delivery_terms            delivery_terms_desc,
             del_terms_location        del_terms_location,
             pay_term_id               pay_terms,
             pay_term_description      pay_terms_desc,
             curr_rate                 curr_rate,
             currency                  curr_code,
             invoice_no                invoice_no,
             invoice_date              invoice_date,
             invoice_type              invoice_type,
             series_id                 series_id,
             rma_no                    rma_no,
             due_date                  due_date,
             print_date                print_date,
             branch                    branch,
             tax_id_number             tax_id_number,
             tax_id_type               tax_id_type,
             name                      customer_name,
             series_reference          series_reference,
             number_reference          number_reference,
             tax_invoice_number        tax_invoice_number,
             latest_delivery_date      latest_delivery_date,
             advance_invoice           advance_invoice,
             tax_curr_rate             tax_curr_rate,
             currency_rate_type        currency_rate_type,
             supply_country            supply_country,
             use_price_incl_tax_db     use_price_incl_tax_db,
             ncf_reference             ncf_reference,
             shipment_id               shipment_id,
             parallel_curr_rate        parallel_curr_rate,
             objstate                  status,
             wanted_delivery_date      wanted_delivery_date,
             invoice_text              invoice_text,
             correction_reason         correction_reason,
             objkey                    objkey,
             prefix_a                  prefix_a,
             prefix_b                  prefix_b,
             prefix_c                  prefix_c,
             serial_number             serial_number,
             adv_inv_ref               adv_inv_ref,
             org_series_id             org_series_id,
             org_invoice_no            org_invoice_no,
             tax_fulfilment_date       tax_fulfilment_date,
             cust_delivery_gstin       cust_delivery_gstin,
             cust_document_gstin       cust_document_gstin
      FROM   customer_order_inv_head
      WHERE  invoice_id = invoice_id_;
   -- Bug 129639 Frwopl, End

   CURSOR get_header_customer_order IS
      SELECT language_code, note_id, print_control_code, rowkey
      FROM   customer_order_tab
      WHERE  order_no = order_no_;
   
   CURSOR get_rma_header(rma_no_ NUMBER) IS
      SELECT language_code, note_id, rowkey
      FROM   return_material_tab
      WHERE  rma_no = rma_no_;  

   CURSOR get_delivery_info(deliv_no_ IN NUMBER) IS 
      SELECT date_delivered, qty_invoiced
      FROM   customer_order_delivery_tab
      WHERE  deliv_no = deliv_no_
      AND    cancelled_delivery = 'FALSE';

   -- Note : Misc cursor
   CURSOR get_order_no IS
      SELECT order_no
      FROM   customer_order_inv_item
      WHERE  invoice_id = invoice_id_
      AND    company = company_
      AND    line_item_no <= 0;
   
   -- MBrant 6/3/2020
   CURSOR get_part_weight IS 
      SELECT  sum( Inventory_Part_API.Get_Weight_Net(contract, catalog_no) * invoiced_qty )
      FROM   customer_order_inv_item
      WHERE  invoice_id = invoice_id_
      AND    company = company_
      AND    line_item_no <= 0;
   
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Note : Charges cursor
   CURSOR get_charges(prel_update_allowed_ VARCHAR2 ) IS
      SELECT coii.item_id,
             coii.order_no,
             coii.line_no,
             coii.release_no,
             coii.line_item_no,
             coii.charge_seq_no,
             coii.charge_group,
             coii.rma_no,
             coii.rma_charge_no,
             coii.invoiced_qty,
             coii.sale_unit_price,
             coii.unit_price_incl_tax,
             coii.net_curr_amount,
             coii.gross_curr_amount,
             coii.vat_curr_amount,
             coii.vat_code,
             sct.charge_type,
             coii.charge_percent,
             coii.charge_percent_basis,
             sct.rowkey,
             coii.description             
      FROM   customer_order_inv_item coii, sales_charge_type_tab sct, customer_order_charge_tab coc
      WHERE  coii.charge_seq_no IS NOT NULL      
      AND    coc.charge_type = sct.charge_type
      AND    coc.contract = sct.contract
      AND    coc.sequence_no = coii.charge_seq_no
      AND    coc.order_no = coii.order_no
      AND    coii.invoice_id = invoice_id_
      AND    coii.company = company_
      AND    coii.prel_update_allowed = prel_update_allowed_
      AND    coii.rma_no IS NULL
      UNION
      SELECT coii.item_id,
             coii.order_no,
             coii.line_no,
             coii.release_no,
             coii.line_item_no,
             coii.charge_seq_no,
             coii.charge_group,
             coii.rma_no,
             coii.rma_charge_no,
             coii.invoiced_qty,
             coii.sale_unit_price,
             coii.unit_price_incl_tax,
             coii.net_curr_amount,
             coii.gross_curr_amount,
             coii.vat_curr_amount,
             coii.vat_code,
             sct.charge_type,
             coii.charge_percent,
             coii.charge_percent_basis,
             sct.rowkey,
             coii.description             
      FROM   customer_order_inv_item coii, sales_charge_type_tab sct, return_material_charge_tab rmc
      WHERE  coii.rma_charge_no IS NOT NULL      
      AND    rmc.charge_type = sct.charge_type
      AND    rmc.contract = sct.contract
      AND    rmc.rma_charge_no = coii.rma_charge_no
      AND    rmc.rma_no = coii.rma_no
      AND    coii.invoice_id = invoice_id_
      AND    coii.prel_update_allowed = prel_update_allowed_
      ORDER BY charge_group, charge_type, charge_seq_no, rma_charge_no;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   CURSOR get_invoice_line_no(prel_update_allowed_ VARCHAR2, order_no_ VARCHAR2, seq_no_ NUMBER) IS
      SELECT coii.item_id
      FROM   customer_order_inv_item coii
      WHERE  coii.invoice_id = invoice_id_
      AND    coii.company = company_
      AND    coii.charge_seq_no IS NULL
      AND    coii.rma_charge_no IS NULL
      AND    coii.prel_update_allowed = prel_update_allowed_
      AND    EXISTS (SELECT 1  
                     FROM   customer_order_charge_tab coct
                     WHERE  coct.order_no     = order_no_
                     AND    coct.sequence_no  = seq_no_
                     AND    coii.order_no     = coct.order_no
                     AND    coii.line_no      = coct.line_no
                     AND    coii.release_no   = coct.rel_no
                     AND    coii.line_item_no = coct.line_item_no );
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   CURSOR get_vat_sums IS
      SELECT   tax_code, sum(stii.tax_curr_amount) vat_sum_curr, sum(stii.tax_dom_amount) vat_sum_dom, sum(stii.tax_parallel_amount) vat_sum_para
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.invoice_id     = invoice_id_
      AND      stii.source_ref1     = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2     = TO_CHAR(cipui.item_id)      
      AND      stii.source_ref_type_db = source_ref_type_db_
      AND      stii.source_ref3     = '*'
      AND      stii.source_ref4     = '*'
      AND      stii.source_ref5     = '*'
      AND      cipui.prel_update_allowed = prel_update_allowed_
      AND      cipui.company        = company_
      GROUP BY stii.tax_code;

   CURSOR check_real_ship_date   IS
      SELECT count(DISTINCT(TRUNC(date_delivered)))
      FROM   customer_order_delivery_tab cod, customer_order_inv_item  coi, cust_delivery_inv_ref_tab cdi
      WHERE  cod.order_no = coi.order_no
      AND    cod.line_no  = coi.line_no
      AND    cod.rel_no   = coi.release_no
      AND    cod.line_item_no = coi.line_item_no
      AND    coi.objstate != 'Printed'
      AND    coi.invoice_id = invoice_id_
      AND    coi.company    = company_
      AND    coi.company    = cdi.company
      AND    coi.invoice_id = cdi.invoice_id
      AND    coi.item_id    = cdi.item_id
      AND    cod.deliv_no   = cdi.deliv_no
      AND    cod.cancelled_delivery = 'FALSE';

   CURSOR count_ship_dates_rma_no IS
      SELECT COUNT(item_id)
      FROM   customer_order_inv_item
      WHERE  order_no IS NULL
      AND    objstate  != 'Printed'
      AND    invoice_id = invoice_id_ 
      AND    company    = company_;

   CURSOR check_real_ship_date_package IS
      SELECT count(DISTINCT(TRUNC(date_delivered)))
      FROM   customer_order_delivery_tab cod, customer_order_inv_item  coi, cust_delivery_inv_ref_tab cdi
      WHERE  cod.order_no = coi.order_no
      AND    cod.line_no  = coi.line_no
      AND    cod.rel_no   = coi.release_no
      AND    coi.line_item_no = -1
      AND    cod.line_item_no > 0
      AND    coi.objstate != 'Printed'
      AND    coi.invoice_id = invoice_id_ 
      AND    coi.company    = company_
      AND    coi.company    = cdi.company
      AND    coi.invoice_id = cdi.invoice_id
      AND    coi.item_id    = cdi.item_id
      AND    cod.deliv_no   = cdi.deliv_no
      AND    cod.cancelled_delivery = 'FALSE';
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   CURSOR get_tax_code (inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage , tax_type_db, SUM(tax_base_curr_amount) tax_base_curr_amount
      FROM source_tax_item_pub t
      WHERE company     = company_
      AND   source_ref_type_db  = source_ref_type_db_
      AND   source_ref1  = inv_id_
      AND   source_ref3  = '*'
      AND   source_ref4  = '*'
      AND   source_ref5  = '*'
      GROUP BY tax_code, tax_percentage, tax_type_db
      ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');

   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Note : Tax codes of credit invoice lines
   CURSOR get_tax_code_cre (inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage
      FROM source_tax_item_base_pub
      WHERE company     = company_
      AND   source_ref_type_db = source_ref_type_db_
      AND   source_ref1  = inv_id_
      AND   source_ref3 = '*'
      AND   source_ref4 = '*'
      AND   source_ref5 = '*'
      AND   tax_curr_amount < 0 
      GROUP BY tax_code, tax_percentage;

   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Note : Tax codes of debit invoice lines
   CURSOR get_tax_code_deb (inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage
      FROM source_tax_item_base_pub
      WHERE company = company_
      AND   source_ref_type_db  = source_ref_type_db_
      AND   source_ref1  = inv_id_
      AND   source_ref3 = '*'
      AND   source_ref4 = '*'
      AND   source_ref5 = '*'
      AND   tax_curr_amount > 0
      GROUP BY tax_code, tax_percentage;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Note: Get Tax Codes of credit invoice lines for the Correction Invoice. 
   -- Bug 141485, added DECODE to tax_curr_amount (n18 - company bearing tax)
   CURSOR get_tax_code_cre_for_corr (inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(DECODE(i.n18, NULL, tax_curr_amount, 0)) tax_code_tot, tax_percentage, tax_type_db, SUM(tax_base_curr_amount) tax_base_curr_amount
      FROM   source_tax_item_pub stii, cust_invoice_pub_util_item i
      WHERE  stii.company         = company_
      AND    stii.company         = i.company
      AND    stii.source_ref_type_db = source_ref_type_db_
      AND    stii.source_ref1     = inv_id_
      AND    (stii.source_ref1     = TO_CHAR(i.invoice_id)) 
      AND    stii.source_ref2     = TO_CHAR(i.item_id)
      AND    stii.source_ref3     = '*'
      AND    stii.source_ref4     = '*'
      AND    stii.source_ref5     = '*'
      AND    i.prel_update_allowed ='FALSE'      
      GROUP BY tax_code, tax_percentage, tax_type_db
      ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Note: Get Tax Codes of debit invoice lines for the Correction Invoice. 
   -- Bug 141485, added DECODE to tax_curr_amount (n18 - company bearing tax)
   CURSOR get_tax_code_deb_for_corr (inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(DECODE(i.n18, NULL, tax_curr_amount, 0)) tax_code_tot, tax_percentage, tax_type_db,SUM(tax_base_curr_amount) tax_base_curr_amount
      FROM   source_tax_item_pub stii, cust_invoice_pub_util_item i
      WHERE  stii.company         = company_
      AND    stii.company         = i.company
      AND    stii.source_ref_type_db = source_ref_type_db_
      AND    stii.source_ref1     = inv_id_
      AND    stii.source_ref1     = TO_CHAR(i.invoice_id)
      AND    stii.source_ref2     = TO_CHAR(i.item_id)
      AND    stii.source_ref3     = '*'
      AND    stii.source_ref4     = '*'
      AND    stii.source_ref5     = '*'
      AND    i.prel_update_allowed ='TRUE'      
      GROUP BY tax_code, tax_percentage,tax_type_db
      ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');

   CURSOR get_discount_details(customer_ VARCHAR2, installment_id_ NUMBER) IS
      SELECT disc_date, disc_percent
      FROM cust_invoice_pub_util_disc
      WHERE company = company_
      AND identity = customer_
      AND installment_id = installment_id_
      AND invoice_id = invoice_id_;

   CURSOR count_discount_details(customer_ VARCHAR2) IS
      SELECT COUNT(*)
      FROM   cust_invoice_pub_util_disc
      WHERE  company = company_
      AND    identity = customer_
      AND    invoice_id = invoice_id_ ;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   CURSOR exist_charges(prel_update_allowed_ VARCHAR2) IS
      SELECT 1
      FROM  customer_order_inv_item coii
      WHERE (coii.charge_seq_no IS NOT NULL OR coii.rma_charge_no IS NOT NULL)
      AND   coii.invoice_id = invoice_id_
      AND   coii.company    = company_
      AND   coii.prel_update_allowed =  prel_update_allowed_;

   CURSOR get_advance_invoices(print_date_ DATE) IS
      SELECT invoice_no, invoice_id, due_date, net_amount, vat_amount, series_id
      FROM   CUST_INVOICE_PUB_UTIL_HEAD
      WHERE  creators_reference = order_no_
      AND    advance_invoice    = 'TRUE'
      AND    objstate IN ('PaidPosted', 'PartlyPaidPosted') 
      AND    creation_date < print_date_;   

   CURSOR get_other_invoices(print_date_ DATE) IS
      SELECT invoice_no, invoice_id, due_date, net_amount, vat_amount, gross_amount, series_id, invoice_type
      FROM   customer_order_inv_head
      WHERE  creators_reference = order_no_
      AND    NVL(advance_invoice,'FALSE') != 'TRUE'
      AND    invoice_id != invoice_id_
      AND    creation_date < print_date_
      ORDER BY invoice_no, due_date;

   CURSOR get_tax_inv_no(invoice_id_ IN NUMBER) IS
      SELECT tax_invoice_number
      FROM   customer_order_inv_head
      WHERE  invoice_id = invoice_id_
      AND    company    = company_;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   CURSOR get_corr_inv_info (inv_id_ IN VARCHAR2) IS
      SELECT tax_code , tax_percentage, SUM(tax_curr_amount) tax_curr_amount_tot, 
             SUM(tax_dom_amount) tax_dom_amount_tot
      FROM source_tax_item_base_pub t
      WHERE company     = company_
      AND   source_ref_type_db  = source_ref_type_db_
      AND   source_ref1  = inv_id_
      AND   source_ref3  = '*'
      AND   source_ref4  = '*'
      AND   source_ref5  = '*'
      GROUP BY tax_code, tax_percentage;
   
   
   ref_invoice_id_               NUMBER;
   ref_tax_inv_no_               VARCHAR2(50);

   currency_rounding_            NUMBER;
   
   total_discount_amount_        NUMBER;
   total_unit_price_             NUMBER;
   tax_base_amount_              NUMBER;
   tax_base_curr_amount_         NUMBER;
   print_tax_texts_              VARCHAR2(5) := 'FALSE';
   tax_text_                     VARCHAR2(500);
   tax_net_curr_amount_          NUMBER;

   delivery_rec_                 get_delivery_info%ROWTYPE;
   invoice_line_no_              VARCHAR2(4);
   total_disc_amount_piv_         NUMBER;
   -- Bug 141485, start
   tax_base_curr_amount_excl_foc_ NUMBER;
   -- Bug 141485, end
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Bug 141485, fetch tax_base_curr_amount always from source_tax_item_pub (like in other cursors)
   CURSOR get_vat_net_curr(tax_code_ IN VARCHAR2, tax_percentage_ IN NUMBER, currency_rounding_ IN NUMBER, tax_calc_method_ IN VARCHAR2) IS
      SELECT   SUM (ROUND(ABS(cipui.n2 * cipui.n4 * cipui.n3),currency_rounding_) - ROUND(ABS(cipui.net_curr_amount),currency_rounding_)) total_discount_amount,
               SUM (ROUND(ABS(cipui.n2 * cipui.n15 * cipui.n3),currency_rounding_) - ROUND(ABS(cipui.gross_amount),currency_rounding_)) total_disc_amount_piv,
               SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(DECODE(cipui.n18, NULL, stii.tax_base_curr_amount, 0)) tax_base_curr_amount
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.company         = stii.company  
      AND      stii.source_ref_type_db  = source_ref_type_db_ 
      AND      stii.source_ref1      = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2      = TO_CHAR(cipui.item_id)
      AND      stii.source_ref3      = '*'
      AND      stii.source_ref4      = '*'
      AND      stii.source_ref5      = '*'
      AND      stii.tax_code         = tax_code_
      AND      stii.tax_percentage   = tax_percentage_      
      AND      cipui.invoice_id     = invoice_id_
      AND      cipui.company         = company_
      GROUP BY stii.tax_code, stii.tax_percentage;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Bug 141485, added DECODE to tax_base_curr_amount (n18 - company bearing tax)
   -- Bug 141485, added tax_base_curr_amount_excl_foc (c22 - free_of_charge), this value will be used to calculate gross amount (in case of FOC should be 0)
   CURSOR get_vat_net_curr_corr_inv(tax_code_ IN VARCHAR2, currency_rounding_ IN NUMBER) IS
      SELECT   SUM (ROUND(cipui.n2 * cipui.n4 * cipui.n3,currency_rounding_) - ROUND(cipui.net_curr_amount,currency_rounding_)) total_discount_amount,
               SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(DECODE(cipui.n18, NULL, stii.tax_base_curr_amount, 0)) tax_base_curr_amount,
               SUM(DECODE(cipui.c22, 'TRUE', 0, stii.tax_base_curr_amount)) tax_base_curr_amount_excl_foc
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.company         = stii.company  
      AND      stii.source_ref_type_db  = source_ref_type_db_ 
      AND      stii.source_ref1      = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2      = TO_CHAR(cipui.item_id)
      AND      stii.source_ref3      = '*'
      AND      stii.source_ref4      = '*'
      AND      stii.source_ref5      = '*'
      AND      stii.tax_code         = tax_code_      
      AND      cipui.invoice_id     = invoice_id_
      AND      cipui.company         = company_
      GROUP BY stii.tax_code;
      
   CURSOR get_order_data(tax_code_ IN VARCHAR2, currency_rounding_ IN NUMBER) IS
      SELECT   cipui.c1, cipui.c2, cipui.c3, cipui.n1, cipui.n2 
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.company         = stii.company  
      AND      stii.source_ref_type_db  = source_ref_type_db_ 
      AND      stii.source_ref1      = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2      = TO_CHAR(cipui.item_id)
      AND      stii.source_ref3      = '*'
      AND      stii.source_ref4      = '*'
      AND      stii.source_ref5      = '*'
      AND      stii.tax_code         = tax_code_      
      AND      cipui.invoice_id      = invoice_id_      
      AND      cipui.company         = company_;
   
   CURSOR has_free_of_charge_lines(order_no_ IN VARCHAR2) IS
      SELECT 1
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_ 
      AND    free_of_charge = 'TRUE';
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Bug 141485, added DECODE to tax_base_curr_amount (n18 - company bearing tax)
   -- Bug 141485, added tax_base_curr_amount_excl_foc (c22 - free_of_charge), this value will be used to calculate gross amount (in case of FOC should be 0)
   CURSOR get_vat_net_curr_cre(tax_code_ IN VARCHAR2, currency_rounding_ IN NUMBER) IS
      SELECT   SUM (ROUND(ABS(cipui.n2 * cipui.n4 * cipui.n3), currency_rounding_) - ROUND(ABS(cipui.net_curr_amount), currency_rounding_)) total_discount_amount,
               SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(ROUND((NVL(((cipui.n2 * cipui.n13 * cipui.n14 /100)),0) + NVL((cipui.n2 * cipui.n4 * cipui.n3),0)),currency_rounding_)) net_gross_amount,
               SUM(DECODE(cipui.n18, NULL, stii.tax_base_curr_amount, 0)) tax_base_curr_amount,
               SUM(DECODE(cipui.c22, 'TRUE', 0, stii.tax_base_curr_amount)) tax_base_curr_amount_excl_foc
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.invoice_id = invoice_id_
      AND      stii.source_ref1     = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2     = TO_CHAR(cipui.item_id)
      AND      stii.tax_code        = tax_code_
      AND      stii.source_ref_type_db = source_ref_type_db_
      AND      stii.source_ref3     = '*'
      AND      stii.source_ref4     = '*'
      AND      stii.source_ref5     = '*'
      AND      cipui.prel_update_allowed = 'FALSE'
      AND      cipui.company        = company_
      GROUP BY stii.tax_code;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Bug 141485, added DECODE to tax_base_curr_amount (n18 - company bearing tax)
   -- Bug 141485, added tax_base_curr_amount_excl_foc (c22 - free_of_charge), this value will be used to calculate gross amount (in case of FOC should be 0)
   CURSOR get_vat_net_curr_deb(tax_code_ IN VARCHAR2, currency_rounding_ IN NUMBER) IS
      SELECT   SUM (ROUND(ABS(cipui.n2 * cipui.n4 * cipui.n3),currency_rounding_) - ROUND(ABS(cipui.net_curr_amount),currency_rounding_)) total_discount_amount,
               SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(ROUND((NVL(((cipui.n2 * cipui.n13 * cipui.n14 /100)),0) + NVL((cipui.n2 * cipui.n4 * cipui.n3),0)),currency_rounding_)) net_gross_amount,
               SUM(DECODE(cipui.n18, NULL, stii.tax_base_curr_amount, 0)) tax_base_curr_amount,
               SUM(DECODE(cipui.c22, 'TRUE', 0, stii.tax_base_curr_amount)) tax_base_curr_amount_excl_foc
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.invoice_id     = invoice_id_
      AND      stii.source_ref1     = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2     = TO_CHAR(cipui.item_id)
      AND      stii.source_ref_type_db = source_ref_type_db_
      AND      stii.source_ref3 = '*'
      AND      stii.source_ref4 = '*'
      AND      stii.source_ref5 = '*'
      AND      stii.tax_code    = tax_code_
      AND      cipui.prel_update_allowed = 'TRUE'
      AND      cipui.company    = company_
      GROUP BY stii.tax_code;
   
    -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   -- Get the tax base amount in correction invoice.
   CURSOR get_corr_tax_base_amt IS
      SELECT SUM( coii.net_curr_amount ) curr_tax_base_amt
      FROM   customer_order_inv_item coii
      WHERE  coii.company = company_
      AND    coii.invoice_id = invoice_id_
      AND    coii.item_id IN ( SELECT stii.source_ref2
                               FROM   source_tax_item_base_pub stii
                               WHERE  stii.company = coii.company
                               AND    stii.source_ref_type_db = source_ref_type_db_
                               AND    stii.source_ref1 = TO_CHAR(coii.invoice_id)
                               AND    stii.source_ref3 = '*'
                               AND    stii.source_ref4 = '*'
                               AND    stii.source_ref5 = '*');

   CURSOR get_date_range(tax_code_ IN VARCHAR2, invoice_date_str_ IN VARCHAR2 ) IS
      SELECT valid_from, valid_until
      FROM tax_code_texts_tab
      WHERE company = company_
      AND fee_code = tax_code_
      AND valid_from <= TO_DATE(invoice_date_str_,'yyyy/mm/dd')
      AND valid_until >= TO_DATE(invoice_date_str_,'yyyy/mm/dd');
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   CURSOR get_pay_plan_detail(customer_ VARCHAR2) IS
      SELECT payment_method, installment_id
      FROM cust_invoice_pub_util_pay_plan
      WHERE invoice_id = invoice_id_
      AND   company = company_
      AND   identity = customer_;

   CURSOR get_original_records(result_key_ NUMBER) IS
      SELECT * 
      FROM &REPTAB
      WHERE result_key = result_key_;

   CURSOR get_original_records_xml(result_key_ NUMBER) IS
      SELECT * 
      FROM xml_report_data_tab
      WHERE result_key = result_key_;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
  CURSOR get_tax_code_dom_tot(tax_code_ VARCHAR2, inv_id_ IN VARCHAR2) IS
      SELECT SUM(tax_dom_amount) tax_code_dom_tot
      FROM source_tax_item_base_pub
      WHERE company    = company_
      AND   source_ref_type_db = source_ref_type_db_
      AND   source_ref1     = inv_id_
      AND   source_ref3     = '*'
      AND   source_ref4     = '*'
      AND   source_ref5     = '*'
      AND   tax_code        = tax_code_;
		
  
  CURSOR get_company  IS
     SELECT company
     FROM invoice_tab
     WHERE invoice_id = invoice_id_;

   duplicate_original_        VARCHAR2(5);   
   start_pos_                 NUMBER;
   end_pos_                   NUMBER;
   inv_rec_                   Invoice_API.Public_Rec;
   first_result_key_          NUMBER;
   ref_invoice_date_          DATE;
   print_option_              VARCHAR2(10);
   duplicate_                 VARCHAR2(5);
   payment_method_            VARCHAR2(60);
   bank_account_              VARCHAR2(150);   
   bank_account_line_         VARCHAR2(150);
   print_tax_in_alt_curr_     VARCHAR2(30);
   print_amount_verbally_     VARCHAR2(5);
   comp_inv_fee_vat_code_     VARCHAR2(10);
   bank_account_text_         VARCHAR2(2000);
   cor_inv_type_              VARCHAR2(20);
   prepayment_text_           VARCHAR2(20);
   prepayment_exist_          VARCHAR2(5) := 'FALSE';
   lines_exist_               VARCHAR2(5);
   rental_lines_exist_        VARCHAR2(5);
   installment_id_            NUMBER;
   cust_addr_rec_             Customer_Info_Address_API.Public_Rec;
   bic_code_                  VARCHAR2(20);
   supply_country_            VARCHAR2(2); 

   header_order_no_           VARCHAR2(12) := NULL;
   phrase_on_document_tab_    Phrase_On_Document_API.Phrase_Id_Tab; 

   row_                       NUMBER;
   column_title_              Footer_Connection_API.footer_arr;
   column_text_               Footer_Connection_API.footer_arr;
   f_title_                   Footer_Connection_API.t_varchar2;     
   f_text_                    Footer_Connection_API.t_varchar2;
   company_rec_               company_API.Public_Rec; 
   system_footer_field_attr_  VARCHAR2(2000);
   instance_attr_             VARCHAR2(32000);
   dummy_parameter_attr_      VARCHAR2(32000);
   delivery_country_          VARCHAR2(2);
   short_name_                VARCHAR2(80);
   tax_reduction_at_payment_  VARCHAR2(5);
   record_found_              BOOLEAN := FALSE;
   date_of_duplicate_         VARCHAR2(100);
   media_code_                VARCHAR2(30);
   total_gross_amt_in_curr    NUMBER;

   total_discount_per_tax_    NUMBER;
   total_unit_price_per_tax_  NUMBER;  
   base_tax_amt_              NUMBER;
   free_of_chg_lines_exist_   VARCHAR2(5);
   order_line_rec_            Customer_Order_Line_API.Public_Rec;
   free_tax_base_amount_      NUMBER := 0;
   free_total_gross_amt_in_curr_ NUMBER := 0;
   sale_total_gross_amt_in_curr_ NUMBER := 0;
   dummy_                        NUMBER;
   free_of_charge_               BOOLEAN := FALSE;
   free_and_sales_               BOOLEAN := FALSE;
   sales_line_                   BOOLEAN := FALSE;
   tot_pre_inv_deb_corr_         NUMBER  := 0;   
   tot_pre_inv_cre_corr_         NUMBER  := 0;
   pre_consumed_advance_         NUMBER  := 0;
   pre_unconsumed_advance_       NUMBER  := 0;
   advance_consumed_current_     NUMBER  := 0;
   discount_amount_              NUMBER := 0;
   date_of_duplicate_xml_        VARCHAR2(100);
   branch_desc_                  VARCHAR2(200);
   customer_branch_              VARCHAR2(20); 
   external_tax_calc_method_     VARCHAR2(50);
   -- Bug 125747, start
   previous_date_duplicate_   VARCHAR2(32000);
   -- Bug 125747, end 
   
   -- gelr:additional_tax_numbers:INFI9-090, begin
   tax_id_no_text1_           VARCHAR2(20);
   tax_id_no_text2_           VARCHAR2(20);
   tax_id_no_text3_           VARCHAR2(20);
   tax_id_no_text4_           VARCHAR2(20);
   tax_id_no_text5_           VARCHAR2(20);
   tax_id_no_text6_           VARCHAR2(20);
   tax_id_no2_                VARCHAR2(50);
   tax_id_no3_                VARCHAR2(50);
   tax_id_no4_                VARCHAR2(50);
   tax_id_no5_                VARCHAR2(50);
   tax_id_no6_                VARCHAR2(50);
   -- gelr:additional_tax_numbers:INFI9-090, end
   -- gelr:additional_tax_numbers, begin
   additional_tax_numbers_    VARCHAR2(20);
   -- gelr:additional_tax_numbers, end
   -- gelr:digital_signature, begin
   digital_signature_         VARCHAR2(7);
   -- gelr:digital_signature, end
   -- gelr:pt_erp_certification, begin
   document_type_         VARCHAR2(200);
   erp_certificate_       VARCHAR2(20);
   saft_pt_inv_type_      VARCHAR2(20);
   saft_pt_inv_type_desc_ VARCHAR2(20);
   erp_cert_flag_         BOOLEAN := FALSE;   
   -- gelr:pt_erp_certification, end   
   
   
   
   CURSOR get_first_corr_inv (invoice_id_ IN NUMBER, series_reference_ IN VARCHAR2, number_reference_ IN VARCHAR2, identity_ IN VARCHAR2) IS
      SELECT invoice_id 
      FROM   Invoice_Tab 
      WHERE  company          = company_ 
      AND    identity         = identity_ 
      AND    series_reference = series_reference_ 
      AND    number_reference = number_reference_ 
      AND    creator          = 'CUSTOMER_ORDER_INV_HEAD_API' 
      AND    invoice_id      != invoice_id_; 

   invoice_no_                    VARCHAR2(50);
   series_id_                     VARCHAR2(20);
   correction_type_               VARCHAR2(30);  
   invoice_id_to_use_             NUMBER;
   deb_tax_curr_rate_             NUMBER;
   total_gross_item_              NUMBER;
   
   -- gelr:in_hsn_sac_codes begin, GLOW-2487
   state_code_number_            VARCHAR2(35);
   state_name_                   VARCHAR2(35);
   -- gelr:in_hsn_sac_codes end, GLOW-2487
   -- gelr:prepayment_tax_document, begin
   prepayment_tax_document_      VARCHAR2(20);
   tax_doc_                      BOOLEAN := FALSE;
   tax_fee_amount_               NUMBER; 
   tax_doc_inv_id_               NUMBER;
   orig_tax_doc_series_ref_      VARCHAR2(20);
   orig_tax_doc_number_ref_      VARCHAR2(50);
   -- gelr:prepayment_tax_document, end    
   -- gelr:hu_vat_control_statement, begin 
   comp_group_tax_id_number_     VARCHAR2(50);
   cust_group_tax_id_number_     VARCHAR2(50);
   comp_domestic_tax_id_number_  VARCHAR2(50);
   cust_domestic_tax_id_number_  VARCHAR2(50);
   -- gelr:hu_vat_control_statement, end   
   -- gelr:pt_diff_tax_code_credit_invoic, begin
   pt_credit_invoice_            NUMBER := &FALSE;
   -- gelr:pt_diff_tax_code_credit_invoic, end
   
   gross_price_adjustment_        NUMBER := 0;
   
   -- Bug 140588, Removed first_correction_ivc_ from the cursor to consider only the current invoice when printing currency rate correction invoices.
   CURSOR get_gross_price_item( prel_update_allowed_ VARCHAR2) IS
      SELECT   SUM (ROUND(net_curr_amount, currency_rounding_)) total_gross_item
      FROM     cust_invoice_pub_util_item 
      WHERE  invoice_id = invoice_id_
      AND    company = company_
      AND    (prel_update_allowed = prel_update_allowed_ OR prel_update_allowed_ IS NULL)
      AND    item_data = 'Gross Price Item';
   
   -- gelr:invoice_copy_in_foreign_curr, bug 146331, begin
   inv_copy_frgn_curr_           VARCHAR2(5);
   posting_net_                  VARCHAR2(5);
   posting_discount_             VARCHAR2(5);
   posting_charge_               VARCHAR2(5);
   sign_                         NUMBER;
   base_sub_total_amount_        NUMBER := 0;
   base_net_amount_              NUMBER := 0;
   base_discount_amount_         NUMBER := 0;
   base_charges_amount_          NUMBER := 0;
   base_gross_amount_            NUMBER := 0;
   base_vat_amount_              NUMBER := 0;
   base_total_discount_          NUMBER := 0;
   voucher_no_                   NUMBER := 0;
   line_discount_                NUMBER := 0;
   line_net_                     NUMBER := 0; 
   charge_grp_desc_rec_          Sales_Charge_Group_Desc_API.Public_Rec;
   conv_factor_                  NUMBER;   
   
   -- get the sum of base amounts per posting type
   CURSOR get_amount_per_posting(posting_ VARCHAR2) IS
      SELECT   NVL(SUM(credit_amount), SUM(debet_amount))
      FROM     voucher_row_tab
      WHERE    voucher_no        = voucher_no_
      AND      company           = company_
      AND      voucher_type      = 'F'
      AND      accounting_year   = extract(year FROM invoice_date_)
      AND      trans_code        = posting_;
   
   -- get all lines in invoice with sale unit price
   CURSOR get_line_items(currency_rounding_ IN NUMBER) IS
      SELECT   item_id, ROUND(sale_unit_price * curr_rate_ / conv_factor_, currency_rounding_) unit_price
      FROM     customer_order_inv_item
      WHERE    invoice_id  = invoice_id_
      AND      company     = company_
      AND      line_no IS NOT NULL
      AND      charge_seq_no IS NULL            -- Note : no charge items
      AND      rma_charge_no IS NULL            -- Note : no rma charge items
      AND      rental_transaction_id IS NULL;   -- Note : no rental items
   
   -- get invoice line discount and line net
   CURSOR get_amount_per_line(posting_ VARCHAR2, line_no NUMBER) IS
      SELECT   NVL(credit_amount,debet_amount)
      FROM     voucher_row_tab
      WHERE    voucher_no        = voucher_no_
      AND      company           = company_
      AND      voucher_type      = 'F'
      AND      accounting_year   = extract(year FROM invoice_date_)
      AND      trans_code        = posting_
      AND      item_id           = line_no;
   
   -- get sum for all charge groups
   CURSOR get_charge_items(currency_rounding_ IN NUMBER) IS
      SELECT   charge_group, SUM(ROUND(sale_unit_price * curr_rate_ / conv_factor_, currency_rounding_)) charge_group_sum
      FROM     customer_order_inv_item
      WHERE    invoice_id  = invoice_id_
      AND      company     = company_
      AND      charge_seq_no IS NOT NULL
      GROUP BY charge_group;
   
  -- get tax amount and tax base for each tax code
   CURSOR get_tax_code_lines IS
      SELECT   optional_code                                     tax_code,
               NVL(SUM(credit_amount), SUM(debet_amount))        tax_amount,
               SUM(ABS(currency_tax_base_amount)* curr_rate_ / conv_factor_) tax_base_amount
      FROM     voucher_row_tab
      WHERE    voucher_no        = voucher_no_
      AND      company           = company_
      AND      voucher_type      = 'F'
      AND      accounting_year   = extract(year FROM invoice_date_)
      AND      trans_code        = 'IP4'
      GROUP BY optional_code;
   
   -- get total discount for a given tax code
   CURSOR get_base_tax_discount(vat_code_ IN VARCHAR2, currency_rounding_ IN NUMBER) IS
      SELECT   SUM((ABS(cipui.n2 * cipui.n4 * cipui.n3) - ABS(cipui.net_curr_amount)) * curr_rate_ / conv_factor_) 
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_pub stii
      WHERE    cipui.invoice_id = invoice_id_
      AND      stii.source_ref1 = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2 = TO_CHAR(cipui.item_id)
      AND      stii.source_ref3 = '*'
      AND      stii.source_ref4 = '*'
      AND      stii.source_ref5 = '*'
      AND      stii.tax_code    = vat_code_
      AND      cipui.company    = company_
      GROUP BY stii.tax_code;
   -- gelr:invoice_copy_in_foreign_curr, bug 146331, end
   
   PROCEDURE Add_Instal_Disc_Tax_Items___(gross_amount_     IN NUMBER,
                                          tax_code_total_   IN NUMBER,
                                          tax_percentage_   IN NUMBER)
   IS
      tax_per_tax_code_ NUMBER := 0;
   BEGIN
      -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
      IF (gross_amount_  != 0) THEN
         tax_per_tax_code_      :=  ROUND((tax_code_total_ * discount_amount_) / gross_amount_, currency_rounding_); 
      END IF;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_TAX_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX_PERCENT', tax_percentage_);
         -- gelr:pt_diff_tax_code_credit_invoic, begin
         IF (pt_credit_invoice_ = &TRUE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', ABS(tax_per_tax_code_));
         -- gelr:pt_diff_tax_code_credit_invoic, end   
         ELSE
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', tax_per_tax_code_);
         END IF;
         Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_TAX_ITEM');   
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB (
            result_key, row_no, parent_row_no, &BLOCK_NO, 
            &DISCOUNT_TAX_PERCENT, 
            &DISCOUNT_TAX) 
         VALUES (  
            result_key_, row_no_, parent_row_no_, &BLOCK_TAX_DISCOUNT, 
            tax_percentage_ , 
            DECODE(pt_credit_invoice_, &FALSE, tax_per_tax_code_, ABS(tax_per_tax_code_))); 
         row_no_ := row_no_ + 1;
      END IF;
   END Add_Instal_Disc_Tax_Items___;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
TRACE_sys.message('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
   result_key_         := TO_NUMBER(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   invoice_id_         := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_ID', parameter_attr_));
   invoice_copy_no_    := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_COPY_NO', parameter_attr_));   
   report_type_        := NVL(Client_SYS.Get_Item_Value('CHECK_REPORT_TYPE', parameter_attr_), '2');
   original_           := NVL(Client_SYS.Get_Item_Value('ORIGINAL', parameter_attr_), 'TRUE');
   print_option_       := NVL(Client_SYS.Get_Item_Value('PRINT_OPTION', parameter_attr_), 'Copy');
   duplicate_          := NVL(Client_SYS.Get_Item_Value('DUPLICATE', parameter_attr_), 'FALSE');
   tax_invoice_param_  := NVL(TO_NUMBER(Client_SYS.Get_Item_Value('TAX_INVOICE', parameter_attr_)),0);
   default_language_   := Client_SYS.Get_Item_Value('ORDER_LANGUAGE', report_attr_);

   duplicate_original_ := NVL(Client_SYS.Get_Item_Value('DUPLICATE_ORIGINAL', parameter_attr_), 'FALSE');
   company_            := Client_SYS.Get_Item_Value('COMPANY', parameter_attr_);
   contract_           := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   media_code_         := Client_SYS.Get_Item_Value('MEDIA_CODE', parameter_attr_);
   -- gelr:invoice_copy_in_foreign_curr, bug 146331, begin
   inv_copy_frgn_curr_  := NVL(Client_SYS.Get_Item_Value('INV_CPY_BASE_CUR', parameter_attr_), 'FALSE');
   -- gelr:invoice_copy_in_foreign_curr, bug 146331, end 
   
   IF company_ IS NULL THEN
      OPEN get_company;
      FETCH get_company INTO company_;
      IF (get_company%FOUND) THEN
         User_Finance_API.Exist_User(company_, Fnd_Session_API.Get_Fnd_User());
      END IF;
      CLOSE get_company;
   END IF;
   
   IF (Component_Rental_SYS.INSTALLED) THEN
      rental_installed_ := Fnd_Boolean_API.DB_TRUE;
   END IF;
   
   -- gelr:tax_exemption_certify, begin
   tax_exemption_certify_enabled_ := Company_Localization_API.Get_Parameter_Value_Db(company_, 'TAX_EXEMPTION_CERTIFY'); 
   -- gelr:tax_exemption_certify, end
   -- gelr:hu_vat_control_statement, begin
   hu_vat_control_statement_enabled_ := Company_Localization_API.Get_Parameter_Value_Db(company_, 'HU_VAT_CONTROL_STATEMENT');
   -- gelr:hu_vat_control_statement, end
   -- gelr:pt_diff_tax_code_credit_invoic, begin
   IF Company_Localization_API.Get_Parameter_Value_Db(company_, 'PT_DIFF_TAX_CODE_CREDIT_INVOIC') = Localization_Param_Yes_No_API.DB_YES THEN 
      pt_credit_invoice_ := &TRUE;
   END IF;
   -- gelr:pt_diff_tax_code_credit_invoic, end
   
   IF duplicate_original_ = 'TRUE' THEN
      first_result_key_ := Invoice_API.Get_Original_Result_Key(company_, invoice_id_);
      FOR original_rep_ IN get_original_records(first_result_key_) LOOP
         original_rep_.S109 := 'TRUE';
         original_rep_.D13 := Site_API.Get_Site_Date(contract_);
         INSERT INTO ORDER_INFO_SERVICES_RPT(
            result_key,
            row_no,
            parent_row_no,
            S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, 
            S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, 
            S21, S22, S23, S24, S25, S26, S27, S28, S29, S30, 
            S31, S32, S33, S34, S35, S36, S37, S38, S39, S40,
            S41, S42, S43, S44, S45, S46, S47, S48, S49, S50,
            S51, S52, S53, S54, S55, S56, S57, S58, S59, S60,
            S61, S62, S63, S64, S65, S66, S67, S68, S69, S70, 
            S71, S72, S73, S74, S75, S76, S77, S78, S79, S80,
            S81, S82, S83, S84, S85, S86, S87, S88, S89, S90,
            S91, S92, S93, S94, S95, S96, S97, S98, S99, S100,
            S101,S102,S103,S104,S105,S106,S107,S108,S109,S110, 
            S111,S112,S113,S114,S115,S116,S117,S118,S119,S120, 
            S121,S122,S123,S124,S125,S126,S127,S128,
            S131,S132,S133,S134,S135,S136,S137,S138,S139,S140,
            S141,S142,S143,S144,S145,S146,S147,S148,S149,S150,
            S151,S152,S153,S154,S155,S156,S157,S158,S159,S160,
            S161,S162,S163,S164,S165,S166,
            N1, N2, N3, N4, N5, N6, N7, N8, N9, N10, 
            N11, N12, N13, N14, N15, N16, N17, N18, N19, N20, 
            N21, N22, N23, N24, N25, N26, N27, N28, N29, N30, 
            N31, N32, N33, N34, N35, N36, N37, N38, N39, N40, 
            N41, N42, N43, N44, N45, N46, N47, N48, N49, N50, 
            N51, N52, N53, N54, N55, N56, N57, N58, N59, N60, 
            N61, N62, N63, N64, N65, N66, N67, N68, N69, N70,
            N71, N72, N73, N74, N75, N76, N77,
            D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, 
            D11, D12, D13, D14, D15, D16, D17, D18, D19,
            D20, D21, D22)
         VALUES (
            result_key_,
            original_rep_.row_no,
            original_rep_.parent_row_no,
            original_rep_.S1, original_rep_.S2, original_rep_.S3, original_rep_.S4, original_rep_.S5, original_rep_.S6, original_rep_.S7, original_rep_.S8, original_rep_.S9, original_rep_.S10,
            original_rep_.S11, original_rep_.S12, original_rep_.S13, original_rep_.S14, original_rep_.S15, original_rep_.S16, original_rep_.S17, original_rep_.S18, original_rep_.S19, original_rep_.S20, 
            original_rep_.S21, original_rep_.S22, original_rep_.S23, original_rep_.S24, original_rep_.S25, original_rep_.S26, original_rep_.S27, original_rep_.S28, original_rep_.S29, original_rep_.S30, 
            original_rep_.S31, original_rep_.S32, original_rep_.S33, original_rep_.S34, original_rep_.S35, original_rep_.S36, original_rep_.S37, original_rep_.S38, original_rep_.S39, original_rep_.S40,
            original_rep_.S41, original_rep_.S42, original_rep_.S43, original_rep_.S44, original_rep_.S45, original_rep_.S46, original_rep_.S47, original_rep_.S48, original_rep_.S49, original_rep_.S50,
            original_rep_.S51, original_rep_.S52, original_rep_.S53, original_rep_.S54, original_rep_.S55, original_rep_.S56, original_rep_.S57, original_rep_.S58, original_rep_.S59, original_rep_.S60,
            original_rep_.S61, original_rep_.S62, original_rep_.S63, original_rep_.S64, original_rep_.S65, original_rep_.S66, original_rep_.S67, original_rep_.S68, original_rep_.S69, original_rep_.S70, 
            original_rep_.S71, original_rep_.S72, original_rep_.S73, original_rep_.S74, original_rep_.S75, original_rep_.S76, original_rep_.S77, original_rep_.S78, original_rep_.S79, original_rep_.S80,
            original_rep_.S81, original_rep_.S82, original_rep_.S83, original_rep_.S84, original_rep_.S85, original_rep_.S86, original_rep_.S87, original_rep_.S88, original_rep_.S89, original_rep_.S90,
            original_rep_.S91, original_rep_.S92, original_rep_.S93, original_rep_.S94, original_rep_.S95, original_rep_.S96, original_rep_.S97, original_rep_.S98, original_rep_.S99, original_rep_.S100,
            original_rep_.S101,original_rep_.S102,original_rep_.S103,original_rep_.S104,original_rep_.S105,original_rep_.S106,original_rep_.S107,original_rep_.S108,original_rep_.S109,original_rep_.S110, 
            original_rep_.S111,original_rep_.S112,original_rep_.S113,original_rep_.S114,original_rep_.S115,original_rep_.S116,original_rep_.S117,original_rep_.S118,original_rep_.S119,original_rep_.S120, 
            original_rep_.S121,original_rep_.S122,original_rep_.S123,original_rep_.S124,original_rep_.S125,original_rep_.S126,original_rep_.S127,original_rep_.S128,
            original_rep_.S131,original_rep_.S132,original_rep_.S133,original_rep_.S134,original_rep_.S135,original_rep_.S136,original_rep_.S137,original_rep_.S138,original_rep_.S139,original_rep_.S140,
            original_rep_.S141,original_rep_.S142,original_rep_.S143,original_rep_.S144,original_rep_.S145,original_rep_.S146,original_rep_.S147,original_rep_.S148,original_rep_.S149,original_rep_.S150,
            original_rep_.S151,original_rep_.S152,original_rep_.S153,original_rep_.S154,original_rep_.S155,original_rep_.S156,original_rep_.S157,original_rep_.S158,original_rep_.S159,original_rep_.S160,
            original_rep_.S161,original_rep_.S162,original_rep_.S163,original_rep_.S164,original_rep_.S165,original_rep_.S166,
            original_rep_.N1, original_rep_.N2, original_rep_.N3, original_rep_.N4, original_rep_.N5, original_rep_.N6, original_rep_.N7, original_rep_.N8, original_rep_.N9, original_rep_.N10, 
            original_rep_.N11, original_rep_.N12, original_rep_.N13, original_rep_.N14, original_rep_.N15, original_rep_.N16, original_rep_.N17, original_rep_.N18, original_rep_.N19, original_rep_.N20, 
            original_rep_.N21, original_rep_.N22, original_rep_.N23, original_rep_.N24, original_rep_.N25, original_rep_.N26, original_rep_.N27, original_rep_.N28, original_rep_.N29, original_rep_.N30, 
            original_rep_.N31, original_rep_.N32, original_rep_.N33, original_rep_.N34, original_rep_.N35, original_rep_.N36, original_rep_.N37, original_rep_.N38, original_rep_.N39, original_rep_.N40, 
            original_rep_.N41, original_rep_.N42, original_rep_.N43, original_rep_.N44, original_rep_.N45, original_rep_.N46, original_rep_.N47, original_rep_.N48, original_rep_.N49, original_rep_.N50, 
            original_rep_.N51, original_rep_.N52, original_rep_.N53, original_rep_.N54, original_rep_.N55, original_rep_.N56, original_rep_.N57, original_rep_.N58, original_rep_.N59, original_rep_.N60, 
            original_rep_.N61, original_rep_.N62, original_rep_.N63, original_rep_.N64, original_rep_.N65, original_rep_.N66, original_rep_.N67, original_rep_.N68, original_rep_.N69, original_rep_.N70,
            original_rep_.N71, original_rep_.N72, original_rep_.N73, original_rep_.N74, original_rep_.N75, original_rep_.N76, original_rep_.N77,
            original_rep_.D1, original_rep_.D2, original_rep_.D3, original_rep_.D4, original_rep_.D5, original_rep_.D6, original_rep_.D7, original_rep_.D8, original_rep_.D9, original_rep_.D10, 
            original_rep_.D11, original_rep_.D12, original_rep_.D13, original_rep_.D14, original_rep_.D15, original_rep_.D16, original_rep_.D17, original_rep_.D18, original_rep_.D19,
            original_rep_.D20, original_rep_.D21, original_rep_.D22);
      END LOOP;
      FOR original_rep_ IN get_original_records_xml(first_result_key_) LOOP
         -- Bug 140529, start
         IF original_rep_.data IS NULL THEN
            original_rep_.data := Xml_Report_Data_API.Get_XML_Data(first_result_key_);
         END IF;
         -- Bug 140529, end
         
         start_pos_ := INSTR(original_rep_.data, '<DUPLICATE_OPTION>', 1);
         end_pos_   := INSTR(original_rep_.data, '</DUPLICATE_OPTION>', 1);
         IF (start_pos_ > 0) THEN
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+17) || 'TRUE' || SUBSTR(original_rep_.data, end_pos_);
         ELSE
            start_pos_ := INSTR(original_rep_.data, '<CUSTOMER_ORDER_IVC_REP>', 1);
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+23) || '<DUPLICATE_OPTION>' || 'TRUE' || '</DUPLICATE_OPTION>' || SUBSTR(original_rep_.data, start_pos_+24);
         END IF;
         -- Restructured the code in order to append the <date_of_duplicate> tag. This is from RMB option 'Reprint Original Duplicate...'.
         date_of_duplicate_ := to_char(Site_API.Get_Site_Date(contract_),'YYYY-MM-DD,HH24:MI:SS');
          -- Bug 125747, start
         start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE>', 1);
         IF start_pos_ > 0 THEN
            end_pos_   := INSTR(original_rep_.data, '</DATE_OF_DUPLICATE>', 1) + 20;
            previous_date_duplicate_ := SUBSTR(original_rep_.data, start_pos_ , end_pos_-start_pos_);
            original_rep_.data := REPLACE(original_rep_.data, previous_date_duplicate_, '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>');
         ELSE
         -- Bug 125747, end
         start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE', 1);
         IF (start_pos_ > 0) THEN
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_-1) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_+32);
         ELSE
            start_pos_ := INSTR(original_rep_.data, '<CUSTOMER_ORDER_IVC_REP>', 1);
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+23) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_+24);
         END IF;
         -- Bug 125747, start
         END IF;
         -- Bug 125747, end
         IF (INSTR(original_rep_.data, '<INVOICE_LINE_TYPES>', 1) = 0) THEN
            start_pos_ := INSTR(original_rep_.data, '<INVOICE_LINES>', 1);
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_- 1) || '<INVOICE_LINE_TYPES><INVOICE_LINE_TYPE>' || SUBSTR(original_rep_.data, start_pos_);
            start_pos_ := INSTR(original_rep_.data, '</INVOICE_LINES>', 1);
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_ + 15) || '</INVOICE_LINE_TYPE></INVOICE_LINE_TYPES>' || SUBSTR(original_rep_.data, start_pos_ + 16);
         END IF;

         -- Bug 140529, start
         Xml_Report_Data_API.Insert_Data(result_key_, 'CUSTOMER_ORDER_IVC_REP', original_rep_.data );
         -- Bug 140529, end
         
      END LOOP;
      inv_rec_       := Invoice_API.Get(company_, invoice_id_);
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
      archive_notes_ := archive_notes_ || ': '|| inv_rec_.identity || ', ';       
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
      
      IF inv_rec_.creators_reference IS NULL THEN
         OPEN get_order_no;
         FETCH get_order_no INTO order_no_;
         CLOSE get_order_no;
         archive_notes_ := archive_notes_ || ': '|| order_no_ || ', ';
      ELSE
         archive_notes_ := archive_notes_ || ': '|| inv_rec_.creators_reference || ', ';
      END IF;                                                                    
      --
      IF (inv_rec_.tax_invoice_number IS NOT NULL) THEN
         archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'TAXINVNO: Tax Invoice No');
         inv_series_and_no_ := inv_rec_.series_id||inv_rec_.tax_invoice_number;
      ELSE
         archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
         inv_series_and_no_ := inv_rec_.series_id||inv_rec_.invoice_no;
      END IF;
      archive_notes_ := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
      archive_notes_ := archive_notes_ || ': '|| invoice_id_;
      Archive_API.Set_Notes(archive_notes_);
      
      Client_SYS.Clear_Attr(instance_attr_);
      Client_SYS.Clear_Attr(dummy_parameter_attr_);
      -- Get the language code of the original report.
      Archive_API.Get_Info(instance_attr_, dummy_parameter_attr_, first_result_key_);
      language_code_ := Client_SYS.Get_Item_Value('LANG_CODE', instance_attr_);
      Archive_API.Set_Language(language_code_);
   ELSE
      -- Note : StreamServe start: Get user email address (not in use at this time) and directory when report output to file
      user_email_    := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                             Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
      user_file_dir_ := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                             Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
      -- Note : StreamServe stop
   
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      END IF;
   
      FOR header_rec_ IN get_header LOOP
         -- gelr:in_hsn_sac_codes, GLOW-2162, begin
         -- ADDITIONAL_TAX_NUMBERS functionality is not needed for India for the moment. But there is a chance 
         -- that they might need it in the future. To switch it on easily in such case, just commented the additional_tax_numbers_ for now.
         -- gelr:additional_tax_numbers, Bug 144831, begin - Switched on additional_tax_numbers_.
         additional_tax_numbers_ := Company_Localization_API.Get_Parameter_Value_Db(header_rec_.company, 'ADDITIONAL_TAX_NUMBERS');         
         -- gelr:additional_tax_numbers, Bug 144831, end
         -- gelr:in_hsn_sac_codes, GLOW-2162, end
         company_               := header_rec_.company;
         -- DIS003 start
         tax_char_on_invoice_enabled_ := Company_Localization_API.Get_Parameter_Value_Db(company_, 'TAX_CHAR_ON_INVOICE');
         -- DIS003 end
         -- gelr:pt_erp_certification, begin
         IF (Company_API.Get_Localization_Country_Db(company_) = 'PT' AND company_localization_API.Get_Parameter_Value_Db(company_, 'PT_ERP_CERTIFICATION') = Localization_Param_Yes_No_API.DB_YES) THEN 
            saft_pt_inv_type_      := Pt_Invoice_Type_Config_API.Get_Saft_Pt_Invoice_Type(company_, Company_API.Get_Localization_Country(company_),Audit_Report_Types_API.Decode('SAF-T'),header_rec_.series_id);
            saft_pt_inv_type_desc_ := Pt_Invoice_Type_API.Get_Description(saft_pt_inv_type_);
            erp_cert_flag_ := TRUE;   
         ELSE
            erp_cert_flag_ := FALSE;
         END IF;
         -- gelr:pt_erp_certification, end
         record_found_ := TRUE;
         User_Finance_API.Exist_User(company_, Fnd_Session_API.Get_Fnd_User());
         party_                 := Party_Type_API.Decode(header_rec_.party_type);
         print_amount_verbally_ := Invoice_Type_API.Get_Verbal_Amount(header_rec_.company, party_, header_rec_.invoice_type); 
         first_result_key_      := Invoice_API.Get_Original_Result_Key(header_rec_.company, invoice_id_);
         IF (original_ != 'FALSE' AND first_result_key_ IS NULL) THEN
            Invoice_API.Update_Inv_Orig_Result_Key(header_rec_.company, invoice_id_, result_key_);
         ELSE
            IF (print_option_ = 'Original' AND duplicate_ = 'FALSE' AND (invoice_copy_no_ IS NULL OR invoice_copy_no_ = 0)) THEN
               Invoice_API.Update_Inv_Latest_Result_Key(header_rec_.company, invoice_id_, result_key_);
            END IF;            
         END IF;
         
         -- Note : The following function calls are made here instead of in the cursor in order to improve performance
         forward_agent_ := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
         
         delivery_country_ := Customer_Info_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.delivery_address_id);
         IF (header_rec_.order_no IS NOT NULL) THEN
            tax_id_no_      := Customer_Order_API.Get_Tax_Id_No(header_rec_.order_no);
         -- MBrant 6/22/20   
            IF (tax_id_no_ IS NULL) THEN 
                tax_id_no_ := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no,
                                                                           header_rec_.bill_addr_no,
                                                                           header_rec_.company,
                                                                           supply_country_,
                                                                           delivery_country_);
            END IF; 
            IF (tax_id_no_ IS NULL ) THEN 
                tax_id_no_ := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no,
                                                                           header_rec_.bill_addr_no,
                                                                           header_rec_.company,
                                                                           supply_country_,
                                                                           '*');     
            END IF;   
         -- End Mod    
            supply_country_ := Customer_Order_API.Get_Supply_Country_Db(header_rec_.order_no);
            -- gelr:additional_tax_numbers:INFI9-090, begin
            IF additional_tax_numbers_ = Localization_Param_Yes_No_API.DB_YES THEN
               Customer_Order_API.Get_Tax_Id_Numbers(tax_id_no2_, tax_id_no3_, tax_id_no4_, tax_id_no5_, tax_id_no6_, header_rec_.order_no);
            END IF;
            -- gelr:additional_tax_numbers:INFI9-090, end
         ELSE
            -- Checking for rma_no to ensure the invoice is connected to an RMA
            IF (header_rec_.rma_no IS NOT NULL) THEN
               -- Handles RMAs without order number.
               supply_country_ := Return_Material_API.Get_Supply_Country_Db(header_rec_.rma_no);               
            -- handles shipment invoices.
            ELSIF (header_rec_.shipment_id IS NOT NULL) THEN
                supply_country_ := Shipment_Freight_API.Get_Supply_Country_Db(header_rec_.shipment_id);
            END IF;
            tax_id_no_ := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no,
                                                                    header_rec_.bill_addr_no,
                                                                    header_rec_.company,
                                                                    supply_country_,
                                                                    delivery_country_);
	        -- gelr:additional_tax_numbers:INFI9-090, begin
	        IF additional_tax_numbers_ = Localization_Param_Yes_No_API.DB_YES THEN
	           Customer_Document_Tax_Info_API.Get_Tax_Id_Numbers(tax_id_no2_, tax_id_no3_, tax_id_no4_, tax_id_no5_, tax_id_no6_,
	           header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.company, supply_country_, delivery_country_);
	        END IF;
            -- gelr:additional_tax_numbers:INFI9-090, end
         END IF;

         -- gelr:additional_tax_numbers:INFI9-090, begin
         IF additional_tax_numbers_ = Localization_Param_Yes_No_API.DB_YES THEN
		    -- gelr:in_hsn_sac_codes, Bug 146645, begin
            tax_id_no_text1_ := Language_SYS.Translate_Constant(lu_name_, 'TAXIDNO01: PAN');
            tax_id_no_text2_ := Language_SYS.Translate_Constant(lu_name_, 'TAXIDNO02: GSTIN');
            tax_id_no_text3_ := Language_SYS.Translate_Constant(lu_name_, 'TAXIDNO03: Tax ID 3');
            tax_id_no_text4_ := Language_SYS.Translate_Constant(lu_name_, 'TAXIDNO04: Tax ID 4');
            tax_id_no_text5_ := Language_SYS.Translate_Constant(lu_name_, 'TAXIDNO05: Tax ID 5');
            tax_id_no_text6_ := Language_SYS.Translate_Constant(lu_name_, 'TAXIDNO06: Tax ID 6');
			-- gelr:in_hsn_sac_codes, Bug 146645, end
         END IF;
         -- gelr:additional_tax_numbers:INFI9-090, end
   
         contract_               := header_rec_.contract;
         contract_description_   := Site_API.Get_Description(header_rec_.contract);
   
         -- Note : get the Invoice type, CUSTORDDEB (Invoice) and CUSTORDCRE (Credit Invoice)
         invoice_type_   := header_rec_.invoice_type;
         debit_inv_ref_  := NULL;
         
         ref_invoice_id_ := Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No(header_rec_.company, header_rec_.number_reference, header_rec_.series_reference);
   
         IF (invoice_type_ = 'CUSTORDDEB') THEN
            document_code_ := &DOCINVOICE;
            output_code_   := 'IVCLST';
         ELSE
            document_code_ := &DOCCREDITINVOICE;
            output_code_   := 'ICRLST';
            IF (header_rec_.number_reference IS NOT NULL) THEN			

               debit_inv_ref_ := header_rec_.series_reference||header_rec_.number_reference;
               debit_inv_id_  := ref_invoice_id_;
               debit_inv_rec_ := Customer_Order_Inv_Head_API.Get(header_rec_.company, debit_inv_id_);
               debit_payment_ := debit_inv_rec_.net_curr_amount;
               debit_tax_     := debit_inv_rec_.vat_curr_amount;
               IF tax_invoice_param_ = 1 THEN
               -- get reference to the original Tax Invoice
                  OPEN  get_tax_inv_no(ref_invoice_id_);
                  FETCH get_tax_inv_no INTO ref_tax_inv_no_;
                  CLOSE get_tax_inv_no;
   
                  IF ref_tax_inv_no_ IS NOT NULL THEN
                     debit_inv_ref_ :=  header_rec_.series_reference||ref_tax_inv_no_;
                  END IF;
               END IF;
            END IF;
         END IF;

         page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company,1);
         counter_       := 0;
         pos_           := instr(NVL(page_footer_1_,' '),'^', 1);
         WHILE pos_ > 0 LOOP
            pos_ := instr(page_footer_1_,'^', pos_);
            IF pos_ = 0  THEN
               EXIT; 
            ELSE
               pos_     := pos_ + 1;
               counter_ := counter_ + 1;
            END IF;
         END LOOP;
      
         WHILE counter_ <= 4 LOOP
            counter_       := counter_ + 1;
            page_footer_1_ := page_footer_1_ || '^';
         END LOOP;
   
          -- Replace ^:s with tabs in footers
         page_footer_1_ := translate(page_footer_1_ || '^' || header_rec_.tax_id_number,'^',chr(9));
         page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 2), '^', chr(9));
         page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 3), '^', chr(9));
         page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 4), '^', chr(9));
   
         -- Note : Get order_no
         IF (header_rec_.order_no IS NULL) THEN
            OPEN get_order_no;
            FETCH get_order_no INTO order_no_;
            CLOSE get_order_no;
         ELSE
            order_no_ := header_rec_.order_no;
         END IF;
   
         -- Fetched information from the customer order if an order is connected.
         IF (header_rec_.order_no IS NOT NULL) THEN 
            -- Note : Retrieve the ship address, note_id and print_control_code for normal CO.
            OPEN get_header_customer_order;
            FETCH get_header_customer_order INTO language_code_, note_id_, header_print_control_code_, customer_order_rowkey_;
            CLOSE get_header_customer_order;
         END IF;         
         IF (header_rec_.rma_no IS NULL) THEN 
            customer_po_no_ := Customer_Order_API.Get_Internal_Po_No(order_no_); 
            IF (customer_po_no_ IS NULL) THEN
               customer_po_no_ := Customer_Order_API.Get_Customer_Po_No(order_no_);
            END IF;
         ELSE
            -- Note : Retrieve the language_code and note_id from RMA
            OPEN get_rma_header(header_rec_.rma_no);
            FETCH get_rma_header INTO language_code_, note_id_, rma_rowkey_;
            CLOSE get_rma_header;
            header_print_control_code_ := NULL;            
         END IF;
   
         header_note_id_ := note_id_;
   
         -- Note : If the invoice has a payee other than the ordering customer then use the
         -- Note : language of the paying customer.
         IF (header_rec_.customer_no != header_rec_.customer_no_pay) THEN
            language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.customer_no_pay);
            customer_no_   := header_rec_.customer_no_pay;
         ELSE
            customer_no_   := header_rec_.customer_no;
         END IF;
   
         cust_print_tax_ := Fnd_Boolean_API.Encode(Cust_Ord_Customer_API.Get_Print_Amounts_Incl_Tax(customer_no_));
         IF (cust_print_tax_ = 'TRUE') THEN
            print_tax_db_ := 'Y';
         ELSE
            print_tax_db_ := 'N';
         END IF;
         
         -- Note : Set report language
         Archive_API.Set_Language(language_code_);
   
         -- Note : Set report notes displayed in the InfoServices archive
         archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
         archive_notes_ := archive_notes_ || ': ' || customer_no_ || ', ';   
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
         archive_notes_ := archive_notes_ || ': '|| order_no_ || ', ';
   
         -- tax_invoice_param_
         --   1 - print separate Tax Invoice
         --   0 - print "normal" invoice, print tax invoice together if necessary
   
         -- tax_invoice_type_ determines what title and invoice_no will be printed on report
         --   1 - separate tax invoice
         --   0 - tax invoice printed together with "normal" invoice
         --  -1 - no tax invoice
         IF tax_invoice_param_ = 1 THEN
            -- gelr:pt_erp_certification, begin
            IF (erp_cert_flag_) THEN
               inv_series_and_no_ := saft_pt_inv_type_ ||' '||header_rec_.series_id||'/'||header_rec_.tax_invoice_number;
            ELSE
               inv_series_and_no_ := header_rec_.series_id||header_rec_.tax_invoice_number;
            END IF;
            -- gelr:pt_erp_certification, end
            archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'TAXINVNO: Tax Invoice No');
            tax_invoice_type_  := 1;
         ELSE
            -- gelr:pt_erp_certification, begin
            IF (erp_cert_flag_) THEN
               inv_series_and_no_ := saft_pt_inv_type_||' '||header_rec_.series_id||'/'||header_rec_.invoice_no;
            ELSE
               inv_series_and_no_ := header_rec_.series_id||header_rec_.invoice_no;
            END IF;
            -- gelr:pt_erp_certification, end
            IF (media_code_ = 'E-INVOICE') THEN
               archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'EINV: E-Invoice');
            ELSE
            archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
            END IF;
            IF Company_Tax_Control_Invoic_API.Get_Use_Tax_Invoice_Db(header_rec_.company)='TRUE' AND
               Invoice_Series_API.Get_Separate_Tax_Invoice(header_rec_.company, header_rec_.series_id) = 'FALSE' AND
               header_rec_.tax_invoice_number IS NOT NULL
            THEN
               tax_invoice_type_ := 0;
            ELSE
               tax_invoice_type_ := -1;
            END IF;
         END IF;
         archive_notes_ := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
         archive_notes_ := archive_notes_ || ': '|| invoice_id_;
         Archive_API.Set_Notes(archive_notes_);

         -- Note : StreamServe start: Get fax, email and distribution flags from customer.        
         customer_fax_   := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                                'FAX', header_rec_.bill_addr_no, sysdate);
         customer_email_ := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                                'E_MAIL', header_rec_.bill_addr_no, sysdate);
         -- Note : MASO 000926: Report distribution flags on customer not implemented at this time.
         printer_flag_   := 'Y';
         fax_flag_       := 'N';
         email_flag_     := 'N';
         -- Note : StreamServe stop
         -- Note : Retrieve the bill address
         bill_addr_1_    := SUBSTR(Customer_Info_Address_API.Get_Name( header_rec_.customer_no_pay, header_rec_.bill_addr_no),1,100);
         country_code_   := Cust_Ord_Customer_Address_API.Get_Country_Code(
                               header_rec_.customer_no_pay, header_rec_.bill_addr_no);         
   
         bill_country_   := SUBSTR(Iso_Country_API.Get_Description(country_code_,Iso_Language_API.Get_Description(language_code_)),1,50);
         -- MBrant 10/05/20
         cust_dft_lang_cd_  := Customer_Info_API.Get_Default_Language_Db( header_rec_.customer_no );
         -- Convert the bill address to the address presentation format.
         Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                        bill_addr_2_,
                                                        bill_addr_3_,
                                                        bill_addr_4_,
                                                        bill_addr_5_,
                                                        bill_addr_6_,
                                                        bill_addr_7_,
                                                        bill_addr_8_,
                                                        bill_addr_9_,
                                                        bill_addr_10_,
                                                        bill_addr_11_,
                                                        header_rec_.customer_no_pay,
                                                        header_rec_.bill_addr_no,
                                                        remove_empty_ => 'FALSE',
                                                        order_language_ => cust_dft_lang_cd_);
         -- MBrant 10/05/20                             order_language_ => default_language_);

         IF (header_rec_.order_no IS NOT NULL) THEN
            -- Bug 147007, start
            IF ((header_rec_.rma_no IS NOT NULL) AND (Return_Material_API.Get_Ship_Addr_Flag_Db(header_rec_.rma_no) = 'Y')) THEN
               -- RMA with single occurrence.
               rma_rec_       := Return_Material_API.Get(header_rec_.rma_no);   
               deliv_country_ := rma_rec_.ship_addr_country_code;
            ELSE
            -- Bug 147007, end   
               addr_rec_      := customer_Order_Address_API.Get_Cust_Ord_Addr(header_rec_.order_no);
               deliv_country_ := addr_rec_.country_code;
            END IF;
            IF (deliv_country_ IS NOT NULL) THEN
            -- MBrant 10/05/20   
            --    ship_country_ := SUBSTR(Iso_Country_API.Get_Description(deliv_country_,Iso_Language_API.Get_Description(language_code_)), 1, 50);
             ship_country_ := Iso_Country_API.Get_Description(addr_rec_.country_code , cust_dft_lang_cd_); 
            ELSE
               ship_country_ := NULL;
            END IF;
            -- Bug 147007, start
            IF ((header_rec_.rma_no IS NOT NULL) AND (rma_rec_.ship_addr_flag = 'Y')) THEN
               address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(rma_rec_.ship_addr_country_code,
                                                                                       rma_rec_.ship_address1,
                                                                                       rma_rec_.ship_address2,
                                                                                       rma_rec_.ship_addr_zip_code,
                                                                                       rma_rec_.ship_addr_city,
                                                                                       rma_rec_.ship_addr_state,
                                                                                       rma_rec_.ship_addr_county,
                                                                                       ship_country_);
            ELSE
            -- Bug 147007, end
               -- Convert the ship address to the address presentation format.
               address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(addr_rec_.country_code,
                                                                                       addr_rec_.address1,
                                                                                       addr_rec_.address2,
                                                                                       addr_rec_.zip_code,
                                                                                       addr_rec_.city,
                                                                                       addr_rec_.state,
                                                                                       addr_rec_.county,
                                                                                       ship_country_,
                                                                                       addr_rec_.address3,
                                                                                       addr_rec_.address4,
                                                                                       addr_rec_.address5,
                                                                                       addr_rec_.address6);
            END IF;
            ship_addr_2_ := address_rec_.address1;
            ship_addr_3_ := address_rec_.address2;
            ship_addr_4_ := address_rec_.address3;
            ship_addr_5_ := address_rec_.address4;
            ship_addr_6_ := address_rec_.address5;
            ship_addr_7_ := address_rec_.address6;
            ship_addr_8_ := address_rec_.address7;
            ship_addr_9_ := address_rec_.address8;
            ship_addr_10_ := address_rec_.address9;
            ship_addr_11_ := address_rec_.address10;
         ELSE
            IF ((header_rec_.rma_no IS NOT NULL) AND (Return_Material_API.Get_Ship_Addr_Flag_Db(header_rec_.rma_no) = 'Y')) THEN
               -- RMA with single occurrence.
               rma_rec_       := Return_Material_API.Get(header_rec_.rma_no);   
               deliv_country_ := rma_rec_.ship_addr_country_code;
            ELSE
               cust_addr_rec_ := Customer_Info_Address_API.Get(header_rec_.customer_no, 
                                                               header_rec_.delivery_address_id);
   
               deliv_country_ := cust_addr_rec_.country;
            END IF;
            
            IF (deliv_country_ IS NOT NULL) THEN
            -- MBrant 10/05/20
               -- ship_country_ := SUBSTR(Iso_Country_API.Get_Description(deliv_country_, Iso_Language_API.Get_Description(language_code_)), 1, 50);
               ship_country_ := Iso_Country_API.Get_Description(addr_rec_.country_code , cust_dft_lang_cd_);    
            ELSE
               ship_country_ := NULL;
            END IF;
            
            IF ((header_rec_.rma_no IS NOT NULL) AND (rma_rec_.ship_addr_flag = 'Y')) THEN
               address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(rma_rec_.ship_addr_country_code,
                                                                                       rma_rec_.ship_address1,
                                                                                       rma_rec_.ship_address2,
                                                                                       rma_rec_.ship_addr_zip_code,
                                                                                       rma_rec_.ship_addr_city,
                                                                                       rma_rec_.ship_addr_state,
                                                                                       rma_rec_.ship_addr_county,
                                                                                       ship_country_);
            ELSE   
               address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(cust_addr_rec_.country,
                                                                                       cust_addr_rec_.address1,
                                                                                       cust_addr_rec_.address2,
                                                                                       cust_addr_rec_.zip_code,
                                                                                       cust_addr_rec_.city,
                                                                                       cust_addr_rec_.state,
                                                                                       cust_addr_rec_.county,
                                                                                       ship_country_,
                                                                                       cust_addr_rec_.address3,
                                                                                       cust_addr_rec_.address4,
                                                                                       cust_addr_rec_.address5,
                                                                                       cust_addr_rec_.address6);
            END IF;  
            
            ship_addr_2_ := address_rec_.address1;
            ship_addr_3_ := address_rec_.address2;
            ship_addr_4_ := address_rec_.address3;
            ship_addr_5_ := address_rec_.address4;
            ship_addr_6_ := address_rec_.address5;
            ship_addr_7_ := address_rec_.address6;
            ship_addr_8_ := address_rec_.address7;
            ship_addr_9_ := address_rec_.address8;
            ship_addr_10_ := address_rec_.address9;
            ship_addr_11_ := address_rec_.address10;
         END IF;

         check_delivery_country_ := deliv_country_;
         deliv_addr_id_          := SUBSTR(NVL(Customer_Order_Address_API.Get_Addr_1(header_rec_.order_no),
                                            NVL(rma_rec_.ship_addr_name,Customer_Info_Address_API.Get_Name(header_rec_.customer_no,header_rec_.delivery_address_id))),1,100);
   
         -- Note: For Argentinian Layout
         customer_state_         := Cust_Ord_Customer_Address_API.Get_State(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_city_          := Cust_Ord_Customer_Address_API.Get_City(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_county_        := Cust_Ord_Customer_Address_API.Get_County(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_state_name_    := State_Codes_API.Get_State_Name(country_code_, customer_state_);
         customer_state_desc_    := customer_state_ || ': ' || customer_state_name_;
         customer_zip_code_      := Cust_Ord_Customer_Address_API.Get_Zip_Code(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_zip_country_   := customer_zip_code_ || '- ' || bill_country_;
         customer_city_name_     := City_Code_API.Get_City_Name(country_code_, customer_state_, customer_county_, customer_city_);
         customer_city_desc_     := customer_city_ || ': ' || customer_city_name_;
   
         -- Note : If there is a payment term description in the order or customers language it should be used.
         translated_paytermdesc_ := SUBSTR(Text_Field_Translation_API.Get_text(header_rec_.company, 'PAYMENTTERM', header_rec_.pay_terms, language_code_),1,100);
   
         IF (translated_paytermdesc_ IS NOT NULL) THEN
            header_rec_.pay_terms_desc := translated_paytermdesc_;
         END IF;

         -- Note : retrieve customer document text if there is any
         customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);
         
         prel_series_id_ := Invoice_Type_API.Get_Prel_Invoice_Series(company_, party_, header_rec_.invoice_type);

         IF (header_rec_.status != 'Preliminary') AND (print_option_ = 'Copy') AND (invoice_copy_no_ = 0 OR invoice_copy_no_ IS NULL) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'COPY: COPY');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSIF (header_rec_.invoice_no = to_char(invoice_id_)) AND (prel_series_id_ = header_rec_.series_id) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'PRELIM: Preliminary');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSE
            report_type_ := '1';
            copy_text_   := '' || ',' || report_type_;
         END IF;
   
         parent_row_no_      := 0;
         vat_curr_amount_    := 0;
         net_curr_amount_    := 0;
         curr_code_          := header_rec_.curr_code;
         curr_rate_          := header_rec_.curr_rate;
         order_date_         := header_rec_.date_entered;
         invoice_date_       := header_rec_.invoice_date;
         company_country_db_ := Company_API.Get_Country_Db(company_);
         IF (Company_Finance_API.Get_Currency_Code(customer_no_) = 'EUR') THEN
            euro_company_ := 'TRUE';
         ELSE
            euro_company_ := 'FALSE';
         END IF;

         currency_rate_type_          := NVL(header_rec_.currency_rate_type,Invoice_Library_API.Get_Default_Currency_Type(company_, 'CUSTOMER', customer_no_)); 
         several_value_               := 'FALSE';
         print_tax_in_alt_curr_       := Currency_Invoice_Info_API.Get_Print_Tax_In_Base_Curre_Db(company_, curr_code_);  
         cust_del_add_same_country_   := (Check_Company_Country_Code(company_, check_delivery_country_) = 'TRUE');
         vat_registered_same_country_ := (SUBSTR(tax_id_no_, 0, 2) = company_country_db_);
         IF (print_tax_in_alt_curr_ = 'NEVER') THEN
            print_tax_in_alternative_curr_ := FALSE;
         ELSIF (print_tax_in_alt_curr_ = 'ALLRECIPIENTS') THEN
            print_tax_in_alternative_curr_ := TRUE;
         ELSIF (print_tax_in_alt_curr_ = 'DOMRECIPIENTSONLY') AND (cust_del_add_same_country_ OR vat_registered_same_country_) THEN
            print_tax_in_alternative_curr_ := TRUE;
         ELSE
            print_tax_in_alternative_curr_ := FALSE;
         END IF;
         selected_alternative_curr_ := Currency_Invoice_Info_API.Get_Alternative_Tax_Currenc_Db(company_, curr_code_); 

         OPEN count_ship_dates_rma_no;
         FETCH count_ship_dates_rma_no INTO count_all_;
         CLOSE count_ship_dates_rma_no;

         IF (NVL(count_all_,0) >0) THEN
            several_value_ := 'TRUE';
         END IF;

         IF several_value_ = 'FALSE' THEN
            OPEN check_real_ship_date;
            FETCH check_real_ship_date INTO count_date_;
            CLOSE check_real_ship_date;
   
            IF (NVL(count_date_,0) > 1) THEN
               several_value_ := 'TRUE';
            END IF;
         END IF;
   
         IF several_value_ = 'FALSE' THEN
            OPEN check_real_ship_date_package;
            FETCH check_real_ship_date_package INTO count_date_package_;
            CLOSE check_real_ship_date_package;
   
            IF (NVL(count_date_package_,0) > 1) THEN
               several_value_ := 'TRUE';
            END IF;
         END IF;

         -- Note: For Argentinian Layout         
         numeration_group_         := Identity_Invoice_Info_API.Get_Numeration_Group(header_rec_.company, header_rec_.customer_no,party_);
         incl_tax_amount_in_price_ := Invoice_Numeration_Group_API.Get_Incl_Tax_Amount_Inv_Print(company_, party_, numeration_group_);
         comp_addr_id_             := Company_Address_Type_API.Get_Company_Address_Id(header_rec_.company, Address_Type_Code_API.Decode('INVOICE'),'TRUE');
         -- DIS003 start
         IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
            compaddr1_ := Company_Address_API.Get_Address1(header_rec_.company, comp_addr_id_);
            compaddr2_ := Company_Address_API.Get_Address2(header_rec_.company, comp_addr_id_);
            compaddr3_ := company_Address_API.Get_Zip_Code(header_rec_.company, comp_addr_id_);
            compaddr4_ := Company_Address_API.Get_City(header_rec_.company,comp_addr_id_);
            compaddr5_ := Company_Address_API.Get_State(header_rec_.company,comp_addr_id_);
            compaddr6_ := Company_Address_API.Get_County(header_rec_.company, comp_addr_id_);
            compaddr7_ := SUBSTR(Iso_Country_API.Get_Description(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),Iso_Language_API.Get_Description(language_code_)), 1, 50);

            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),
                                                                                    compaddr1_,
                                                                                    compaddr2_,
                                                                                    compaddr3_,
                                                                                    compaddr4_,
                                                                                    compaddr5_,
                                                                                    compaddr6_,
                                                                                    compaddr7_);
            comp_addr1_ := Company_API.Get_Name (header_rec_.company);
            comp_addr2_ := address_rec_.address1;
            comp_city_desc_ := address_rec_.address2;
            comp_zip_country_ := address_rec_.address3;
            comp_state_desc_ := address_rec_.address4;
            comp_phone_ := address_rec_.address5;
         ELSE
	        comp_addr1_               := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,1);
	        comp_addr2_               := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,2);
	        comp_addr3_               := Company_Address_API.Get_Address3(header_rec_.company,comp_addr_id_);
	        comp_addr4_               := Company_Address_API.Get_Address4(header_rec_.company,comp_addr_id_);
	        comp_addr5_               := Company_Address_API.Get_Address5(header_rec_.company,comp_addr_id_);
	        comp_addr6_               := Company_Address_API.Get_Address6(header_rec_.company,comp_addr_id_);
	        comp_city_                := Company_Address_API.Get_City(header_rec_.company,comp_addr_id_);
	        comp_state_               := Company_Address_API.Get_State(header_rec_.company,comp_addr_id_);
	        comp_zip_                 := Company_Address_API.Get_Zip_Code(header_rec_.company,comp_addr_id_);
	        comp_phone_               := Comm_Method_API.Get_Value('COMPANY', header_rec_.company, Comm_Method_Code_API.Decode('PHONE'), 1, comp_addr_id_, sysdate);
	        comp_country_             := Company_Address_API.Get_Country(header_rec_.company, comp_addr_id_);
	        comp_county_              := Company_Address_API.Get_County(header_rec_.company, comp_addr_id_);
	        comp_zip_country_         := comp_zip_ ||'-'||comp_country_;
	        comp_state_name_          := State_Codes_API.Get_State_Name(Iso_Country_API.Encode(comp_country_), comp_state_);
	        comp_state_desc_          := comp_state_ || ': ' || comp_state_name_;
	        comp_city_name_           := City_Code_API.Get_City_Name(Iso_Country_API.Encode(comp_country_), comp_state_, comp_county_, comp_city_);
	        comp_city_desc_           := comp_city_ || ': ' || comp_city_name_;
         END IF;
         -- DIS003 end
   
         salesman_id_ := Customer_Order_API.Get_Salesman_Code(header_rec_.order_no);
         IF (salesman_id_ IS NULL) THEN
             salesman_id_ := Cust_Ord_Customer_API.Get_Salesman_Code(header_rec_.customer_no);
         END IF;
   
         salesman_desc_ := Sales_Part_Salesman_API.Get_Name(salesman_id_);
         salesman_      := salesman_desc_;
         region_        := Sales_Region_API.Get_Description(Customer_Order_API.Get_Region_Code(header_rec_.order_no));
         district_      := Sales_District_API.Get_Description(Customer_Order_API.Get_District_Code(header_rec_.order_no));
         
         -- MBrant 6/6/20
         -- cust_dft_lang_cd_  := Customer_Info_API.Get_Default_Language_Db( header_rec_.customer_no );
         -- MBrant 9/28/20
         coordinator_phone_     := Order_Coordinator_API.Get_Phone(Customer_Order_API.Get_Authorize_Code(header_rec_.order_no)); 
   
         document_address_id_ := Customer_Info_Address_API.Get_Default_Address(header_rec_.customer_no,Address_Type_Code_API.Decode('INVOICE'));
         doc_add_state_code_  := Customer_Info_Address_API.Get_State(header_rec_.customer_no, document_address_id_);
         
         
         -- Add MBrant 6/12/20
         IF ( header_rec_.customer_no = '301147' ) THEN 
            cc_first_name_     := Order_Credit_Card_API.Get_First_Name(order_no_);            
            cc_last_name_      := Order_Credit_Card_API.Get_Last_Name(order_no_);          
            cc_address_line_   := Order_Credit_Card_API.Get_Address_Line(order_no_);          
            cc_city_           := Order_Credit_Card_API.Get_City(order_no_);           
            cc_state_          := Order_Credit_Card_API.Get_State(order_no_);          
            cc_zip_code_       := Order_Credit_Card_API.Get_Zip_Code(order_no_);          
            cc_country_        := Order_Credit_Card_API.Get_Country(order_no_);           
            cc_email_address_  := Order_Credit_Card_API.Get_Email(order_no_);             
         END IF;   
         -- End Mod
         
         $IF (Component_Taxled_SYS.INSTALLED) $THEN
             our_id_at_tax_off_ := Tax_Report_Info_API.Get_Our_Id_At_Tax_Office(company_, doc_add_state_code_);       
         $END
         
         IF (region_ IS NULL) THEN
             region_district_ := district_ ;
         ELSIF (district_ IS NULL) THEN
             region_district_ := region_  ;
         ELSE
             region_district_ := region_||'/'||district_ ;
         END IF;
   
         authorization_id_    := Company_API.Get_Authorization_Id(header_rec_.company);
         auth_id_expire_date_ := Company_API.Get_Auth_Id_Expire_Date(header_rec_.company);
         activity_start_date_ := Company_API.Get_Activity_Start_Date(header_rec_.company);
         IF (activity_start_date_ IS NULL) THEN
            start_month_year_ := NULL;
         ELSE
            start_month_year_ := to_char(activity_start_date_,'MM')||'/'||to_char(activity_start_date_,'YYYY');
         END IF;
         comp_tax_id_number_  := header_rec_.tax_id_number;
         cust_tax_id_number_  := tax_id_no_;                                                              
         cust_tax_liability_  := Tax_Handling_Util_API.Get_Customer_Tax_Liability(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.company, supply_country_);
         comp_tax_liability_  := Company_Tax_Control_API.Get_Tax_Liability(header_rec_.company);
         -- DIS003 start 
         -- modify NIP presentation
         IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
            IF ((NVL(deliv_country_,country_code_)= 'PL') OR (Eu_Member_API.Encode(ISO_Country_API.Get_Eu_Member(deliv_country_)) !='Y')) THEN --Company_API.Get_Country_DB(header_rec_.company)= 'PL' THEN
               comp_tax_id_number_ := REPLACE(UPPER(comp_tax_id_number_),'PL');
            ELSE
               comp_tax_id_number_ := REPLACE(comp_tax_id_number_,'-' );
            END IF;

            -- Bug 130296 Frwopl, Removed incorrect reassigning of cust_tax_id_number_
            IF NVL(deliv_country_, country_code_) = 'PL' THEN
               cust_tax_id_number_ := REPLACE(UPPER(cust_tax_id_number_), 'PL');
            END IF;
         END IF;
         -- DIS003 end
         numeration_          := header_rec_.branch ||'-'||header_rec_.invoice_no;
         invoice_reference_   := header_rec_.series_id||'-'||header_rec_.invoice_no;
         cust_number_name_    := header_rec_.customer_no ||'-'||header_rec_.customer_name;
         pay_term_base_date_  := Invoice_API.Get_Pay_Term_Base_Date(company_, invoice_id_);
         comp_register_code_  := header_rec_.tax_id_type;
         cust_register_code_  := Customer_Document_Tax_Info_API.Get_Tax_Id_Type_Db(header_rec_.customer_no,
                                                                                   header_rec_.bill_addr_no,
                                                                                   company_,
                                                                                   supply_country_,
                                                                                   delivery_country_);
         cust_liability_desc_ := Tax_Liability_API.Get_Description(cust_tax_liability_, country_code_);
         comp_liability_desc_ := Tax_Liability_API.Get_Description(comp_tax_liability_, company_country_db_);
         IF (cust_register_code_ IS NOT NULL) THEN
            cust_tax_id_no_ := cust_register_code_ || ': ' || cust_tax_id_number_;
         END IF;
         IF (comp_register_code_ IS NOT NULL) THEN
            comp_tax_id_no_ := comp_register_code_ || ': ' || comp_tax_id_number_;
         END IF;
         IF (cust_tax_liability_ IS NOT NULL) THEN
            cust_tax_liability_desc_ := cust_tax_liability_ || ': ' || cust_liability_desc_;
         END IF;
         IF (comp_tax_liability_ IS NOT NULL) THEN
            comp_tax_liability_desc_ := comp_tax_liability_ || ': ' || comp_liability_desc_;
         END IF;
         
         
         -- MBrant 02/04/21
         payment_method_code_  :=  Payment_Way_Per_Identity_API.Get_Default_Pay_Way(company_, header_rec_.customer_no, 'Customer'); 
         payment_method_ln_    :=  Payment_Way_API.Get_Description(company_, Payment_Way_Per_Identity_API.Get_Default_Pay_Way(company_,header_rec_.customer_no, 'Customer'));         
         bank_account_ln_      :=  Payment_Address_API.Get_Default_Account(company_ , header_rec_.customer_no , 'Customer', payment_method_code_);
         bic_code_ln_          :=  Payment_Address_API.Get_Bic_Code(company_, header_rec_.customer_no, 'Customer', payment_method_code_, 
                                          Payment_Address_API.Get_Default_Address_Id(company_ ,  header_rec_.customer_no , 'Customer', payment_method_code_));
         -- End Mod 02/04/21
         
         -- MBrant 02/06/21
         create_jinsui_invoice_  := Js_Customer_Info_API.Get_Create_Js_Invoice(company_ , header_rec_.customer_no);
         IF (create_jinsui_invoice_  IS NULL) THEN
            create_jinsui_invoice_ := 'FALSE';
         END IF; 
         -- End Mod 02/06/21
         
         -- DIS003 start
         IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
            -- ADD PAYMENT ADDRRESS INFO(test)
            pay_addr_id_ := company_Address_Type_API.Get_Company_Address_Id(header_rec_.company, Address_Type_Code_API.Decode('PAY'),'TRUE');
            -- start reformat address to include country in proper language
            comppayaddr1_ := Company_Address_API.Get_Address1(header_rec_.company, pay_addr_id_);
            comppayaddr2_ := Company_Address_API.Get_Address2(header_rec_.company, pay_addr_id_);
            comppayaddr3_ := company_Address_API.Get_Zip_Code(header_rec_.company, pay_addr_id_);
            comppayaddr4_ := company_Address_API.Get_City(header_rec_.company, pay_addr_id_);
            comppayaddr5_ := Company_Address_API.Get_State(header_rec_.company, pay_addr_id_);
            comppayaddr6_ := Company_Address_API.Get_County(header_rec_.company, pay_addr_id_);
            comppayaddr7_ := SUBSTR(Iso_Country_API.Get_Description(Company_Address_API.Get_Country_Db(header_rec_.company, pay_addr_id_),Iso_Language_API.Get_Description(language_code_)), 1, 50);

            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Company_Address_API.Get_Country_Db(header_rec_.company, pay_addr_id_),
                                                                                    comppayaddr1_,
                                                                                    comppayaddr2_,
                                                                                    comppayaddr3_,
                                                                                    comppayaddr4_,
                                                                                    comppayaddr5_,
                                                                                    comppayaddr6_,
                                                                                    comppayaddr7_);
            comppayaddr1_  := Company_API.Get_Name (header_rec_.company);
            comppayaddr2_  := address_rec_.address1;
            comppayaddr3_  := address_rec_.address2;
            comppayaddr4_  := address_rec_.address3;
            comppayaddr5_  := address_rec_.address4;
            comppayaddr6_  := address_rec_.address5;
            comppayaddr7_  := address_rec_.address6;
         
            loc_deliveries_ := Get_Delivery_Note2(company_, invoice_id_);
         END IF;
         -- DIS003 end
         
          -- MBrant 10/05/20  -- Get Payment Address Information 
         OPEN get_pay_addr;
         FETCH get_pay_addr INTO pay_addr_name_,
                                 pay_address_1_, pay_address_2_, pay_address_3_,
                                 pay_address_4_, pay_address_5_, pay_address_6_, 
                                 pay_addr_zipcode_,  pay_addr_city_, pay_addr_county_, pay_addr_state_, pay_addr_country_code_;
         CLOSE get_pay_addr;
         
         -- Format Address Information 
         pay_addr_rec_   := Address_Presentation_API.Format_To_Line(Address_Presentation_API.Format_Address(                
                                                                          pay_addr_country_code_,
                                                                          pay_address_1_,
                                                                          pay_address_2_,           
                                                                          pay_address_3_,          
                                                                          pay_address_4_,                   
                                                                          pay_address_5_, 
                                                                          pay_address_6_,           
                                                                          pay_addr_city_,           
                                                                          pay_addr_county_,         
                                                                          pay_addr_state_,     
                                                                          pay_addr_zipcode_, 
                                                                          pay_addr_country_,    
                                                                          cust_dft_lang_cd_,   
                                                                          keep_blank_field_ ))  ;                 

         -- Reload Payment Address Variables 
         pay_addr_1_  := pay_addr_name_;
         pay_addr_2_  := pay_addr_rec_.address1;
         pay_addr_3_  := pay_addr_rec_.address2;
         pay_addr_4_  := pay_addr_rec_.address3;
         pay_addr_5_  := pay_addr_rec_.address4;
         pay_addr_6_  := pay_addr_rec_.address5;
         pay_addr_7_  := pay_addr_rec_.address6;
         pay_addr_8_  := pay_addr_rec_.address7;
         pay_addr_9_  := pay_addr_rec_.address8;
         pay_addr_10_ := pay_addr_rec_.address9;
         pay_addr_11_ := pay_addr_rec_.address10;
         -- End Mod  
         
        -- Add Mod MBrant 2/15/22  -- Get Supplier Shipped From Address  
         OPEN  get_supplier_addr;
         FETCH get_supplier_addr INTO supplier_name_,
                                      supplier_address_1_,   supplier_address_2_, supplier_address_3_,
                                      supplier_address_4_,   supplier_address_5_, supplier_address_6_,    supplier_addr_city_,
                                      supplier_addr_state_,  supplier_addr_zip_,  supplier_addr_county_,  supplier_addr_country_, supplier_addr_country_code_;
         CLOSE get_supplier_addr;
         
         -- Format Address Information 
         supplier_addr_rec_   := Address_Presentation_API.Format_To_Line(Address_Presentation_API.Format_Address(                
                                                                          supplier_addr_country_code_,
                                                                          supplier_address_1_,
                                                                          supplier_address_2_,           
                                                                          supplier_address_3_,          
                                                                          supplier_address_4_,                   
                                                                          supplier_address_5_, 
                                                                          supplier_address_6_,           
                                                                          supplier_addr_city_,           
                                                                          supplier_addr_county_,         
                                                                          supplier_addr_state_,     
                                                                          supplier_addr_zip_, 
                                                                          supplier_addr_country_,    
                                                                          cust_dft_lang_cd_,   
                                                                          keep_blank_field_ ))  ;                 

         -- Reload Supplier Shipped From Address 
         supplier_addr_1_  := supplier_name_;
         supplier_addr_2_  := supplier_addr_rec_.address1;
         supplier_addr_3_  := supplier_addr_rec_.address2;
         supplier_addr_4_  := supplier_addr_rec_.address3;
         supplier_addr_5_  := supplier_addr_rec_.address4;
         supplier_addr_6_  := supplier_addr_rec_.address5;
         supplier_addr_7_  := supplier_addr_rec_.address6;
         supplier_addr_8_  := supplier_addr_rec_.address7;
         supplier_addr_9_  := supplier_addr_rec_.address8;
         supplier_addr_10_ := supplier_addr_rec_.address9;
         supplier_addr_11_ := supplier_addr_rec_.address10;
         -- End Mod  
         -- Add Mod MBrant 2/15/22  -- Get Company Address use Seller's Address and replace value of comp_addr6_  
         comp_addr6_ := Company_Address_API.Get_Address_Form(company_, 
                                                             Company_Address_API.Get_Default_Address(company_, Address_Type_Code_API.Decode('INVOICE')), 
                                                             fetch_name_ => 'TRUE',
                                                             remove_empty_ => 'TRUE',
                                                             separator_ => ', ');			
         -- End Mod 2/15/2022
         -- Note: When Info Services/Order Reports Or RMB Print Work Copy is used to get the Invoice Report invoice_copy_no_ is NULL.
         -- Note: Then no need to have multiple invoice copies. Therefore invoice_copy_label_ is assigned NULL.
         IF (invoice_copy_no_ IS NULL OR invoice_copy_no_ = 0) AND (report_type_ = 2) THEN
            invoice_copy_label_ := NULL;
         ELSE
            invoice_copy_label_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                        'INVOIC',
                                                                                        'InvoiceCopyLabel',
                                                                                         NVL(invoice_copy_no_, 0),
                                                                                         language_code_,
                                                                                         'NO');
         END IF;


         has_adv_inv_ := Invoice_API.Has_Adv_Inv(header_rec_.order_no);
         Invoice_api.Get_Simulated_Payment_Plan(simulated_payment_plan_,
                                            installment_count_,
                                            company_ ,
                                            invoice_id_,
                                            has_adv_inv_ ,
                                            header_rec_.status,
                                            header_rec_.order_no,
                                            header_rec_.advance_invoice);
         
         IF (installment_count_ = 1) THEN
            due_date_ := header_rec_.due_date;
         ELSE
            due_date_ := NULL;
         END IF;
         
         print_adv_pay_on_cu_inv_ := Company_Invoice_Info_API.Get_Print_Adv_Pay_On_Cu_Inv(company_);
   
         ref_invoice_date_        := Customer_Order_Inv_Head_API.Get_Invoice_Date(header_rec_.company, ref_invoice_id_);
   
         IF (invoice_type_ = 'CUSTORDDEB') THEN
            prepayment_exist_ := Customer_Order_Inv_Item_API.Is_Prepaym_Lines_Exist(company_, invoice_id_);
            IF (prepayment_exist_ = 'TRUE') THEN
               count_ := 2;
            END IF;
         END IF;
   
         report_foot_   := Invoice_Type_API.Get_Report_Footing (company_, party_, invoice_type_ );
   
         cust_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(customer_no_, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100) ;
         
         IF Comm_Method_API.Get_Value_From_Name('CUSTOMER', header_rec_.customer_no, header_rec_.cust_ref) IS NOT NULL THEN
            cust_ref_desc_ := SUBSTR(header_rec_.cust_ref, 1, 100);
         ELSE
            cust_ref_desc_ := cust_ref_name_;
         END IF;
         
         IF (header_rec_.order_no IS NULL AND header_rec_.rma_no IS NOT NULL) THEN
            header_order_no_ := header_rec_.order_no;
         ELSE
            header_order_no_ := order_no_;
         END IF;
         
         is_zero_tax_amount_ := NVL(Invoice_Item_API.Is_Zero_Tax_Amount_(company_, invoice_id_, 'CUSTOMER_ORDER_INV_ITEM_API'), 'FALSE');
         IF (header_rec_.branch IS NOT NULL) THEN
            branch_desc_ := Branch_API.Get_Branch_Desc(company_, header_rec_.branch);
         END IF;
         customer_branch_ := Customer_Info_Address_API.Get_Customer_Branch(header_rec_.customer_no, header_rec_.bill_addr_no );   

         -- Bug 129639 Frwopl, Added customer_no_pay as first choice customer and parameter supply_country, Begin
         IF (tax_exemption_certify_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN 
            OPEN get_tax_exempt_info(NVL(header_rec_.customer_no_pay, header_rec_.customer_no), header_rec_.delivery_address_id, Iso_Country_API.Encode(header_rec_.supply_country), header_rec_.invoice_date);
            FETCH get_tax_exempt_info INTO cert_no_, jurisdiction_;
            CLOSE get_tax_exempt_info;              
         END IF;
         -- Bug 129639 Frwopl, End         
         
         -- gelr:digital_signature, begin
         IF (Company_API.Get_Localization_Country_Db(company_) = 'PT' AND company_localization_API.Get_Parameter_Value_Db(company_, 'DIGITAL_SIGNATURE') = Localization_Param_Yes_No_API.DB_YES) THEN 
            digital_signature_ := Invoice_Hash_Util_API.Get_Four_Positions(company_, invoice_id_);
         END IF;
         -- gelr:digital_signature, end
         
         -- gelr:pt_erp_certification, begin
         IF (erp_cert_flag_) THEN 
            document_type_         := saft_pt_inv_type_ ||' - '||saft_pt_inv_type_desc_;
            erp_certificate_       := Company_API.Get_Erp_Certification_No(company_);           
         END IF;
         -- gelr:pt_erp_certification, end
         
         IF (do_xml_) THEN
            -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
            Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
            Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
            Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
            Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);
   
            -- Note : Insert values for order header
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_STATE_DESC', comp_state_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_REFERENCE', header_rec_.ncf_reference);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NUMERATION_GROUP', numeration_group_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_1', comp_addr1_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_2', comp_addr2_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_3', comp_addr3_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_4', comp_addr4_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_5', comp_addr5_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_6', comp_addr6_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ZIP_COUNTRY', comp_zip_country_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_PHONE', comp_phone_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SALESMAN', salesman_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REGION_DISTRICT', region_district_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_STATE_DESC', customer_state_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_CREATED', pay_term_base_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'START_MONTH_YEAR', start_month_year_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'AUTH_EXP_DATE', auth_id_expire_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZATION_ID', authorization_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_DFT_LANG_CD', cust_dft_lang_cd_);
            -- MBrant 9/28/20
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COORDINATOR_PHONE', coordinator_phone_);
            -- MBrant 10/22/20
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALESMAN_PHONE', Comm_Method_API.Get_Default_Value('PERSON', salesman_id_, 'PHONE'));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALESMAN_EMAIL', Comm_Method_API.Get_Default_Value('PERSON', salesman_id_, 'E_MAIL'));
            -- MBrant 02/04/21
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_METHOD_LN', payment_method_ln_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_LN', bank_account_ln_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_TXT', bank_account_txt_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE_LN', bic_code_ln_);
            -- MBrant 02/06/21
            Xml_Record_Writer_SYS.Add_Element(xml_,'CREATE_JINSUI_INVOICE', create_jinsui_invoice_);
            -- DIS003 start
            IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
               -- use other fields to display NIP         
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_TAX_ID_NUMBER', cust_tax_id_number_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_TAX_ID_NUMBER', comp_tax_id_number_);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_TAX_ID_NUMBER', cust_tax_id_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_TAX_ID_NUMBER', comp_tax_id_no_);
            END IF;
            -- DIS003 end
            
            -- gelr:hu_vat_control_statement, begin
            IF (hu_vat_control_statement_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN                  
               cust_group_tax_id_number_   := Customer_Document_Tax_Info_API.Get_Group_Tax_Id_Number_Db( header_rec_.customer_no, 
                                                                                  header_rec_.bill_addr_no, 
                                                                                  header_rec_.company,
                                                                                  supply_country_,
                                                                                  delivery_country_);
               comp_group_tax_id_number_   := Tax_Liability_Countries_API.Get_Group_Tax_Id_Number_Db(company_,Company_API.Get_Country_Db(company_),header_rec_.invoice_date);
               cust_domestic_tax_id_number_:= Customer_Document_Tax_Info_API.Get_Domestic_Tax_Id_Number_Db( header_rec_.customer_no, 
                                                                                  header_rec_.bill_addr_no, 
                                                                                  header_rec_.company,
                                                                                  supply_country_,
                                                                                  delivery_country_);
               comp_domestic_tax_id_number_:= Tax_Liability_Countries_API.Get_Domestic_Tax_Id_Number_Db(company_,Company_API.Get_Country_Db(company_),header_rec_.invoice_date);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_GROUP_TAX_ID_NUMBER',cust_group_tax_id_number_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_GROUP_TAX_ID_NUMBER',comp_group_tax_id_number_);  
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_DOMESTIC_TAX_ID_NUMBER',cust_domestic_tax_id_number_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_DOMESTIC_TAX_ID_NUMBER',comp_domestic_tax_id_number_);   
            END IF;
            -- gelr:hu_vat_control_statement, end
            
            IF (tax_exemption_certify_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN             
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_EXEMPT_CERT_NO', cert_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CERT_JURISDICTION', jurisdiction_);   
            END IF;
            
            -- Added MBrant 06/12/20 Assign Credit Card Payer Address Information to Bill-to
            IF ( header_rec_.customer_no = '301147' ) THEN 
               deliv_addr_id_ := cc_first_name_ || ' ' || cc_last_name_;
               bill_addr_1_   := cc_first_name_ || ' ' || cc_last_name_;
               bill_addr_2_   := cc_address_line_;
               bill_addr_3_   := cc_city_ || ' ' || cc_state_ || ',  ' || cc_zip_code_ ;
               bill_addr_4_   := cc_country_;
               bill_addr_5_   := '     ';
               bill_addr_6_   := '     ';
               bill_addr_7_   := '     ';
               bill_addr_8_   := '     ';
               bill_addr_9_   := '     ';
               bill_addr_10_  := '     ';
               bill_addr_11_  := '     ';
            END IF;
            
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_TAX_LIABILITY', cust_tax_liability_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NUMERATION', numeration_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_REFERENCE', invoice_reference_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'OUR_ID_TAX_OFF', our_id_at_tax_off_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_TAX_LIABILITY', comp_tax_liability_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_NUMBER_NAME', cust_number_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_COPY_LABEL', invoice_copy_label_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_REGISTER_CODE', comp_register_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REGISTER_CODE', cust_register_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_CITY_DESC', comp_city_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_CITY_DESC', customer_city_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_ZIP_COUNTRY', customer_zip_country_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO', header_order_no_);

            Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_ENTERED', header_rec_.date_entered);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_NO', inv_series_and_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_ID_STR',invoice_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRE_INVOICE_NO',header_rec_.invoice_no );
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_STATUS', header_rec_.status);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_DATE', header_rec_.invoice_date);
            Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME', header_rec_.authorize_name);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO', customer_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', contract_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REF', cust_ref_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REF_DESC', cust_ref_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_1', bill_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_2', bill_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_3', bill_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_4', bill_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_5', bill_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_6', bill_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_7', bill_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_8', bill_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_9', bill_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_10', bill_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_11', bill_addr_11_);
             -- MBrant 10/5/20 -- 
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_NAME',     pay_addr_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_1',        pay_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_2',        pay_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_3',        pay_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_4',        pay_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_5',        pay_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_6',        pay_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_ZIP_CODE', pay_addr_zipcode_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_CITY',     pay_addr_city_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_COUNTY',   pay_addr_county_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_ADDR_STATE',    pay_addr_state_);
            Xml_Record_Writer_SYS.Add_Element(xml_ ,'PAY_ADDR_COUNTRY',  Iso_Country_API.Get_Description(pay_addr_country_, language_code_));
            -- End Mod 
			
            -- Add Mod MBrant 2/15/22 Supplier Shipped From Address
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_NAME',          supplier_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_ADDR_1',        supplier_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_ADDR_2',        supplier_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_ADDR_3',        supplier_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_ADDR_4',        supplier_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_ADDR_5',        supplier_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_ADDR_6',        supplier_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_ADDR_7',        supplier_addr_8_);
            -- End Mod 2/15/22   
							
            Xml_Record_Writer_SYS.Add_Element(xml_,'LABEL_NOTE', header_rec_.label_note);
            Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_NO', tax_id_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_PRICES_INCL_TAX', print_tax_db_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax_db);
            Xml_Record_Writer_SYS.Add_Element(xml_,'WANTED_DELIVERY_DATE', header_rec_.wanted_delivery_date);
            Xml_Record_Writer_SYS.Add_Element(xml_,'LATEST_SHIP_DATE', header_rec_.latest_delivery_date);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_TERMS_DESC', header_rec_.pay_terms_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_ADV_PAY_ON_CU_INV', print_adv_pay_on_cu_inv_); 
            Xml_Record_Writer_SYS.Add_Element(xml_,'SEVERAL_VALUE', several_value_); 
            -- gelr:additional_tax_numbers:INFI9-090, begin
            IF additional_tax_numbers_ = Localization_Param_Yes_No_API.DB_YES THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO_TEXT1', tax_id_no_text1_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO_TEXT2', tax_id_no_text2_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO_TEXT3', tax_id_no_text3_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO_TEXT4', tax_id_no_text4_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO_TEXT5', tax_id_no_text5_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO_TEXT6', tax_id_no_text6_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO2', tax_id_no2_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO3', tax_id_no3_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO4', tax_id_no4_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO5', tax_id_no5_); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_ID_NO6', tax_id_no6_); 
            END IF;
            -- gelr:additional_tax_numbers:INFI9-090, end            
        
            -- DIS003 start
            IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_1', comppayaddr1_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_2', comppayaddr2_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_3', comppayaddr3_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_4', comppayaddr4_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_5', comppayaddr5_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_6', comppayaddr6_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_7', comppayaddr7_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERIES',         loc_deliveries_);
            END IF;
            -- DIS003 end 
            
            -- Added MBrant 6/2/20
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CREDIT_CARDS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CREDIT_CARD');
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_FIRST_NAME', cc_first_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_LAST_NAME', cc_last_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_ADDRESS_LINE', cc_address_line_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_CITY', cc_city_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_STATE', cc_state_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_ZIP_CODE', cc_zip_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_COUNTRY', cc_country_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CC_EMAIL_ADDRESS', cc_email_address_);
            Xml_Record_Writer_SYS.End_Element(xml_,'CREDIT_CARD');
            Xml_Record_Writer_SYS.End_Element(xml_,'CREDIT_CARDS');
            
            IF (due_date_ IS NOT NULL) THEN
            -- do not add if no due date since we use count() in layout to hide a title field according to the due_date value
               Xml_Record_Writer_SYS.Add_Element(xml_,'DUE_DATE', due_date_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_CODE', header_rec_.curr_code);
            IF (copy_text_ = ',1') THEN
               copy_text_ := ' ,1';  -- the strCase in Report Designer dont like a null value in the comma separated text
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'COPY_TEXT', copy_text_);
            IF (header_rec_.rma_no IS NOT NULL) THEN
            -- do not add if no rma since we use count() in layout to hide some fields according to the rma_no value
               Xml_Record_Writer_SYS.Add_Element(xml_,'RMA_NO', header_rec_.rma_no);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PO_NO', customer_po_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_INVOICE_TEXT', header_rec_.invoice_text);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_CORRECTION_REASON', header_rec_.correction_reason); 
            Xml_Record_Writer_SYS.Add_Element(xml_,'MULTIPLE_TAX_LINES', is_zero_tax_amount_);            
            Xml_Record_Writer_SYS.Add_Element(xml_,'MULTIPLE_TAX_LINES', is_zero_tax_amount_); 
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_ID', header_rec_.branch);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_DESC', branch_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_BRANCH', customer_branch_);   
            -- gelr:alt_invoice_no_per_branch, begin
            IF (Company_Localization_API.Get_Parameter_Value_Db(company_, 'ALT_INVOICE_NO_PER_BRANCH') = Localization_Param_Yes_No_API.DB_YES) THEN  
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREFIX_A_TITLE', ALT_NUM_PREFIX_TYPE_api.Get_Name(company_,'Component A'));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREFIX_B_TITLE', ALT_NUM_PREFIX_TYPE_api.Get_Name(company_,'Component B'));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREFIX_C_TITLE', ALT_NUM_PREFIX_TYPE_api.Get_Name(company_,'Component C'));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREFIX_A',      header_rec_.prefix_a);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREFIX_B',      header_rec_.prefix_b);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREFIX_C',      header_rec_.prefix_c);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NUMBER', header_rec_.serial_number);
            END IF;
            -- gelr:alt_invoice_no_per_branch, end
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1', deliv_addr_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2', ship_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3', ship_addr_3_);
            
            -- gelr:in_hsn_sac_codes, GLOW-2331, begin
            IF (Company_Localization_API.Get_Parameter_Value_Db(company_, 'IN_HSN_SAC_CODES') = Localization_Param_Yes_No_API.DB_YES) THEN
               --If customer Address has address line 2, then state would be in the ship_addr_5_. Else it will be in ship_addr_4_. So we check both.
               IF State_Codes_API.Exists(country_code_,ship_addr_4_) THEN
                  state_code_number_ := State_Codes_API.Get_State_Code_Number(country_code_,ship_addr_4_);
                  state_name_        := State_Codes_API.Get_State_Name(country_code_, ship_addr_4_);
               ELSIF State_Codes_API.Exists(country_code_,ship_addr_5_) THEN
                  state_code_number_ := State_Codes_API.Get_State_Code_Number(country_code_,ship_addr_5_);
                  state_name_        := State_Codes_API.Get_State_Name(country_code_, ship_addr_5_);
                 
               END IF;
            END IF;
            -- gelr:in_hsn_sac_codes, GLOW-2331, end
            
            -- gelr:additional_tax_numbers, bug 148523, begin
            -- gelr:in_hsn_sac_codes, bug 148523, begin
            IF (Company_Localization_API.Get_Parameter_Value_Db(company_, 'IN_HSN_SAC_CODES') = Localization_Param_Yes_No_API.DB_YES) THEN              
               cust_address_ := Company_Address_API.Get_Address_Form(company_, 
                                                                     Company_Address_API.Get_Default_Address(company_, Address_Type_Code_API.Decode('INVOICE')), 
                                                                     fetch_name_ => 'FALSE',
                                                                     remove_empty_ => 'TRUE',
                                                                     separator_ => ', ');			
               company_document_addr_ := Address_Presentation_API.Clear_Unnecessary_Separators(cust_address_, ',');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_DOCUMENT_ADDR', company_document_addr_);
               
               cust_address_ := Company_Address_API.Get_Address_Form(company_, 
                                                                     Company_Address_API.Get_Default_Address(company_, Address_Type_Code_API.Decode('DELIVERY')), 
                                                                     fetch_name_ => 'FALSE',
                                                                     remove_empty_ => 'TRUE',
                                                                     separator_ => ', ');		                
               company_delivery_addr_     := Address_Presentation_API.Clear_Unnecessary_Separators(cust_address_, ',');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_DELIVERY_ADDR', company_delivery_addr_);
               use_buyer_doc_addr_        := Invoice_API.Get_Use_Buyer_Doc_Addr(company_, invoice_id_);                           
               cust_delivery_pan_         := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no,
                                                                             header_rec_.delivery_address_id,
                                                                             header_rec_.company,
                                                                             supply_country_,
                                                                             delivery_country_);
               company_gstin_             := Branch_API.Get_Company_Tax_Id_Number(company_, Site_Discom_Info_API.Get_Branch(header_rec_.contract));
               company_pan_               := Tax_liability_countries_api.Get_Tax_Id_Number_Db(company_, country_code_, sysdate);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'USE_BUYER_DOC_ADDR', use_buyer_doc_addr_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_DELIVERY_GSTIN', header_rec_.cust_delivery_gstin);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_DOCUMENT_GSTIN', header_rec_.cust_document_gstin);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_DOCUMENT_PAN', cust_tax_id_number_);         
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_DELIVERY_PAN', cust_delivery_pan_);
               
               $IF (Component_Discom_SYS.INSTALLED) $THEN 
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_GSTIN', company_gstin_);
               $END
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_PAN', company_pan_);   
            END IF;
            -- gelr:additional_tax_numbers, bug 148523, end
            -- gelr:in_hsn_sac_codes, bug 148523, end
            
            -- gelr:hu_org_invoice_no_ref begin
            
            IF (Company_Localization_API.Get_Parameter_Value_Db(company_, 'HU_ORG_INVOICE_NO_REF') = Localization_Param_Yes_No_API.DB_YES) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ORG_SERIES_ID', header_rec_.org_series_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ORG_INVOICE_NO', header_rec_.org_invoice_no);
            END IF;

            -- gelr:hu_org_invoice_no_ref end
            -- gelr:tax_fulfilment_date, begin 
            IF ((Company_Localization_API.Get_Parameter_Value_Db(company_,'TAX_FULFILMENT_DATE') = Localization_Param_Yes_No_API.DB_YES) AND (Tax_Liability_Date_Ctrl_API.Get_Customer_Liability_Date_Db(company_)='TAXFULFILMENTDATE'))THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FULFILMENT_DATE', header_rec_.tax_fulfilment_date);
            END IF;
            -- gelr:tax_fulfilment_date, end 

            -- gelr:prepayment_tax_document, begin
            IF Company_Localization_API.Get_Parameter_Value_Db(company_, 'PREPAYMENT_TAX_DOCUMENT') = Localization_Param_Yes_No_API.DB_YES 
                      AND  header_rec_.invoice_type = Company_Def_Invoice_Type_API.Get_Def_Co_Cre_Tax_Doc_Type(company_)  THEN 
              tax_doc_inv_id_          :=  Invoice_API.Get_Invoice_Id_Db(company_, header_rec_.customer_no, header_rec_.party_type, header_rec_.series_reference, header_rec_.number_reference);
              orig_tax_doc_series_ref_ :=  Invoice_API.Get_Series_Reference(company_, tax_doc_inv_id_);
              orig_tax_doc_number_ref_ :=  Invoice_API.Get_Number_Reference(company_, tax_doc_inv_id_);
              
              Xml_Record_Writer_SYS.Add_Element(xml_, 'ORIG_TAX_DOC_SERIES_REF', orig_tax_doc_series_ref_);
              Xml_Record_Writer_SYS.Add_Element(xml_, 'ORIG_TAX_DOC_NUMBER_REF', orig_tax_doc_number_ref_);
            END IF;   
            -- gelr:prepayment_tax_document, end                       
            
            -- gelr:in_hsn_sac_codes, GLOW-2487, begin
            Xml_Record_Writer_SYS.Add_Element(xml_,'STATE_CODE_NUMBER', state_code_number_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STATE_NAME', state_name_);
            -- gelr:in_hsn_sac_codes, GLOW-2487, end
            
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4', ship_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5', ship_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6', ship_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7', ship_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8', ship_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9', ship_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10', ship_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_11', ship_addr_11_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC', header_rec_.ship_via_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT', forward_agent_);
            -- DIS003 start 
            IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', header_rec_.delivery_terms_desc||
                                                                          ' '||header_rec_.del_terms_location);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', header_rec_.delivery_terms_desc);
            END IF;
            -- DIS003 end
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION', header_rec_.del_terms_location);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DEBIT_INVOICE_REF', debit_inv_ref_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAYMENT', debit_payment_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DEBIT_TAX', debit_tax_);  
            -- adding streamServe variables
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_FAX', customer_fax_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_EMAIL', customer_email_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG', printer_flag_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG', fax_flag_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG', email_flag_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);
            
            IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
            END IF;

            company_rec_ := Company_API.get(company_);
            
            IF company_rec_.print_senders_address = 'TRUE' THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(contract_,'TRUE'),'TRUE','TRUE',' ') );
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(company_rec_.doc_recip_address_pos,'RIGHT'));             
            
            -- gelr:invoice_copy_in_foreign_curr, bug 146331, begin
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_COPY_BASE_CURR', inv_copy_frgn_curr_);
            -- gelr:invoice_copy_in_foreign_curr, bug 146331, end
            
            -- Bug 135829, start
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Invoice', header_rec_.objkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
            -- Bug 135829, end

            -- adding footer elements
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
            
            -- Note: Document Footer for report
            IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
         
               -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
               -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
               Client_SYS.Add_To_Attr('TAX_NO', header_rec_.tax_id_number, system_footer_field_attr_);         
               
               Footer_Connection_API.Get_Footer_Details(row_,
                                                        column_title_,
                                                        column_text_,
                                                        company_,
                                                        '&VIEW',
                                                        contract_,
                                                        language_code_, 
                                                        system_footer_field_attr_);
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               
               FOR i IN 0..row_ LOOP
                   Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                   f_title_  := column_title_(i);
                   f_text_   := column_text_(i);
                   FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                      Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                   END LOOP;
                   Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
            END IF; 
            
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_INVOICE_TYPE',tax_invoice_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REF_INVOICE_DATE', ref_invoice_date_);
            IF (duplicate_ = 'TRUE') THEN
               -- This is when reprinting the original with modifications through 'Reprint Modified...' RMB option.
               date_of_duplicate_ := Site_API.Get_Site_Date(header_rec_.contract);
               date_of_duplicate_xml_ := to_char(Site_API.Get_Site_Date(header_rec_.contract), 'YYYY-MM-DD,HH24:MI:SS');
            ELSE
               -- Set the date_of_duplicate to empty since this is the original.
               date_of_duplicate_ := '';
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_OF_DUPLICATE', date_of_duplicate_xml_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DUPLICATE_OPTION', duplicate_);
            IF (print_tax_in_alternative_curr_ AND selected_alternative_curr_ = 'PARALLEL_CURRENCY') THEN               
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CURR_RATE', header_rec_.parallel_curr_rate);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CURR_RATE', header_rec_.tax_curr_rate);
            END IF;
            IF(correction_type_ = 'RATE') THEN
               deb_tax_curr_rate_ := debit_inv_rec_.tax_curr_rate;
            ELSE
               deb_tax_curr_rate_ := header_rec_.tax_curr_rate;
            END IF;   
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEB_TAX_CURR_RATE', deb_tax_curr_rate_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PREPAYMENT_EXIST', prepayment_exist_);
            IF header_rec_.order_no IS NOT NULL THEN                           
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrder', customer_order_rowkey_, 'CUSTOMER_ORDER_IVC_REP', language_code_);
            END IF;
            IF (header_rec_.rma_no IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ReturnMaterial', rma_rowkey_, 'CUSTOMER_ORDER_IVC_REP', language_code_);
            END IF;
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderInvHead', header_rec_.objkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
            -- gelr: digital_signature, begin
            IF (Company_API.Get_Localization_Country_Db(company_) = 'PT' AND company_localization_API.Get_Parameter_Value_Db(company_, 'DIGITAL_SIGNATURE') = Localization_Param_Yes_No_API.DB_YES) THEN  
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DIGITAL_SIGNATURE', digital_signature_);           
            END IF;
            -- gelr: digital_signature, end
            -- gelr:pt_erp_certification, begin
            IF (erp_cert_flag_) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_TYPE', document_type_); 
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ERP_CERTIFICATE', erp_certificate_); 
            END IF;
            -- gelr:pt_erp_certification, end
         END IF;
                     
         IF (do_rs_) THEN
            -- Note : Insert values for order header
            -- gelr:additional_tax_numbers:INFI9-090, added TAX_ID_NO_TEXT, TAX_ID_NO columns 
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no, &ORDER_NO,
               &DATE_ENTERED, &AUTHORIZE_NAME, &CUSTOMER_NO, 
               &CONTRACT, &CONTRACT_DESCRIPTION, &CUST_REF, &CUST_REF_DESC,
               &BILL_ADDR_1, &BILL_ADDR_2, &BILL_ADDR_3, &BILL_ADDR_4, &BILL_ADDR_5, &BILL_ADDR_6, &BILL_ADDR_7,
               &BILL_ADDR_8, &BILL_ADDR_9, &BILL_ADDR_10, &BILL_ADDR_11,
               &LABEL_NOTE, &VAT_NO, &WANTED_DELIVERY_DATE, &LATEST_SHIP_DATE, &DUE_DATE,
               &PAY_TERMS_DESC, &CURR_CODE, &INVOICE_NO, &INVOICE_ID_STR,&PRE_INVOICE_NO,&HEADER_STATUS,&INVOICE_DATE,
               &INVOICE_TYPE,  &COPY_TEXT, &DEL_TERMS_LOCATION,
               &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4,
               &RMA_NO,&CUSTOMER_PO_NO,
               -- Note : StreamServe start: New report table columns
               &CUSTOMER_FAX, &CUSTOMER_EMAIL, &PRINTER_FLAG, &FAX_FLAG, &EMAIL_FLAG,
               &USER_EMAIL, &USER_FILE_DIR,
               -- Note : StreamServe stop
               &PAYMENT_REFERENCE, 
               &NUMERATION_GROUP,
               &COMP_ADDR_1,
               &COMP_ADDR_2,
               &COMP_ADDR_3,
               &COMP_ADDR_4,
               &COMP_ADDR_5,
               &COMP_ADDR_6,
               &COMP_ZIP_COUNTRY,
               &COMP_PHONE,
               &SALESMAN,
               &REGION_DISTRICT,
               &CUSTOMER_STATE_DESC,
               &DATE_CREATED,
               &START_MONTH_YEAR,
               &AUTH_EXP_DATE,
               &AUTHORIZATION_ID,
               &CUST_TAX_ID_NUMBER,
               &COMP_TAX_ID_NUMBER,
               &CUST_TAX_LIABILITY,
               &NUMERATION,
               &INVOICE_REFERENCE,
               &OUR_ID_TAX_OFF,
               &COMP_TAX_LIABILITY,
               &CUST_NUMBER_NAME,
               &INVOICE_COPY_LABEL,
               &COMP_REGISTER_CODE,
               &CUST_REGISTER_CODE,
               &COMP_CITY_DESC,
               &CUSTOMER_CITY_DESC,
               &CUSTOMER_ZIP_COUNTRY,
               &COMP_STATE_DESC,
               &SHIP_VIA_DESC,
               &FORWARD_AGENT,
               &DELIVERY_TERMS_DESC,
               &DEBIT_INVOICE_REF,
               &SHIP_ADDR_1,
               &SHIP_ADDR_2,
               &SHIP_ADDR_3,
               &SHIP_ADDR_4,
               &SHIP_ADDR_5,
               &SHIP_ADDR_6,
               &SHIP_ADDR_7,
               &SHIP_ADDR_8,
               &SHIP_ADDR_9,
               &SHIP_ADDR_10,
               &SHIP_ADDR_11,
               &TAX_INVOICE_TYPE,               
               &PAYMENT, 
               &DEBIT_TAX,
               &USE_PRICE_INCL_TAX,
               &DUPLICATE_OPTION,
               &DATE_OF_DUPLICATE,
               &HEADER_INVOICE_TEXT,
               &MULTIPLE_TAX_LINES,
               &DEB_TAX_CURR_RATE,
               &COMP_BRANCH_ID,                
               &COMP_BRANCH_DESC,
               &CUSTOMER_BRANCH,
			      &HEADER_CORRECTION_REASON,
               &PREFIX_A,
               &PREFIX_B,
               &PREFIX_C,
               &SERIAL_NUMBER,
               &TAX_ID_NO_TEXT1, &TAX_ID_NO_TEXT2, &TAX_ID_NO_TEXT3, &TAX_ID_NO_TEXT4, &TAX_ID_NO_TEXT5, &TAX_ID_NO_TEXT6,
               &TAX_ID_NO2, &TAX_ID_NO3, &TAX_ID_NO4, &TAX_ID_NO5, &TAX_ID_NO6,
               -- DIS003 start
               &COMPAYADDR1,
               &COMPAYADDR2,
               &COMPAYADDR3,
               &COMPAYADDR4,
               &COMPAYADDR5,
               &COMPAYADDR6,
               &COMPAYADDR7,
               &TAX_EXEMPT_CERT_NO, 
               &CERT_JURISDICTION,
               -- DIS003 end
               -- gelr:hu_org_invoice_no_ref begin
               &ORG_SERIES_ID,
               &ORG_INVOICE_NO,
               -- gelr:hu_org_invoice_no_ref end
               -- gelr:tax_fulfilment_date, begin
               &TAX_FULFILMENT_DATE,
               -- gelr:tax_fulfilment_date, end
               -- gelr:prepayment_tax_document, begin
               &ORIG_TAX_DOC_SERIES_REF,
               &ORIG_TAX_DOC_NUMBER_REF,
               -- gelr:prepayment_tax_document, end
               -- gelr:hu_vat_control_statement, begin 
               &COMP_GROUP_TAX_ID_NUMBER,
               &CUST_GROUP_TAX_ID_NUMBER,
               &COMP_DOMESTIC_TAX_ID_NUMBER,
               &CUST_DOMESTIC_TAX_ID_NUMBER,
               -- gelr:hu_vat_control_statement, end 
               -- gelr:digital_signature, begin
               &DIGITAL_SIGNATURE,
               -- gelr:digital_signature, end
               -- gelr:pt_erp_certification, begin
               &DOCUMENT_TYPE,
               &ERP_CERTIFICATE,
               -- gelr:pt_erp_certification, end
               -- gelr:additional_tax_numbers, bug 148523, begin  
               &CUST_DELIVERY_GSTIN,
               &CUST_DOCUMENT_GSTIN,
               &USE_BUYER_DOC_ADDR,
               &COMPANY_DOCUMENT_ADDR,
               &COMPANY_DELIVERY_ADDR,
               &CUST_DOCUMENT_PAN,
               &CUST_DELIVERY_PAN,
               &COMPANY_GSTIN,
               &COMPANY_PAN,
               -- gelr:additional_tax_numbers, bug 148523, end 
               -- MBrant 6/12/20
               &CUST_DFT_LANG_CD, 
               &CC_FIRST_NAME, 
               &CC_LAST_NAME, 
               &CC_ADDRESS_LINE, 
               &CC_CITY, 
               &CC_STATE,                
               &CC_ZIP_CODE, 
               &CC_COUNTRY, 
               &CC_EMAIL_ADDRESS, 
               &COORDINATOR_PHONE, 
               -- MBrant 02/04/21
               &PAYMENT_METHOD_LN, 
               &BANK_ACCOUNT_LN,
               &BANK_ACCOUNT_TXT, 
               &BIC_CODE_LN,
               -- MBrant 02/06/21
               &CREATE_JINSUI_INVOICE,
               -- MBrant 2/22/22
               &SUPPLIER_NAME, 
               &SUPPLIER_ADDR_1,
               &SUPPLIER_ADDR_2, 
               &SUPPLIER_ADDR_3, 
               &SUPPLIER_ADDR_4, 
               &SUPPLIER_ADDR_5, 
               &SUPPLIER_ADDR_6,
               &SUPPLIER_ADDR_7  
               )               
            VALUES
               (result_key_, row_no_, parent_row_no_, header_order_no_,
               header_rec_.date_entered, header_rec_.authorize_name, customer_no_,
               contract_, contract_description_, cust_ref_name_, cust_ref_desc_,
               bill_addr_1_, bill_addr_2_, bill_addr_3_,
               bill_addr_4_, bill_addr_5_, bill_addr_6_,
               bill_addr_7_,bill_addr_8_,bill_addr_9_,bill_addr_10_,bill_addr_11_,
               header_rec_.label_note, tax_id_no_,
               header_rec_.wanted_delivery_date, header_rec_.latest_delivery_date, due_date_,
               header_rec_.pay_terms_desc,
               header_rec_.curr_code,
               inv_series_and_no_, invoice_id_, header_rec_.invoice_no,header_rec_.status,header_rec_.invoice_date,
               header_rec_.invoice_type, copy_text_, header_rec_.del_terms_location,
               page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_,
               header_rec_.rma_no,customer_po_no_,
               -- Note : StreamServe start
               customer_fax_, customer_email_, printer_flag_, fax_flag_, email_flag_,
               user_email_, user_file_dir_,
               -- Note : StreamServe stop
               header_rec_.ncf_reference,
               numeration_group_,
               comp_addr1_,
               comp_addr2_,
               comp_addr3_,
               comp_addr4_,
               comp_addr5_,
               comp_addr6_,
               comp_zip_country_,
               comp_phone_,
               salesman_,
               region_district_,
               customer_state_desc_,
               pay_term_base_date_,
               start_month_year_,
               auth_id_expire_date_,
               authorization_id_,
               cust_tax_id_no_,
               comp_tax_id_no_,
               cust_tax_liability_desc_,
               numeration_,
               invoice_reference_,
               our_id_at_tax_off_,
               comp_tax_liability_desc_,
               cust_number_name_,
               invoice_copy_label_,
               comp_register_code_,
               cust_register_code_,
               comp_city_desc_,
               customer_city_desc_,
               customer_zip_country_,
               comp_state_desc_,
               header_rec_.ship_via_desc,
               forward_agent_,
               header_rec_.delivery_terms_desc,
               debit_inv_ref_,
               deliv_addr_id_,
               ship_addr_2_,
               ship_addr_3_,
               ship_addr_4_,
               ship_addr_5_,
               ship_addr_6_,
               ship_addr_7_,
               ship_addr_8_,
               ship_addr_9_,
               ship_addr_10_,
               ship_addr_11_,
               tax_invoice_type_,
               debit_payment_, 
               debit_tax_,
               header_rec_.use_price_incl_tax_db,
               duplicate_,
               date_of_duplicate_,
               header_rec_.invoice_text,
               is_zero_tax_amount_,
               debit_inv_rec_.tax_curr_rate,
               header_rec_.branch,
               branch_desc_,
               customer_branch_,
			      header_rec_.correction_reason,
               header_rec_.prefix_a,
               header_rec_.prefix_b,
               header_rec_.prefix_c,
               header_rec_.serial_number,
               tax_id_no_text1_, tax_id_no_text2_, tax_id_no_text3_, tax_id_no_text4_, tax_id_no_text5_, tax_id_no_text6_,
               tax_id_no2_, tax_id_no3_, tax_id_no4_, tax_id_no5_, tax_id_no6_,
               -- DIS003 start
               comppayaddr1_,
               comppayaddr2_,
               comppayaddr3_,
               comppayaddr4_,
               comppayaddr5_,
               comppayaddr6_,
               comppayaddr7_,
               cert_no_,
               jurisdiction_,
               -- DIS003 end)
               -- gelr:hu_org_invoice_no_ref begin
               header_rec_.org_series_id,
               header_rec_.org_invoice_no,
               -- gelr:hu_org_invoice_no_ref end
               -- gelr:tax_fulfilment_date, begin
                header_rec_.tax_fulfilment_date,
                -- gelr:tax_fulfilment_date, end,
                -- gelr:prepayment_tax_document, begin
                orig_tax_doc_series_ref_,
                orig_tax_doc_number_ref_,
                -- gelr:prepayment_tax_document, end
                -- gelr:hu_vat_control_statement, begin 
               comp_group_tax_id_number_,
               cust_group_tax_id_number_,
               comp_domestic_tax_id_number_,
               cust_domestic_tax_id_number_,
               -- gelr:hu_vat_control_statement, end 
               -- gelr:digital_signature, begin
               digital_signature_,
               -- gelr:digital_signature, end
               -- gelr:pt_erp_certification, begin
               document_type_,
               erp_certificate_,
               -- gelr:pt_erp_certification, end
               -- gelr:additional_tax_numbers, bug 148523, begin
               header_rec_.cust_delivery_gstin,
               header_rec_.cust_document_gstin,
               use_buyer_doc_addr_,
               company_document_addr_,
               company_delivery_addr_,
               cust_tax_id_number_,
               cust_delivery_pan_,
               company_gstin_,
               company_pan_,
               -- gelr:additional_tax_numbers, bug 148523, end
               -- MBrant 6/12/20
               cust_dft_lang_cd_, 
               cc_first_name_, 
               cc_last_name_, 
               cc_address_line_, 
               cc_city_, 
               cc_state_,
               cc_zip_code_, 
               cc_country_, 
               cc_email_address_,
               coordinator_phone_ , 
               -- MBrant 02/04/21
               payment_method_ln_,
               bank_account_ln_, 
               bank_account_txt_,
               bic_code_ln_, 
               -- MBrant 02/06/21
               create_jinsui_invoice_,              
               -- MBrant 02/15/22
               supplier_addr_1_, 
               supplier_addr_2_, 
               supplier_addr_3_,
               supplier_addr_4_,
               supplier_addr_5_, 
               supplier_addr_6_, 
               supplier_addr_7_,
               supplier_addr_8_   
               );

            parent_row_no_ := row_no_;
            row_no_        := row_no_ + 1;
         END IF;

         -- gelr:prepayment_tax_document, begin  
         prepayment_tax_document_ := Company_Localization_API.Get_Parameter_Value_Db(company_, 'PREPAYMENT_TAX_DOCUMENT');        
         IF ( prepayment_tax_document_ = Localization_Param_Yes_No_API.DB_YES AND
            header_rec_.adv_inv_ref IS NOT NULL) THEN  
            tax_doc_ := TRUE;
         END IF;
         -- gelr:prepayment_tax_document, end                    
           
         -- Note : For the Correction Invoices there should be two loops for Before Correction and After Correction.
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINE_TYPES');
         END IF;
         cor_inv_type_ := Company_Def_Invoice_Type_API.Get_Def_Co_Cor_Inv_Type(company_);
         IF (header_rec_.invoice_type = cor_inv_type_) THEN
            count_ := 2;
         END IF;

         FOR recs_ IN 1..count_ LOOP
            item_sign_                  := 1;
            net_curr_amount_            := 0;
            vat_curr_amount_            := 0;
            gross_curr_amount_          := 0;
            sub_total_                  := 0;
            sub_total_gross_            := 0;
            total_tax_                  := 0;
            charge_group_sum_           := 0;
            total_charge_sum_           := 0;
            sub_total_amount_           := 0;
            total_charge_group_vat_sum_ := 0;
            grp_sum_incl_tax_           := 0;
            sub_total_incl_tax_         := 0;
            IF (header_rec_.invoice_type = cor_inv_type_) AND ( recs_ = 1) THEN
               correction_text_ := 'BEFORECORRECTION';
               -- Note : For credit lines of the correction invoice amounts should be multiplied by -1.
               item_sign_ := -1;
            ELSIF (header_rec_.invoice_type = cor_inv_type_) AND ( recs_ = 2) THEN 
               correction_text_ := 'AFTERCORRECTION';
            END IF;
   
            -- Note : The flag prel_update_allowed is 'FALSE' only for credit lines of the correction invoices.
            --        For all the other invoice lines it is 'TRUE'.
            IF (correction_text_ = 'BEFORECORRECTION') THEN
               prel_update_allowed_ := 'FALSE';
               tax_round_amount_    := NVL(Invoice_Item_API.Get_Tax_Rounding_Amount(company_, ref_invoice_id_), 0);
            ELSE
               prel_update_allowed_ := 'TRUE';
               tax_round_amount_    := NVL(Invoice_Item_API.Get_Tax_Rounding_Amount(company_, invoice_id_), 0);
            END IF;
         
            IF (prepayment_exist_ = 'TRUE') THEN
               IF ( recs_ = 1) THEN
                  prepayment_text_     := 'INVOICELINES';
                  prel_update_allowed_ := 'TRUE';
               ELSIF ( recs_ = 2) THEN
                  prepayment_text_     := 'PREPAYMENTLINES';
                  prel_update_allowed_ := 'FALSE'; 
                  item_sign_           := -1;
               END IF;
            END IF;
   
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINE_TYPE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CORRECTION_TEXT', correction_text_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREPAYMENT_TEXT', prepayment_text_);              
            END IF;
            
            -- Bug 140588, Removed the parameter first_correction_ivc_.
            -- Normal lines
            Print_Invoice_Line___(  lines_exist_,
                                    currency_rounding_,
                                    xml_,
                                    print_config_id_,
                                    ref_invoice_id_,
                                    net_curr_amount_,
                                    vat_curr_amount_,
                                    sub_total_,
                                    sub_total_gross_,
                                    row_no_   ,
                                    parent_row_no_,
                                    sub_total_incl_tax_,
                                    address_rec_,
                                    addr_rec_,
                                    invoice_id_,
                                    tax_invoice_param_,
                                    item_sign_,
                                    result_key_,   
                                    order_no_,
                                    header_print_control_code_,
                                    several_value_,
                                    print_tax_db_,
                                    header_rec_.use_price_incl_tax_db,
                                    debit_inv_ref_,
                                    invoice_type_,
                                    cor_inv_type_,
                                    company_,
                                    contract_,
                                    language_code_,
                                    document_code_,
                                    customer_po_no_,
                                    ref_tax_inv_no_,
                                    prel_update_allowed_,
                                    tax_id_no_,
                                    do_xml_,
                                    do_rs_,
                                    Fnd_Boolean_API.DB_FALSE,
                                    Fnd_Boolean_API.DB_FALSE,
            
            -- Bug 140588, Removed parameter first_correction_ivc_.
                                    -- DIS003 start
                                    prepayment_text_
                                    
                                    -- DIS003 end 
                                    );
        
            -- Rental lines
            Print_Invoice_Line___(  rental_lines_exist_,
                                    currency_rounding_,
                                    xml_,
                                    print_config_id_,
                                    ref_invoice_id_,
                                    net_curr_amount_,
                                    vat_curr_amount_,
                                    sub_total_,
                                    sub_total_gross_,
                                    row_no_   ,
                                    parent_row_no_,
                                    sub_total_incl_tax_,
                                    address_rec_,
                                    addr_rec_,
                                    invoice_id_,
                                    tax_invoice_param_,
                                    item_sign_,
                                    result_key_,   
                                    order_no_,
                                    header_print_control_code_,
                                    several_value_,
                                    print_tax_db_,
                                    header_rec_.use_price_incl_tax_db,
                                    debit_inv_ref_,
                                    invoice_type_,
                                    cor_inv_type_,
                                    company_,
                                    contract_,
                                    language_code_,
                                    document_code_,
                                    customer_po_no_,
                                    ref_tax_inv_no_,
                                    prel_update_allowed_,
                                    tax_id_no_,
                                    do_xml_,
                                    do_rs_,
                                    Fnd_Boolean_API.DB_TRUE,
                                    Fnd_Boolean_API.DB_FALSE,
                                    -- DIS003 start
                                    prepayment_text_
                                    -- DIS003 end 
                                    );
            
            -- Bug 140588, Removed parameter first_correction_ivc_.
            -- Free of charge lines
            Print_Invoice_Line___(  free_of_chg_lines_exist_,
                                    currency_rounding_,
                                    xml_,
                                    print_config_id_,
                                    ref_invoice_id_,
                                    net_curr_amount_,
                                    vat_curr_amount_,
                                    sub_total_,
                                    sub_total_gross_,
                                    row_no_   ,
                                    parent_row_no_,
                                    sub_total_incl_tax_,
                                    address_rec_,
                                    addr_rec_,
                                    invoice_id_,
                                    tax_invoice_param_,
                                    item_sign_,
                                    result_key_,   
                                    order_no_,
                                    header_print_control_code_,
                                    several_value_,
                                    print_tax_db_,
                                    header_rec_.use_price_incl_tax_db,
                                    debit_inv_ref_,
                                    invoice_type_,
                                    cor_inv_type_,
                                    company_,
                                    contract_,
                                    language_code_,
                                    document_code_,
                                    customer_po_no_,
                                    ref_tax_inv_no_,
                                    prel_update_allowed_,
                                    tax_id_no_,
                                    do_xml_,
                                    do_rs_,
                                    Fnd_Boolean_API.DB_FALSE,
                                    Fnd_Boolean_API.DB_TRUE,
                                    -- DIS003 start
                                    prepayment_text_
                                    -- DIS003 end  
                                    );

            -- Note : Get vats and totals in Base Currency
            base_curr_code_     :=  Company_Finance_API.Get_Currency_Code(company_);
            parallel_curr_code_ :=  Company_Finance_API.Get_Parallel_Acc_Currency(company_);
            IF (print_tax_in_alternative_curr_ AND selected_alternative_curr_ = 'PARALLEL_CURRENCY') THEN               
               base_curr_code_ := parallel_curr_code_;
            END IF;
            
            IF (lines_exist_ = 'TRUE' OR rental_lines_exist_  = 'TRUE') THEN 
               IF (base_curr_code_ = header_rec_.curr_code AND header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
                  OPEN get_gross_price_item(prel_update_allowed_);
                  FETCH get_gross_price_item INTO total_gross_item_;
                  CLOSE get_gross_price_item;
                  net_curr_amount_  := net_curr_amount_ + NVL(total_gross_item_, 0);
               END IF;
            END IF;

            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_INSTALLED', rental_installed_);
               IF (lines_exist_ = 'TRUE') THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_CO_LINES', 'TRUE');
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_CO_LINES', 'FALSE');
               END IF;
               IF (rental_lines_exist_ = 'TRUE') THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'TRUE');
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'FALSE');
               END IF;
               IF (free_of_chg_lines_exist_ = 'TRUE') THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_FREE_OF_CHARGE', 'TRUE');
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_FREE_OF_CHARGE', 'FALSE');                  
               END IF;
            END IF;           
            
            IF ((rental_lines_exist_ = Fnd_Boolean_API.DB_TRUE OR lines_exist_ = Fnd_Boolean_API.DB_TRUE) AND (header_rec_.invoice_type = cor_inv_type_ AND recs_ = 1))  THEN
               fee_amount_            := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, ref_invoice_id_), 0);
               fee_vat_amount_        := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Tax_Amount(company_, ref_invoice_id_), 0);
               corr_round_amount_cre_ := NVL(Customer_Invoice_Pub_Util_API.Get_Rounding_Amount(company_, ref_invoice_id_), 0);
               round_amount_          := corr_round_amount_cre_;
            ELSE
               fee_amount_            := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, invoice_id_), 0);
               fee_vat_amount_        := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Tax_Amount(company_, invoice_id_), 0);
               corr_round_amount_deb_ := NVL(Customer_Invoice_Pub_Util_API.Get_Rounding_Amount(company_, invoice_id_), 0);
               round_amount_          := corr_round_amount_deb_;
            END IF;
                  
            -- Note : Retrive the sub totals
            sub_total_amount_  := net_curr_amount_ + fee_amount_ * item_sign_;
            
            -- MBrant 6/3/2020 Total Adjusted Net Weight
               OPEN  get_part_weight;
               FETCH get_part_weight INTO total_weight_;
               CLOSE get_part_weight;
               
            
            -- DIS003 start 
            IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
               -- cursor moved earlier to improve subtotal segment handling
               -- 1) for polish layout, use gross in subtotal
               -- 2) show subtotal only if charges exist otherwise subtotals will be the same as total and is not necessary
               loc_sub_total_tax_amount_ := vat_curr_amount_ + NVL(fee_vat_amount_,0)* item_sign_;
               OPEN exist_charges(prel_update_allowed_);
               FETCH exist_charges INTO exist_charges_;
               CLOSE exist_charges;
               IF (exist_charges_ = &TRUE) THEN
                  NULL;
               ELSE
                 loc_show_subtotal_ := FALSE;
               END IF;
               IF loc_show_subtotal_ THEN                  
                  loc_show_sub_total_items_ := 'TRUE';
               ELSE
                  loc_show_sub_total_items_ := 'FALSE';
               END IF;
            END IF;
            -- DIS003 end 
            
            IF (do_xml_) THEN
               -- Note : Insert subtotal
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SUB_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_WEIGHT', NVL(total_weight_,0));
               -- gelr:pt_diff_tax_code_credit_invoic, begin
               IF (pt_credit_invoice_ = &TRUE) THEN     
                  Xml_Record_Writer_SYS.Add_Element(xml_,'FEE_AMOUNT', ABS(fee_amount_));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_AMOUNT', ABS(sub_total_amount_  * item_sign_));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_INCL_TAX', ABS(sub_total_incl_tax_  * item_sign_));
               -- gelr:pt_diff_tax_code_credit_invoic, end   
               ELSE 
               Xml_Record_Writer_SYS.Add_Element(xml_,'FEE_AMOUNT', fee_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_AMOUNT', sub_total_amount_  * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_INCL_TAX', sub_total_incl_tax_  * item_sign_);
               END IF;
               -- DIS003 start
               IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_AMOUNT', NVL(loc_sub_total_tax_amount_,0)*item_sign_); 
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHOW_SUB_TOTAL_ITEMS', loc_show_sub_total_items_);         
               END IF;
               -- DIS003 end 
               Xml_Record_Writer_SYS.End_Element(xml_, 'SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'SUB_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               -- Note : Insert subtotal
               -- gelr:indian_invoice:INFI9-080, begin
               -- DIS003 start 
               --  added TAX_AMOUNT, SHOW_SUB_TOTAL_ITEMS
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                     &BLOCK_NO, 
                     &TOTAL_WEIGHT,
                     &FEE_AMOUNT, 
                     &SUB_TOTAL_AMOUNT, 
                     &SUB_TOTAL_INCL_TAX, 
                     &TAX_AMOUNT, &SHOW_SUB_TOTAL_ITEMS)
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                     &BLOCK_SUB_TOTAL,
                     NVL(total_weight_,0),                      
                     DECODE(pt_credit_invoice_, &FALSE, fee_amount_, ABS(fee_amount_)), 
                     DECODE(pt_credit_invoice_, &FALSE, sub_total_amount_, ABS(sub_total_amount_)), 
                     DECODE(pt_credit_invoice_, &FALSE, sub_total_incl_tax_, ABS(sub_total_incl_tax_)), 
                     NVL(loc_sub_total_tax_amount_,0), loc_show_sub_total_items_);
               -- gelr:indian_invoice:INFI9-080, end
               row_no_ := row_no_ + 1;
            END IF;

            --Note: Include tax in Fee Amount for Argentinian Layout
            IF (incl_tax_amount_in_price_ = 'TRUE') AND (company_country_db_ = 'AR') THEN
               fee_amount_tax_ := 0;
               tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, invoice_id_, 100000, '*', '*', '*');
               FOR i IN 1 .. tax_table_.COUNT LOOP
                  IF Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_table_(i).tax_code) = 'INCLUDE' THEN
                     fee_amount_tax_ :=  fee_amount_tax_ + tax_table_(i).tax_percentage;
                  END IF;
               END LOOP;
               fee_amount_ar_ := NVL(fee_amount_,0 ) * (1 + fee_amount_tax_/100);
            ELSE
               fee_amount_ar_ := NVL(fee_amount_,0 );
            END IF;
   
            --Note: Calculate sub total for Argentinian Layout
            sub_total_       := sub_total_ + fee_amount_ar_ * item_sign_ ;
            sub_total_gross_ := sub_total_gross_ * item_sign_ ;
            
            IF (do_xml_) THEN
               --Note: Insert sub total for Argentinian Layout
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_SUB_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'FEE_AMOUNT', fee_amount_ar_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL', sub_total_ * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_GROSS', sub_total_gross_ * item_sign_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_SUB_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               --Note: Insert sub total for Argentinian Layout
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO,
                   &FEE_AMOUNT, &SUB_TOTAL)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_SUB_TOTAL_AR,
                   fee_amount_ar_, sub_total_);
               row_no_ := row_no_ + 1;
            END IF;

            -- DIS003 start 
            IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
               old_charge_group_ := '';
            ELSE
               -- For Core
	           -- start of charge handling
	           OPEN exist_charges(prel_update_allowed_);
	           FETCH exist_charges INTO exist_charges_;
	           CLOSE exist_charges;
            END IF;
            -- DIS003 end
   
            IF (do_xml_ AND exist_charges_ = &TRUE) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUPS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');
            END IF;
            -- Note : fetching charges
            FOR charge_rec_ IN get_charges(prel_update_allowed_) LOOP
               -- Note : Charge Groups
               -- Note : New charge group, print old charge group
               IF (old_charge_group_ != charge_rec_.charge_group and old_charge_group_ IS NOT NULL) THEN
                  -- Note : get language specific charge group description and document texts
                  charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
                  IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                     charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
                  ELSE
                     charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
                  END IF;
                  -- Note : Insert charge group   
   
                  IF (do_xml_) THEN
                     -- adding to CHARGE_GROUP element
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC', charge_group_desc_);
                     -- gelr:pt_diff_tax_code_credit_invoic, begin
                     IF (pt_credit_invoice_ = &TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM', ABS(charge_group_sum_ * item_sign_ ));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GRP_SUM_INCL_TAX', ABS(grp_sum_incl_tax_ * item_sign_));                                                
                     -- gelr:pt_diff_tax_code_credit_invoic, end   
                     ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM', charge_group_sum_ * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GRP_SUM_INCL_TAX', grp_sum_incl_tax_ * item_sign_);                                                
                     END IF;
                     -- DIS003 start
                     IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_AMOUNT', loc_charge_group_vat_sum_ * item_sign_);  
                     END IF;
                     -- DIS003 end                     
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &GROUP_DESC,
                         &GROUP_SUM, 
                         &GRP_SUM_INCL_TAX )
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_CHARGE_GRP, charge_group_desc_,
                         DECODE(pt_credit_invoice_, &FALSE, charge_group_sum_, ABS(charge_group_sum_)), 
                         DECODE(pt_credit_invoice_, &FALSE, grp_sum_incl_tax_, ABS(grp_sum_incl_tax_)));
                     parent_row_no2_ := row_no_;
                     parent_row_no2_ := row_no_;
                     row_no_ := row_no_ + 1;
                  END IF;
                  charge_group_sum_ := 0;
                  grp_sum_incl_tax_ := 0;
                  -- DIS003 start
                  IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                     loc_charge_group_vat_sum_ := 0;
                  END IF;
                  -- DIS003 end

                  IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
                     END IF;
                       
                     note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, document_code_);
                       
                     IF (note_text_tab_.COUNT > 0) THEN
                        FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                           
                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                              Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                              Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                           END IF;
                           IF (do_rs_) THEN
                              INSERT INTO &REPTAB (
                                 result_key, row_no, parent_row_no, &GROUP_TEXT)
                                    VALUES (
                                       result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                              row_no_ := row_no_ + 1;
                           END IF;  
                        END LOOP;                  
                     END IF; 
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
                     END IF; 
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');
                  END IF;
               END IF;

               total_charge_group_vat_sum_ := total_charge_group_vat_sum_ + charge_rec_.vat_curr_amount;
               old_charge_group_           := charge_rec_.charge_group;

               -- Note : fetch charge data
               IF (charge_rec_.rma_charge_no IS NOT NULL) THEN
                  -- Note : RMA charge
                  rma_charge_rec_              := Return_Material_Charge_API.Get(charge_rec_.rma_no, charge_rec_.rma_charge_no);
                  charge_type_rec_             := Sales_Charge_Type_API.Get(rma_charge_rec_.contract, rma_charge_rec_.charge_type);
                  print_charge_type_db_        := charge_type_rec_.print_charge_type;
                  charge_type_                 := rma_charge_rec_.charge_type;
                  charge_row_note_id_          := rma_charge_rec_.note_id;
                  temp_charge_amount_          := rma_charge_rec_.charge_amount;
                  temp_charge_amount_incl_tax_ := rma_charge_rec_.charge_amount_incl_tax;
                  charged_qty_                 := rma_charge_rec_.charged_qty;
                  charge_sales_unit_meas_      := rma_charge_rec_.sales_unit_meas;
               ELSE
                  -- Note : normal order charge
                  co_charge_rec_               := Customer_Order_Charge_API.Get(charge_rec_.order_no, charge_rec_.charge_seq_no);
                  print_charge_type_db_        := co_charge_rec_.print_charge_type;
                  charge_type_                 := co_charge_rec_.charge_type;
                  charge_row_note_id_          := co_charge_rec_.note_id;
   
                  temp_charge_amount_          := charge_rec_.sale_unit_price;
                  temp_charge_amount_incl_tax_ := charge_rec_.unit_price_incl_tax;
                  charged_qty_                 := charge_rec_.invoiced_qty;
   
                  charge_sales_unit_meas_      := co_charge_rec_.sales_unit_meas;
               END IF;
   
               -- Bug 132751 Frwopl, Begin
               charge_type_desc_rec_ := Sales_Charge_Type_Desc_API.Get(contract_, charge_type_, language_code_);
               -- Bug 132751 Frwopl, End

               -- DIS003 start
               IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                  charge_amount_tax_ := 0;
                  tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, invoice_id_, charge_rec_.item_id, '*', '*', '*');
                  FOR i IN 1 .. tax_table_.COUNT LOOP
                     charge_amount_tax_ :=  charge_amount_tax_ + tax_table_(i).tax_percentage;
                  END LOOP;
               END IF;
               -- DIS003 end
               
               --Note: Include tax in Charge Amount for Argentinian Layout
               IF (incl_tax_amount_in_price_ = 'TRUE') AND (company_country_db_ = 'AR') THEN
                  charge_amount_tax_ := 0;
                  tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, invoice_id_, charge_rec_.item_id, '*', '*', '*');
                  FOR i IN 1 .. tax_table_.COUNT LOOP
                     IF Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_table_(i).tax_code) = 'INCLUDE' THEN
                        charge_amount_tax_ :=  charge_amount_tax_ + tax_table_(i).tax_percentage;
                     END IF;
                  END LOOP;
                  charge_amount_          := temp_charge_amount_ * (1 + charge_amount_tax_/100);
                  charge_net_curr_amount_ := charge_rec_.net_curr_amount * (1 + charge_amount_tax_/100);
               ELSE
                  charge_amount_          := temp_charge_amount_;
                  charge_incl_tax_        := temp_charge_amount_incl_tax_;
                  charge_net_curr_amount_ := charge_rec_.net_curr_amount;
                  charge_incl_tax_total_  := charge_rec_.gross_curr_amount;
               END IF;
   
               charge_group_sum_ := charge_group_sum_ + charge_net_curr_amount_;
               grp_sum_incl_tax_ := grp_sum_incl_tax_ + charge_incl_tax_total_;
               total_charge_sum_ := total_charge_sum_ + charge_net_curr_amount_;
   
               -- DIS003 start
               IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                  loc_charge_group_vat_sum_ := loc_charge_group_vat_sum_ + charge_rec_.net_curr_amount * (charge_amount_tax_/100); 
               END IF;
               -- DIS003 end

               -- Note : Charge Rows/types
               IF (print_charge_type_db_ = 'Y') THEN
                  -- Note: Get the charge description according to the customer invoice.
                  charge_type_desc_ := charge_rec_.description;
                  -- Bug 142304, start
                  charge_type_desc_rec_ := Sales_Charge_Type_Desc_API.Get(contract_, charge_rec_.charge_type, language_code_);
                  -- Bug 142304, end
                  
                  -- Note : Insert charge row

                  fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, charge_rec_.vat_code );
                  IF (fee_type_ = 'NOTAX') THEN
                     total_chg_tax_pct_ := '';  
                  ELSE
                     total_chg_tax_pct_ := Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_INVOICE, invoice_id_,
                                                                                        charge_rec_.item_id, '*', '*', '*');
                  END IF;
                  
                  IF Source_Tax_Item_API.Multiple_Tax_Items_Exist(company_, Tax_Source_API.DB_INVOICE, invoice_id_,
                                                                  charge_rec_.item_id, '*', '*', '*') = 'TRUE' THEN
                     total_chg_tax_pct_ := NULL;
                  END IF;
   
                  invoice_line_no_ := NULL;
                  IF ((charge_rec_.charge_seq_no IS NOT NULL AND charge_rec_.line_no IS NOT NULL AND charge_rec_.release_no IS NOT NULL)
                                     OR (charge_rec_.rma_charge_no IS NOT NULL AND charge_rec_.order_no IS NOT NULL)) THEN
                     OPEN get_invoice_line_no(prel_update_allowed_, charge_rec_.order_no, charge_rec_.charge_seq_no);
                     FETCH get_invoice_line_no INTO invoice_line_no_;
                     CLOSE get_invoice_line_no;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE', charge_type_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DESC', charge_type_desc_);
                     -- DIS003 start
                     IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT', charge_amount_);
                     ELSE
                        -- gelr:pt_diff_tax_code_credit_invoic, begin
                        IF (pt_credit_invoice_ = &TRUE) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT', ABS(charge_amount_ * item_sign_));
                        -- gelr:pt_diff_tax_code_credit_invoic, end   
                        ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT', charge_amount_ * item_sign_);
                     END IF;
                     END IF;
                     -- DIS003 end
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGED_QTY',charged_qty_ * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_UNIT_MEAS', charge_sales_unit_meas_);
                     -- gelr:pt_diff_tax_code_credit_invoic, begin
                     IF (pt_credit_invoice_ = &TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CHARGED_AMOUNT', ABS(charge_net_curr_amount_ * item_sign_));
                     -- gelr:pt_diff_tax_code_credit_invoic, end   
                     ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CHARGED_AMOUNT', charge_net_curr_amount_ * item_sign_);
                     END IF;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_ORDER_NO', charge_rec_.order_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_VAT_CODE',charge_rec_.vat_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_VAT_PERCENT', total_chg_tax_pct_);
   
                     -- DIS003 start
                     IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                        loc_tax_character_ := Get_Tax_Character_Display___(header_rec_.company, charge_rec_.vat_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', loc_tax_character_);
                     END IF;
                     -- DIS003 end
                     
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_PERCENT',charge_rec_.charge_percent);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_PERCENT_BASIS',charge_rec_.charge_percent_basis);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesChargeType', charge_rec_.rowkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderCharge', Customer_Order_Charge_API.Get_Objkey(charge_rec_.order_no, charge_rec_.charge_seq_no), 'CUSTOMER_ORDER_IVC_REP', language_code_);
                     IF (invoice_line_no_ IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_LINE_NO', invoice_line_no_);
                     END IF;
                     -- DIS003 start
                     IF (print_tax_db_ = 'Y' OR header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE OR tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                        -- DIS003 end
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX',charge_incl_tax_ * item_sign_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX_TOTAL',charge_incl_tax_total_ * item_sign_);
                     END IF;
                  END IF;
                  
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &CHARGE_TYPE, &CHARGE_TYPE_DESC,
                         &CHARGE_AMOUNT, &CHARGED_QTY, &CHARGE_UNIT_MEAS,
                         &TOTAL_CHARGED_AMOUNT,
                         &CHARGE_ORDER_NO, &CHARGE_VAT_CODE, 
                         &CHARGE_PERCENT, &CHARGE_PERCENT_BASIS, &CHARGE_VAT_PERCENT)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_CHARGE_LINES, charge_type_, charge_type_desc_,
                         DECODE(pt_credit_invoice_, &FALSE, charge_amount_, ABS(charge_amount_)), charged_qty_, charge_sales_unit_meas_,
                         DECODE(pt_credit_invoice_, &FALSE, charge_net_curr_amount_, ABS(charge_net_curr_amount_)),
                         charge_rec_.order_no, charge_rec_.vat_code,
                         charge_rec_.charge_percent, charge_rec_.charge_percent_basis, total_chg_tax_pct_);
                     parent_row_no2_ := row_no_;
                     row_no_         := row_no_ + 1;
                  END IF;
                  IF (charge_type_desc_rec_.note_id IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXTS');
                     END IF;
                  
                     note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_type_desc_rec_.note_id, document_code_);
                  
                     IF (note_text_tab_.COUNT > 0) THEN
                        FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  
                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXT');
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DOC_TEXT', note_text_tab_(n));
                              Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXT');
                           END IF;
                           IF (do_rs_) THEN
                              INSERT INTO &REPTAB (
                                 result_key, row_no, parent_row_no, &CHARGE_TYPE_DOC_TEXT)
                              VALUES (
                                 result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                              row_no_ := row_no_ + 1;
                           END IF;  
                        END LOOP;                  
                     END IF; 
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXTS');
                     END IF; 
                  END IF;
                  
                  IF (charge_row_note_id_ IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXTS');
                     END IF;
                  
                     note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_row_note_id_, document_code_);
                  
                     IF (note_text_tab_.COUNT > 0) THEN
                        FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  
                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXT');
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_ROW_DOC_TEXT', note_text_tab_(n));
                              Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXT');
                           END IF;
                           IF (do_rs_) THEN
                              INSERT INTO &REPTAB (
                                 result_key, row_no, parent_row_no, &CHARGE_ROW_DOC_TEXT)
                              VALUES (
                                 result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                              row_no_ := row_no_ + 1;
                           END IF;  
                        END LOOP;                  
                     END IF; 
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXTS');
                     END IF; 
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEM');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
                  END IF;
               END IF;
            END LOOP;

            -- Note : Last charge group
            IF (old_charge_group_ IS NOT NULL) THEN
               -- Note : get language specific charge group description and document texts
               charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
               IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                  charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
               ELSE
                  charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
               END IF;
               -- Note : Insert last charge group
               IF (do_xml_) THEN
                  -- adding to CHARGE_GROUP element
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
                  -- gelr:pt_diff_tax_code_credit_invoic, begin
                  IF (pt_credit_invoice_ = &TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_SUM', ABS(charge_group_sum_ * item_sign_));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'GRP_SUM_INCL_TAX', ABS(grp_sum_incl_tax_ * item_sign_));
                  -- gelr:pt_diff_tax_code_credit_invoic, end   
                  ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GRP_SUM_INCL_TAX',grp_sum_incl_tax_ * item_sign_);
                  END IF;
                  -- DIS003 start
                  IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_AMOUNT',loc_charge_group_vat_sum_ * item_sign_);
                  END IF;
                  -- DIS003 end                    
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO, &GROUP_DESC,
                      &GROUP_SUM, 
                      &GRP_SUM_INCL_TAX )
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_CHARGE_GRP, charge_group_desc_,
                      DECODE(pt_credit_invoice_, &FALSE, charge_group_sum_, ABS(charge_group_sum_)), 
                      DECODE(pt_credit_invoice_, &FALSE, grp_sum_incl_tax_, ABS(grp_sum_incl_tax_)));
                  parent_row_no2_ := row_no_;
                  row_no_ := row_no_ + 1;
               END IF;
               -- DIS003 start
               IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                  loc_charge_group_vat_sum_ := 0;
               END IF;
               -- DIS003 end
               
               IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
                  END IF;
         
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, document_code_);
         
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
         
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &GROUP_TEXT)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                           row_no_ := row_no_ + 1;
                        END IF;  
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
                  END IF; 
               END IF;
            END IF;
            IF (do_xml_ AND exist_charges_ = &TRUE) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUPS');
            END IF;
            -- end of charge handling
   
            --Note: Calculate sub total with charges for Argentinian Layout
            sub_total_with_charges_ := sub_total_ + NVL(total_charge_sum_, 0);
   
            --Note: Insert sub total with charges for Argentinian Layout
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOT_WITH_CHARGES', sub_total_with_charges_ * item_sign_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO,
                   &SUB_TOT_WITH_CHARGES )
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_SUB_TOT_CHG_AR,
                   sub_total_with_charges_);
               row_no_ := row_no_ + 1;
            END IF;

            -- Note : calculate totals
            net_curr_amount_   := sub_total_amount_ + NVL(total_charge_sum_, 0);
            IF (prepayment_text_ = 'PREPAYMENTLINES') THEN
               vat_curr_amount_ := vat_curr_amount_ + (fee_vat_amount_ * item_sign_) + nvl(total_charge_group_vat_sum_, 0);
            ELSE
               vat_curr_amount_ := vat_curr_amount_ + (fee_vat_amount_ * item_sign_) + NVL(total_charge_group_vat_sum_, 0)
                                     + (tax_round_amount_ * item_sign_);
            END IF;
            gross_curr_amount_ := net_curr_amount_ + vat_curr_amount_ + round_amount_ * item_sign_;

            -- Note : Insert total ex vat
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_EX_VAT_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_EX_VAT_ITEM');
               -- gelr:pt_diff_tax_code_credit_invoic, begin
               IF (pt_credit_invoice_ = &TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'NET_CURR_AMOUNT', ABS(net_curr_amount_ * item_sign_));
               -- gelr:pt_diff_tax_code_credit_invoic, end   
               ELSE 
               Xml_Record_Writer_SYS.Add_Element(xml_,'NET_CURR_AMOUNT', net_curr_amount_ * item_sign_);
               END IF;   
               Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_EX_VAT_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_EX_VAT_ITEMS');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO,
                      &NET_CURR_AMOUNT )
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_TOTAL_EX_VAT,
                      DECODE(pt_credit_invoice_, &FALSE, net_curr_amount_, ABS(net_curr_amount_)));
               row_no_ := row_no_ + 1;
            END IF;

            --Note: Get tax codes, rates and tax amounts for Argentinian Layout
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TAX_LINES');
            END IF;
            IF ((prel_update_allowed_ = 'FALSE') OR (header_rec_.invoice_type = 'CUSTORDCRE')) THEN
               -- Bug 140588, Removed first_correction_ivc_ from the cursor.
               FOR tax_rec_ IN get_tax_code_cre (TO_CHAR(invoice_id_)) LOOP
                  tax_code_rec_ := Statutory_Fee_API.Fetch_Validate_Tax_Code_Rec(company_, tax_rec_.tax_code, invoice_date_, 'TRUE', 'TRUE', 'FETCH_AND_VALIDATE');   
                  fee_type_     := tax_code_rec_.fee_type;
                  fee_rate_ :=  tax_rec_.tax_percentage;
                  IF numeration_group_ IS NOT NULL THEN
                     tax_amount_at_inv_print_ := Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_rec_.tax_code);
                  ELSE
                     tax_amount_at_inv_print_ := 'SEPARATE';
                  END IF;
                  IF NOT ((incl_tax_amount_in_price_ = 'TRUE' AND tax_amount_at_inv_print_ = 'INCLUDE')) THEN
                     total_tax_ := total_tax_ + tax_rec_.tax_code_tot;
                     IF (fee_type_ = 'TAX') THEN
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TAX_LINE');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CODE_DESC', Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code));
                           Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_RATE', fee_rate_);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_AMOUNT', tax_rec_.tax_code_tot);
                           Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TAX_LINE');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &TAX_CODE_DESC, &TAX_RATE, &TAX_AMOUNT)
                           VALUES
                              (result_key_, row_no_, parent_row_no_,
                              &BLOCK_VAT,
                              Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code), fee_rate_, tax_rec_.tax_code_tot);
                           row_no_ := row_no_ + 1;
                        END IF;  
                     END IF;
                  END IF;
               END LOOP;
            ELSE
               -- Bug 140588, Removed first_correction_ivc_ from the cursor.
               FOR tax_rec_ IN get_tax_code_deb (TO_CHAR(invoice_id_)) LOOP
                  tax_code_rec_ := Statutory_Fee_API.Fetch_Validate_Tax_Code_Rec(company_, tax_rec_.tax_code, invoice_date_, 'TRUE', 'TRUE', 'FETCH_AND_VALIDATE');   
                  fee_type_     := tax_code_rec_.fee_type;
                  fee_rate_ :=  tax_rec_.tax_percentage;
                  IF numeration_group_ IS NOT NULL THEN
                     tax_amount_at_inv_print_ := Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_rec_.tax_code);
                  ELSE
                     tax_amount_at_inv_print_ := 'SEPARATE';
                  END IF;
                  IF NOT ((incl_tax_amount_in_price_ = 'TRUE' AND tax_amount_at_inv_print_ = 'INCLUDE')) THEN
                     total_tax_ := total_tax_ + tax_rec_.tax_code_tot;
                     IF (fee_type_ = 'TAX') THEN
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TAX_LINE');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CODE_DESC', Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code));
                           Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_RATE', fee_rate_);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_AMOUNT', tax_rec_.tax_code_tot);
                           Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TAX_LINE');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &TAX_CODE_DESC, &TAX_RATE, &TAX_AMOUNT)
                           VALUES
                              (result_key_, row_no_, parent_row_no_,
                              &BLOCK_VAT,
                              Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code), fee_rate_, tax_rec_.tax_code_tot);
                           row_no_ := row_no_ + 1;
                        END IF;  
                     END IF;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TAX_LINES');
            END IF;
   
            print_tax_texts_ := Identity_Invoice_Info_API.Get_Print_Tax_Code_Text(company_,
                                                                                  header_rec_.customer_no,
                                                                                  Party_Type_API.Decode(header_rec_.party_type));
            
            -- Note : get tax codes, descriptions and tax amounts
            IF (do_xml_) THEN
              Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINES');
            END IF;
   
            IF(NOT (header_rec_.Invoice_Type = NVL(cor_inv_type_,'CUSTORDCOR'))) AND (prepayment_exist_ = 'FALSE') THEN
               
               is_zero_tax_amount_ := NVL(Invoice_Item_API.Is_Zero_Tax_Amount_(company_, invoice_id_, 'INSTANT_INVOICE_API'), 'FALSE');
               
               -- Bug 140588, Removed first_correction_ivc_ from the cursor.
               FOR get_tax_ IN get_tax_code (TO_CHAR(invoice_id_)) LOOP
                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       get_tax_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');
                  
                  external_tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);                  
                  OPEN get_vat_net_curr(get_tax_.tax_code, get_tax_.tax_percentage, currency_rounding_, external_tax_calc_method_);
                  FETCH get_vat_net_curr INTO total_discount_amount_, total_disc_amount_piv_, tax_net_curr_amount_, tax_base_curr_amount_;
                  CLOSE get_vat_net_curr;
                  
                  free_tax_base_amount_ := 0;
                  free_total_gross_amt_in_curr_ := 0;
                  sale_total_gross_amt_in_curr_ := 0;
                  FOR order_data_ IN get_order_data(get_tax_.tax_code, currency_rounding_) LOOP
                     OPEN has_free_of_charge_lines(order_data_.c1);
                     FETCH has_free_of_charge_lines INTO dummy_;
                     IF (has_free_of_charge_lines%FOUND) THEN
                        CLOSE has_free_of_charge_lines;
                        order_line_rec_ := Customer_Order_Line_API.Get(order_data_.c1, 
                                                                       order_data_.c2, 
                                                                       order_data_.c3, 
                                                                       order_data_.n1);
                        IF (order_line_rec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) THEN
                           IF (Customer_Order_API.Get_Free_Of_Chg_Tax_Pay_Par_Db(order_data_.c1) = Tax_Paying_Party_API.DB_COMPANY) THEN
                              free_tax_base_amount_   := 0;
                              get_tax_.tax_code_tot   := 0;
                              free_total_gross_amt_in_curr_ := 0;
                           ELSE                       
                              free_tax_base_amount_  := free_tax_base_amount_ + ((order_line_rec_.free_of_charge_tax_basis/order_line_rec_.buy_qty_due) * order_data_.n2);
                              IF (header_rec_.invoice_type = 'CUSTORDCRE') THEN
                                 free_tax_base_amount_ := free_tax_base_amount_ * -1;
                              END IF;
                              free_total_gross_amt_in_curr_ := get_tax_.tax_code_tot * item_sign_;                              
                           END IF;
                           free_of_charge_ := TRUE;
                        ELSE
                           free_and_sales_ := TRUE;
                        END IF;
                     ELSE
                        CLOSE has_free_of_charge_lines;
                        sales_line_ := TRUE;
                     END IF;                     
                  END LOOP;     
                  IF (base_curr_code_ = header_rec_.curr_code AND header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
                     gross_price_adjustment_ := Customer_Invoice_Pub_Util_API.Get_Gross_Price_Per_Tax_Code(company_, invoice_id_, get_tax_.tax_code,'TRUE')
                                                + Customer_Invoice_Pub_Util_API.Get_Gross_Price_Per_Tax_Code(company_, invoice_id_, get_tax_.tax_code, 'FALSE');
                     tax_net_curr_amount_    := tax_net_curr_amount_ + gross_price_adjustment_;
                     tax_base_curr_amount_   := tax_base_curr_amount_ + gross_price_adjustment_;
                  END IF;
                  
                  -- When invoicing currency is different that accounting currency and use price including tax, 
                  -- net_curr_amount will adjust to apply tax rounding. 
                  -- This adjustment will consider as discount amount (i.e. (price*quantity* price_conv_factor - net_curr_amount). 
                  -- To avoid that, we need to calculate discount by price_including_tax and gross_amount. 
                  -- (i.e. (price_inct_tax*quantity*price_conv_factor  - gross_amount)
                  IF (header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
                     total_discount_amount_  := total_disc_amount_piv_;
                  END IF;
                  
                  -- Get the net amount for which the tax is calculated.
                  total_discount_amount_ := NVL(ABS(total_discount_amount_), 0);
                  total_unit_price_ := ABS(tax_base_curr_amount_) + total_discount_amount_;
                  -- gelr:prepayment_tax_document, begin
                  IF (tax_doc_) THEN
                     Invoice_Item_API.Get_Tax_Code_Prepay_Amounts(tax_base_amount_, tax_fee_amount_, company_, invoice_id_, get_tax_.tax_code);
                  ELSE    
                     tax_fee_amount_   := get_tax_.tax_code_tot;                                      
                     tax_base_amount_  := tax_base_curr_amount_;
                  END IF;
                  -- gelr:prepayment_tax_document, end
                  
                  fee_type_         := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';   
                  ELSE
                     vat_percentage_ := get_tax_.tax_percentage;
                  END IF;
                  
                  tax_code_fee_amount_ := get_tax_.tax_code_tot + NVL(tax_code_fee_amount_, 0);
                   
                  IF (free_of_charge_) AND (NOT free_and_sales_) THEN
                     -- Has only free of charge lines.
                     total_gross_amt_in_curr := free_total_gross_amt_in_curr_;
                  ELSIF (free_and_sales_) THEN
                     -- Has a mix of normal and free of charge lines.
                     IF (fee_type_ != 'IRS1099TX') THEN
                        total_gross_amt_in_curr := (get_tax_.tax_code_tot + tax_net_curr_amount_) * item_sign_;
                     ELSE
                        tax_base_amount_ := get_tax_.tax_base_curr_amount;
                        total_gross_amt_in_curr := NULL;
                     END IF;
                  ELSIF (sales_line_) THEN
                     -- Has only normal sales lines.
                     IF (fee_type_ != 'IRS1099TX') THEN
                        total_gross_amt_in_curr := (get_tax_.tax_code_tot + tax_base_amount_) * item_sign_;
                     ELSE
                        tax_base_amount_ := get_tax_.tax_base_curr_amount;
                        total_gross_amt_in_curr := NULL;
                     END IF;                  
                  END IF;
                  -- gelr:prepayment_tax_document, begin
                  IF (tax_doc_) THEN
                     total_gross_amt_in_curr := tax_base_amount_ + tax_fee_amount_;
                  END IF;
                  -- gelr:prepayment_tax_document, end
                  invoice_date_str_ := TO_CHAR(invoice_date_,'yyyy/mm/dd');
         
                  OPEN  get_date_range(get_tax_.tax_code, invoice_date_str_);
                  FETCH get_date_range INTO valid_from_, valid_until_;
                  CLOSE get_date_range;
         
         
                  -- Get tax code texts
                  IF print_tax_texts_ = 'TRUE' THEN
                     tax_text_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'TaxCodeTexts',
                                                                                       get_tax_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                       language_code_,
                                                                                       'NO');
                  END IF;
                  
                  -- Note : insert tax code details
                  IF (do_xml_) THEN                     
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', get_tax_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_UNIT_PRICE', total_unit_price_);
                     -- gelr:pt_diff_tax_code_credit_invoic, begin
                     IF (pt_credit_invoice_ = &TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',ABS(total_gross_amt_in_curr));
                     -- gelr:prepayment_tax_document, begin
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_AMOUNT', ABS(tax_fee_amount_* item_sign_));
                        -- gelr:prepayment_tax_document, end
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', ABS(tax_base_amount_));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', ABS(total_discount_amount_));
                     -- gelr:pt_diff_tax_code_credit_invoic, end   
                     ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',total_gross_amt_in_curr );
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', tax_base_amount_);
                        -- gelr:prepayment_tax_document, begin
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_AMOUNT', tax_fee_amount_* item_sign_);
                     -- gelr:prepayment_tax_document, end
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', total_discount_amount_);
                     END IF;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_TEXTS', tax_text_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                     -- DIS003 start
                     IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                        loc_tax_character_ := Get_Tax_Character_Display___(company_, get_tax_.tax_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', loc_tax_character_);
                     END IF;
                     -- DIS003 end
                     Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINE');
                  END IF;
                  IF (do_rs_) THEN
                     -- gelr:prepayment_tax_document, modified value sent to TAX_FEE_AMOUNT
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &VAT_CODE,
                         &DESCRIPTION,
                         &TAX_FEE_AMOUNT,
                         &TOTAL_UNIT_PRICE,
                         &TAX_BASE_AMOUNT,
                         &TAX_TEXTS,
                         &TOTAL_DISCOUNT,
                         &VAT_PERCENTAGE)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_TOTAL_TAX,
                         get_tax_.tax_code,
                         description_,
                         DECODE(pt_credit_invoice_, &FALSE, tax_fee_amount_, ABS(tax_fee_amount_)),
                         total_unit_price_,
                         DECODE(pt_credit_invoice_, &FALSE, tax_base_amount_, ABS(tax_base_amount_)),
                         tax_text_,
                         DECODE(pt_credit_invoice_, &FALSE, total_discount_amount_, ABS(total_discount_amount_)),
                         vat_percentage_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            ELSIF (prel_update_allowed_ = 'FALSE') THEN
                  comp_inv_fee_vat_code_ := Company_Tax_Control_Invoic_API.Get_Inv_Fee_Tax_Code(company_);
                  -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                  FOR get_tax_ IN get_tax_code_cre_for_corr (TO_CHAR(invoice_id_)) LOOP
                  tax_net_curr_amount_ := 0;
                  tax_gross_amount_    := 0;
                  row_no_              := row_no_ + 1; 
   
                  description_         := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                               'ACCRUL',
                                                                                               'StatutoryFee',
                                                                                               get_tax_.tax_code,
                                                                                               language_code_,
                                                                                               'NO');
   
                  -- Bug 141485, added tax_base_curr_amount_excl_foc_                  
                  OPEN get_vat_net_curr_cre(get_tax_.tax_code, currency_rounding_);
                  FETCH get_vat_net_curr_cre INTO total_discount_amount_, tax_net_curr_amount_, tax_gross_amount_, tax_base_curr_amount_, tax_base_curr_amount_excl_foc_;
                  CLOSE get_vat_net_curr_cre;
                  IF (base_curr_code_ = header_rec_.curr_code AND header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
                     gross_price_adjustment_ := Customer_Invoice_Pub_Util_API.Get_Gross_Price_Per_Tax_Code(company_, invoice_id_, get_tax_.tax_code, 'FALSE');
                     tax_net_curr_amount_    := tax_net_curr_amount_ + gross_price_adjustment_;
                     tax_base_curr_amount_   := tax_base_curr_amount_ + gross_price_adjustment_;
                     tax_gross_amount_       := tax_gross_amount_ + gross_price_adjustment_;
                     -- Bug 141485, start
                     tax_base_curr_amount_excl_foc_ := tax_base_curr_amount_excl_foc_ + gross_price_adjustment_;
                     -- Bug 141485, end
                  END IF;
                  
                  IF (get_tax_.tax_code = comp_inv_fee_vat_code_) THEN
                     tax_gross_amount_ := tax_gross_amount_ + NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, ref_invoice_id_), 0) * item_sign_;
                  END IF;
               
                  IF (prepayment_exist_ = 'TRUE') AND ( tax_gross_amount_ = 0 ) THEN
                     tax_gross_amount_ := tax_net_curr_amount_;
                  END IF;

                  -- Get the net amount for which the tax is calculated.
                  total_discount_amount_ := NVL(ABS(total_discount_amount_), 0);
                  total_unit_price_ := ABS(tax_base_curr_amount_) + total_discount_amount_;
                  
                  tax_base_amount_  := tax_base_curr_amount_;
                  fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';   
                  ELSE
                     vat_percentage_ := get_tax_.tax_percentage;
                  END IF;
                  
                  tax_code_cre_fee_amount_ := get_tax_.tax_code_tot + NVL(tax_code_cre_fee_amount_, 0);
                  IF (fee_type_ != 'IRS1099TX') THEN
                     -- Bug 141485, start, tax_base_amount_ changed to tax_base_curr_amount_excl_foc_ 
                     total_gross_amt_in_curr := (get_tax_.tax_code_tot + tax_base_curr_amount_excl_foc_) * item_sign_;
                     -- Bug 141485, end
                  ELSE
                     tax_base_amount_ := get_tax_.tax_base_curr_amount;
                  END IF;
                  tax_code_cre_fee_amount_ := NVL(tax_code_fee_amount_, 0) + NVL(tax_code_cre_fee_amount_, 0);
                  
                  invoice_date_str_        := TO_CHAR(invoice_date_,'yyyy/mm/dd');
                  
                  OPEN  get_date_range(get_tax_.tax_code, invoice_date_str_);
                  FETCH get_date_range INTO valid_from_, valid_until_;
                  CLOSE get_date_range;
   
                  -- Get tax code texts
                  IF print_tax_texts_ = 'TRUE' THEN
                     tax_text_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'TaxCodeTexts',
                                                                                       get_tax_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                       language_code_,
                                                                                       'NO');
                  END IF;
   
                  -- Note : insert tax code details
                  
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', get_tax_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_UNIT_PRICE', total_unit_price_);
                     -- gelr:pt_diff_tax_code_credit_invoic, begin
                     IF (pt_credit_invoice_ = &TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',ABS(total_gross_amt_in_curr));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_AMOUNT', ABS(get_tax_.tax_code_tot * item_sign_));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', ABS(tax_base_amount_ * item_sign_));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', ABS(total_discount_amount_));
                     -- gelr:pt_diff_tax_code_credit_invoic, end   
                     ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',total_gross_amt_in_curr );
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_AMOUNT', get_tax_.tax_code_tot * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', tax_base_amount_ * item_sign_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', total_discount_amount_);
                     END IF;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_TEXTS', tax_text_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                     -- DIS003 start
                     IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                        loc_tax_character_ := Get_Tax_Character_Display___(company_, get_tax_.tax_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', loc_tax_character_);
                     END IF;
                     -- DIS003 end
                     Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &VAT_CODE,
                         &DESCRIPTION,
                         &TAX_FEE_AMOUNT,
                         &TOTAL_UNIT_PRICE,
                         &TAX_BASE_AMOUNT,
                         &TAX_TEXTS,
                         &TOTAL_DISCOUNT,
                         &VAT_PERCENTAGE)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_TOTAL_TAX,
                         get_tax_.tax_code,
                         description_,
                         DECODE(pt_credit_invoice_, &FALSE, get_tax_.tax_code_tot, ABS(get_tax_.tax_code_tot)),
                         total_unit_price_,
                         DECODE(pt_credit_invoice_, &FALSE, tax_base_amount_, ABS(tax_base_amount_)),
                         tax_text_,
                         DECODE(pt_credit_invoice_, &FALSE, total_discount_amount_, ABS(total_discount_amount_)),
                         vat_percentage_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            ELSE
               comp_inv_fee_vat_code_ := Company_Tax_Control_Invoic_API.Get_Inv_Fee_Tax_Code(company_);
               -- Bug 140588, Removed first_correction_ivc_ from the cursor.
               FOR get_tax_ IN get_tax_code_deb_for_corr (TO_CHAR(invoice_id_)) LOOP
                  row_no_      := row_no_ + 1;
                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       get_tax_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');           
   
                  tax_net_curr_amount_   := 0;
                  tax_gross_amount_      := 0;
                  
                  -- Bug 141485, added tax_base_curr_amount_excl_foc_                  
                  OPEN get_vat_net_curr_deb(get_tax_.tax_code, currency_rounding_);
                  FETCH get_vat_net_curr_deb INTO total_discount_amount_, tax_net_curr_amount_, tax_gross_amount_, tax_base_curr_amount_, tax_base_curr_amount_excl_foc_;
                  CLOSE get_vat_net_curr_deb;
                  IF (base_curr_code_ = header_rec_.curr_code AND header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
                     gross_price_adjustment_ := Customer_Invoice_Pub_Util_API.Get_Gross_Price_Per_Tax_Code(company_, invoice_id_, get_tax_.tax_code, 'TRUE');
                     tax_net_curr_amount_  := tax_net_curr_amount_ + gross_price_adjustment_;
                     tax_base_curr_amount_ := tax_base_curr_amount_ + gross_price_adjustment_;
                     tax_gross_amount_     := tax_gross_amount_ + gross_price_adjustment_;
                     -- Bug 141485, start
                     tax_base_curr_amount_excl_foc_ := tax_base_curr_amount_excl_foc_ + gross_price_adjustment_;
                     -- Bug 141485, end
                  END IF;
                  
                  -- Get Invoice Fee Amount for Company, from Customer_Invoice_Pub_Util_API
                  IF (get_tax_.tax_code = comp_inv_fee_vat_code_) THEN
                     tax_gross_amount_    := tax_gross_amount_ + NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, invoice_id_), 0);
                  END IF;
                                    
                  -- Get the net amount for which the tax is calculated. 
                  total_discount_amount_ := NVL(ABS(total_discount_amount_), 0);
                  total_unit_price_     := ABS(tax_base_curr_amount_) + total_discount_amount_;
                  
                  tax_base_amount_      := tax_base_curr_amount_;
                  fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';   
                  ELSE
                     vat_percentage_ := get_tax_.tax_percentage;
                  END IF;
                  
                  tax_code_deb_fee_amount_ := get_tax_.tax_code_tot + NVL(tax_code_deb_fee_amount_, 0);
                  IF (fee_type_ != 'IRS1099TX') THEN
                     -- Bug 141485, start, tax_base_amount_ changed to tax_base_curr_amount_excl_foc_ 
                     total_gross_amt_in_curr := (get_tax_.tax_code_tot + tax_base_curr_amount_excl_foc_) * item_sign_;
                     -- Bug 141485, end
                  ELSE
                     tax_base_amount_ := get_tax_.tax_base_curr_amount;
                     total_gross_amt_in_curr := NULL;
                  END IF;
                  
                  
                  tax_code_deb_fee_amount_ := NVL(tax_code_fee_amount_, 0) + NVL(tax_code_deb_fee_amount_, 0);
   
                  invoice_date_str_ := TO_CHAR(invoice_date_,'yyyy/mm/dd');
   
                  OPEN  get_date_range(get_tax_.tax_code, invoice_date_str_);
                  FETCH get_date_range INTO valid_from_, valid_until_;
                  CLOSE get_date_range;
   
                  -- Get tax code texts
                  IF print_tax_texts_ = 'TRUE' THEN
                     tax_text_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'TaxCodeTexts',
                                                                                       get_tax_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                       language_code_,
                                                                                       'NO');
                  END IF;
   
                  -- Note : insert tax code details
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', get_tax_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_UNIT_PRICE', total_unit_price_);
                     -- gelr:pt_diff_tax_code_credit_invoic, begin
                     IF (pt_credit_invoice_ = &TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',ABS(total_gross_amt_in_curr));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_AMOUNT', ABS(get_tax_.tax_code_tot * item_sign_));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', ABS(tax_base_amount_ * item_sign_));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', ABS(total_discount_amount_));
                     -- gelr:pt_diff_tax_code_credit_invoic, end   
                     ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',total_gross_amt_in_curr );
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_AMOUNT', get_tax_.tax_code_tot * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', tax_base_amount_ * item_sign_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', total_discount_amount_);
                     END IF;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_TEXTS', tax_text_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                     -- DIS003 start
                     IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                        loc_tax_character_ := Get_Tax_Character_Display___(company_, get_tax_.tax_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', loc_tax_character_);
                     END IF;
                     -- DIS003 end
                     Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINE');
                  END IF;
   
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &VAT_CODE,
                         &DESCRIPTION,
                         &TAX_FEE_AMOUNT,
                         &TOTAL_UNIT_PRICE,
                         &TAX_BASE_AMOUNT,
                         &TAX_TEXTS,
                         &TOTAL_DISCOUNT,
                         &VAT_PERCENTAGE)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_TOTAL_TAX,
                         get_tax_.tax_code,
                         description_,
                         DECODE(pt_credit_invoice_, &FALSE, get_tax_.tax_code_tot, ABS(get_tax_.tax_code_tot)),
                         total_unit_price_,
                         DECODE(pt_credit_invoice_, &FALSE, tax_base_amount_, ABS(tax_base_amount_)),
                         tax_text_,
                         DECODE(pt_credit_invoice_, &FALSE, total_discount_amount_, ABS(total_discount_amount_)),
                         vat_percentage_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;
            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINES');
            END IF;


            -- Note : Get vat sums  (still used by german layout?)
            /*IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'VAT_SUM_LINES');
            END IF;
            FOR vat_sums_rec_ IN get_vat_sums LOOP
               IF (nvl(vat_sums_rec_.vat_sum_curr,0) != 0) THEN
                  vat_percentage_ := Statutory_Fee_API.Get_Percentage(company_, vat_sums_rec_.vat_code);
                  -- Insert vat sums
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'VAT_SUM_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', vat_sums_rec_.vat_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_SUM', vat_sums_rec_.vat_sum_curr);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'VAT_SUM_LINE');
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no,
                            &BLOCK_NO,
                            &VAT_CODE, &VAT_PERCENTAGE, &VAT_SUM)
                     VALUES
                           (result_key_, row_no_, parent_row_no_,
                            &BLOCK_TAXES,
                            vat_sums_rec_.vat_code, vat_percentage_, vat_sums_rec_.vat_sum_curr);
                  END IF;
               END IF;
            END LOOP;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'VAT_SUM_LINES');
            END IF;*/

            --Note: Calculate totals for Argentinian Layout
            total_ := sub_total_with_charges_ + total_tax_ + round_amount_ * item_sign_;
   
            --Note: Insert totals for Argentinian Layout
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL', total_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'ROUND_AMOUNT', round_amount_);
               IF (print_amount_verbally_ = 'TRUE') THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', total_);
               END IF;
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO,
                      &TOTAL, &ROUND_AMOUNT )
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_TOTAL_AR,
                      total_, round_amount_ );
               row_no_ := row_no_ + 1;
            END IF;

            -- Note : Insert totals
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEM');
               -- gelr:pt_diff_tax_code_credit_invoic, begin
               IF (pt_credit_invoice_ = &TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CURR_AMOUNT', ABS(vat_curr_amount_ * item_sign_));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_CURR_AMOUNT', ABS(gross_curr_amount_ * item_sign_));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ROUND_AMOUNT', ABS(round_amount_));
               -- gelr:pt_diff_tax_code_credit_invoic, end   
               ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CURR_AMOUNT', vat_curr_amount_ * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_CURR_AMOUNT', gross_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ROUND_AMOUNT', round_amount_);
               END IF;
               IF (print_amount_verbally_ = 'TRUE') THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', gross_curr_amount_ * item_sign_);
               END IF;
               Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO,
                      &GROSS_CURR_AMOUNT, 
                      &VAT_CURR_AMOUNT,
                      &ROUND_AMOUNT )
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_TOTALS,
                      DECODE(pt_credit_invoice_, &FALSE, gross_curr_amount_, ABS(gross_curr_amount_)), 
                      DECODE(pt_credit_invoice_, &FALSE, vat_curr_amount_, ABS(vat_curr_amount_)),
                      DECODE(pt_credit_invoice_, &FALSE, round_amount_, ABS(round_amount_)) );
               row_no_ := row_no_ + 1;
            END IF;
               
            IF print_tax_in_alternative_curr_ AND ((curr_code_ != base_curr_code_) OR (curr_code_ != parallel_curr_code_)) THEN  -- if tax and vat should be printed in Base Currency Or Parallel Currency   
               base_net_curr_amount_   := Calculate_To_Base___(company_, curr_code_, net_curr_amount_, curr_rate_, order_date_, currency_rate_type_);      
              
               -- Note : Insert base total exclusive tax
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_NET_CURR_AMOUNT', base_net_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', base_curr_code_);
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &BASE_NET_CURR_AMOUNT, &BASE_CURR )  -- used &EUR_NET_CURR_AMOUNT to display the base curr amount and
                  VALUES                                                 -- &BASE_CURR to print the base currency code
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_BASE_TOTAL_EX_VAT, base_net_curr_amount_, base_curr_code_);
                  row_no_ := row_no_ + 1;
               END IF;

               -- Note : Get BASE vat sums
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINES');
               END IF;
               
               tot_tax_amount_ := 0;
               
               FOR vat_sums_rec_ IN get_vat_sums LOOP
                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       vat_sums_rec_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');
                  IF (NVL(vat_sums_rec_.vat_sum_dom, 0) != 0) THEN
                     fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, vat_sums_rec_.tax_code);
                     IF (fee_type_ = 'NOTAX') THEN
                        vat_percentage_ := '';   
                     ELSE
                        vat_percentage_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                       Tax_Source_API.DB_INVOICE,
                                                                                       TO_CHAR(invoice_id_),
                                                                                       NULL,
                                                                                       '*',
                                                                                       '*',
                                                                                       '*',
                                                                                       vat_sums_rec_.tax_code);
                     END IF;

                     IF ( recs_ = 1) THEN
                        -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                        OPEN get_tax_code_dom_tot(vat_sums_rec_.tax_code, TO_CHAR(invoice_id_));
                        FETCH get_tax_code_dom_tot INTO tax_fee_base_amount_;
                        CLOSE get_tax_code_dom_tot;
                     ELSE
                        tax_fee_base_amount_ := NULL;
                     END IF;

                     IF ((prel_update_allowed_ = 'FALSE') OR (header_rec_.invoice_type = 'CUSTORDCRE')) THEN
                        base_vat_sum_ := vat_sums_rec_.vat_sum_dom * item_sign_;
                     ELSE
                        base_vat_sum_ := vat_sums_rec_.vat_sum_dom;
                     END IF;
                     IF (print_tax_in_alternative_curr_ AND selected_alternative_curr_ = 'PARALLEL_CURRENCY') THEN        
                        base_vat_sum_ := vat_sums_rec_.vat_sum_para;
                     END IF;
                     
                     tot_tax_amount_ := tot_tax_amount_ + base_vat_sum_;
                     
                     -- Note : Insert BASE vat sums
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINE');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', vat_sums_rec_.tax_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', description_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                        -- DIS003 start
                        IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                           loc_tax_character_ := Get_Tax_Character_Display___(company_, vat_sums_rec_.tax_code);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', loc_tax_character_);
                           loc_base_net_curr_amount_   := Calculate_To_Base___(company_, curr_code_, net_curr_amount_, curr_rate_, order_date_, currency_rate_type_);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_NET_CURR_AMOUNT', loc_base_net_curr_amount_ * item_sign_);
                        END IF;
                        -- DIS003 end
                        -- gelr:pt_diff_tax_code_credit_invoic, begin
                        IF (pt_credit_invoice_ = &TRUE) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_VAT_SUM', ABS(base_vat_sum_));
                        -- gelr:pt_diff_tax_code_credit_invoic, end
                        ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_VAT_SUM', base_vat_sum_);
                        END IF;
                        Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', base_curr_code_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_BASE_AMOUNT', tax_fee_base_amount_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_LINE');
                     END IF;                     
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &VAT_CODE, &VAT_PERCENTAGE, &BASE_VAT_SUM, &BASE_CURR, &TAX_FEE_BASE_AMOUNT ) -- used &BASE_CURR to print the base currency code
                        VALUES
                              (result_key_, row_no_, parent_row_no_,
                               &BLOCK_BASE_TAXES,
                               vat_sums_rec_.tax_code, vat_percentage_, DECODE(pt_credit_invoice_, &FALSE, base_vat_sum_, ABS(base_vat_sum_)), base_curr_code_, tax_fee_base_amount_ );
                        row_no_ := row_no_ + 1;                        
                     END IF;
                  END IF;
               END LOOP;               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_LINES');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_TAX_AMOUNT',tot_tax_amount_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
               END IF;
               
               IF (do_rs_)THEN
                  INSERT INTO &REPTAB
                        (result_key,row_no,parent_row_no,&BLOCK_NO,&TOT_TAX_AMOUNT)
                  VALUES (result_key_, row_no_, parent_row_no_,&BLOCK_BASE_TOTAL_EX_VAT,tot_tax_amount_);
                  row_no_ := row_no_ + 1;
               END IF ;
               
            END IF; -- Note : Base Currency end
   
            -- Note : Get vats and totals in EURO
            IF (Currency_Invoice_Info_API.Get_Print_Euro_Equivalents(company_, curr_code_) = 'TRUE') AND
               (curr_code_ != 'EUR') THEN
   
               base_curr_code_        := Company_Finance_API.Get_Currency_Code(company_);
   
               eur_net_curr_amount_   := Calc_To_Euro___(company_, curr_code_, net_curr_amount_, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
               eur_vat_curr_amount_   := Calc_To_Euro___(company_, curr_code_, vat_curr_amount_, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
               eur_gross_curr_amount_ := eur_net_curr_amount_ + eur_vat_curr_amount_;
   
               -- Note : Insert eur total exclusive tax
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TOTAL_ITEM');
                  -- gelr:pt_diff_tax_code_credit_invoic, begin
                  IF (pt_credit_invoice_ = &TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_NET_CURR_AMOUNT', ABS(eur_net_curr_amount_ * item_sign_));
                  -- gelr:pt_diff_tax_code_credit_invoic, end
                  ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_NET_CURR_AMOUNT', eur_net_curr_amount_ * item_sign_);
               END IF;
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &EUR_NET_CURR_AMOUNT )
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_EUR_TOTAL_EX_VAT, DECODE(pt_credit_invoice_, &FALSE, eur_net_curr_amount_, ABS(eur_net_curr_amount_)) );
                  row_no_ := row_no_ + 1;
               END IF;
   
               -- Note : Get EUR vat sums
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TAX_LINES');
               END IF;               
               FOR vat_sums_rec_ IN get_vat_sums LOOP
                  IF (NVL(vat_sums_rec_.vat_sum_dom, 0) != 0) THEN
                     fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, vat_sums_rec_.tax_code);
                     IF (fee_type_ = 'NOTAX') THEN
                        vat_percentage_ := '';   
                     ELSE
                        vat_percentage_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                       Tax_Source_API.DB_INVOICE,
                                                                                       TO_CHAR(invoice_id_),
                                                                                       NULL,
                                                                                       '*',
                                                                                       '*',
                                                                                       '*',
                                                                                       vat_sums_rec_.tax_code);
                     END IF;
                     vat_sums_rec_.vat_sum_dom := Calc_To_Euro___(company_, curr_code_, vat_sums_rec_.vat_sum_curr, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
                     -- Note : Insert EUR vat sums
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TAX_LINE');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', vat_sums_rec_.tax_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                        -- gelr:pt_diff_tax_code_credit_invoic, begin
                        IF (pt_credit_invoice_ = &TRUE) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_VAT_SUM', ABS(vat_sums_rec_.vat_sum_dom * item_sign_));
                        -- gelr:pt_diff_tax_code_credit_invoic, end   
                        ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_VAT_SUM', vat_sums_rec_.vat_sum_dom * item_sign_);
                        END IF;
                        -- DIS003 start
                        IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                           loc_tax_character_ := Get_Tax_Character_Display___(company_, vat_sums_rec_.tax_code);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', loc_tax_character_);
                        END IF;
                        -- DIS003 end
                        Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TAX_LINE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &VAT_CODE, &VAT_PERCENTAGE, &EUR_VAT_SUM )
                        VALUES
                              (result_key_, row_no_, parent_row_no_,
                               &BLOCK_EUR_TAXES,
                               vat_sums_rec_.tax_code, vat_percentage_, DECODE(pt_credit_invoice_, &FALSE, vat_sums_rec_.vat_sum_dom * item_sign_, ABS(vat_sums_rec_.vat_sum_dom * item_sign_)));
                        row_no_ := row_no_ + 1;
                     END IF;
                  END IF;
               END LOOP;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TAX_LINES');
               END IF;
   
               -- Note : Insert eur totals
               IF (do_xml_) THEN
                  -- gelr:pt_diff_tax_code_credit_invoic, begin
                  IF (pt_credit_invoice_ = &TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_VAT_CURR_AMOUNT', ABS(eur_vat_curr_amount_ * item_sign_));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_GROSS_CURR_AMOUNT', ABS(eur_gross_curr_amount_ * item_sign_));
                  -- gelr:pt_diff_tax_code_credit_invoic, end   
                  ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_VAT_CURR_AMOUNT', eur_vat_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_GROSS_CURR_AMOUNT', eur_gross_curr_amount_ * item_sign_);
                  END IF;
                  Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TOTAL_ITEMS');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &EUR_GROSS_CURR_AMOUNT, &EUR_VAT_CURR_AMOUNT)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_EUR_TOTALS,
                         DECODE(pt_credit_invoice_, &FALSE, eur_gross_curr_amount_, ABS(eur_gross_curr_amount_)), 
                         DECODE(pt_credit_invoice_, &FALSE, eur_vat_curr_amount_, ABS(eur_vat_curr_amount_)));
                  row_no_ := row_no_ + 1;
               END IF;
            END IF; -- Note : EURO vat/totals
   
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINE_TYPE');
            -- Note : Calculate the totals of the whole invoice.
            corr_gross_curr_amount_  := gross_curr_amount_ + NVL(corr_gross_curr_amount_, 0);
            corr_fee_amount_         := NVL(tax_code_fee_amount_, 0) + NVL(tax_code_cre_fee_amount_, 0) + NVL(tax_code_deb_fee_amount_, 0);
            corr_round_amount_       := NVL(corr_round_amount_deb_, 0) - NVL(corr_round_amount_cre_, 0);
            pre_net_curr_amount_     := pre_net_curr_amount_ + net_curr_amount_;
            pre_vat_curr_amount_     := pre_vat_curr_amount_ + vat_curr_amount_;
            pre_gross_curr_amount_   := pre_gross_curr_amount_ + gross_curr_amount_;
         END LOOP;  -- End Loop for correction Invoices.
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINE_TYPES');
         END IF;
			
         OPEN  get_corr_tax_base_amt;
         FETCH get_corr_tax_base_amt INTO corr_tax_base_amount_;
         CLOSE get_corr_tax_base_amt;
         IF (base_curr_code_ = header_rec_.curr_code AND header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
            OPEN get_gross_price_item(NULL);
            FETCH get_gross_price_item INTO total_gross_item_;
            CLOSE get_gross_price_item;
            corr_tax_base_amount_   := corr_tax_base_amount_ + NVL(total_gross_item_, 0);
         END IF;
				
         -- Correction details of a correction invoice.
         IF (corr_gross_curr_amount_ > 0) THEN
            corr_title_ := 'INCREASE';
         ELSIF (corr_gross_curr_amount_ < 0) THEN
            corr_title_ := 'DECREASE';
         END IF;
         IF(correction_type_ = 'RATE') THEN
            IF (header_rec_.tax_curr_rate > debit_inv_rec_.tax_curr_rate) THEN
               corr_title_ := 'INCREASE';
            ELSIF (header_rec_.tax_curr_rate < debit_inv_rec_.tax_curr_rate) THEN
               corr_title_ := 'DECREASE';
            END IF;          
         END IF;
         
         -- gelr:invoice_copy_in_foreign_curr, bug 146331, begin
         IF (Company_Localization_API.Get_Parameter_Value_Db(company_, 'INVOICE_COPY_IN_FOREIGN_CURR') = Localization_Param_Yes_No_API.DB_YES) AND (inv_copy_frgn_curr_ = 'TRUE') 
            AND ((curr_code_ != base_curr_code_) OR (curr_code_ != parallel_curr_code_)) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_BASE_CURRS'); 
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_BASE_CURR'); 
                     conv_factor_        := Currency_Rate_API.Get_Conv_Factor(company_, curr_code_, currency_rate_type_, invoice_date_);
                     voucher_no_ := Invoice_Item_API.Get_Voucher_No(company_, invoice_id_, 1);
                     IF (header_rec_.invoice_type = 'CUSTORDCRE') THEN
                        sign_ := -1;
                        posting_net_ := 'M32';
                        posting_discount_ := 'M33';
                        posting_charge_ := 'M71';
                     ELSE 
                        sign_ := 1;
                        posting_net_ := 'M28';
                        posting_discount_ := 'M29';
                        posting_charge_ := 'M67';
                     END IF;
                     
                     OPEN get_amount_per_posting(posting_net_);
                     FETCH get_amount_per_posting INTO base_net_amount_; 
                     CLOSE get_amount_per_posting;
                                          
                     OPEN get_amount_per_posting(posting_discount_);
                     FETCH get_amount_per_posting INTO base_discount_amount_; 
                     IF ((get_amount_per_posting%NOTFOUND) OR (base_discount_amount_ IS NULL)) THEN
                        base_discount_amount_ := 0;
                     END IF;   
                     CLOSE get_amount_per_posting; 
                     
                     base_sub_total_amount_ := base_net_amount_ - base_discount_amount_;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_SUB_TOTAL', base_sub_total_amount_ * sign_);

                     OPEN get_amount_per_posting(posting_charge_);
                     FETCH get_amount_per_posting INTO base_charges_amount_; 
                     IF ((get_amount_per_posting%NOTFOUND) OR (base_charges_amount_ IS NULL)) THEN
                        base_charges_amount_ := 0;
                     END IF;
                     CLOSE get_amount_per_posting;     
                     
                     base_net_amount_ := base_sub_total_amount_ + base_charges_amount_;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_NET_AMOUNT', base_net_amount_ * sign_);

                     OPEN get_amount_per_posting('IP4');
                     FETCH get_amount_per_posting INTO base_vat_amount_; 
                     IF ((get_amount_per_posting%NOTFOUND) OR (base_vat_amount_ IS NULL)) THEN
                        base_vat_amount_ := 0;
                     END IF; 
                     CLOSE get_amount_per_posting;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_VAT_AMOUNT', base_vat_amount_ * sign_); 

                     OPEN get_amount_per_posting('IP2');
                     FETCH get_amount_per_posting INTO base_gross_amount_; 
                     CLOSE get_amount_per_posting;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_GROSS_AMOUNT',  base_gross_amount_ * sign_);
                     
                     -- order lines
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_LINES');
                     FOR rec_ IN get_line_items(currency_rounding_) LOOP
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_LINE');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', rec_.item_id);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_SALE_UNIT_PRICE', rec_.unit_price);

                           OPEN get_amount_per_line(posting_discount_, rec_.item_id);
                           FETCH get_amount_per_line INTO line_discount_;
                           IF ((get_amount_per_line%NOTFOUND) OR (line_discount_ IS NULL)) THEN
                              line_discount_ := 0;
                           END IF;
                           CLOSE get_amount_per_line;
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_LINE_DISCOUNT', line_discount_);

                           OPEN get_amount_per_line(posting_net_, rec_.item_id);
                           FETCH get_amount_per_line INTO line_net_;
                           CLOSE get_amount_per_line;
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_PRICE_TOTAL', (line_net_ - line_discount_) * sign_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_LINE');
                     END LOOP;
                     Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_LINES');

                     -- charge group lines
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_CHARGE_GROUPS');
                     FOR rec_ IN get_charge_items(currency_rounding_) LOOP
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_CHARGE_GROUP');
                           charge_grp_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, rec_.charge_group);
                           IF (charge_grp_desc_rec_.charge_group_desc IS NOT NULL) THEN
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_GROUP_DESC', charge_grp_desc_rec_.charge_group_desc);
                           ELSE
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_GROUP_DESC', Sales_Charge_Group_API.Get_Charge_Group_Desc(rec_.charge_group));
                           END IF;
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_CHARGE_GROUP_SUM', rec_.charge_group_sum * sign_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_CHARGE_GROUP');
                     END LOOP;
                     Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_CHARGE_GROUPS');

                     -- tax code lines
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_CODE_LINES');
                     FOR tax_code_line_ IN get_tax_code_lines LOOP
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_CODE_LINE');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE', tax_code_line_.tax_code);

                           OPEN get_base_tax_discount(tax_code_line_.tax_code, currency_rounding_);
                           FETCH get_base_tax_discount INTO base_total_discount_;
                           IF ((get_base_tax_discount%NOTFOUND) OR (base_total_discount_ IS NULL)) THEN
                              base_total_discount_ := 0;
                           END IF;
                           CLOSE get_base_tax_discount;
                           
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_TOTAL_AMOUNT', ROUND(tax_code_line_.tax_base_amount + base_total_discount_, currency_rounding_));
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_TOTAL_DISCOUNT', ROUND(base_total_discount_, currency_rounding_));
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_TAX_BASE_AMOUNT', ROUND(tax_code_line_.tax_base_amount, currency_rounding_) * sign_);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_TAX_AMOUNT', tax_code_line_.tax_amount * sign_);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_GROSS_AMOUNT_IN', ROUND(tax_code_line_.tax_base_amount + tax_code_line_.tax_amount, currency_rounding_) * sign_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_CODE_LINE');
                     END LOOP;
                     Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_CODE_LINES');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_BASE_CURR');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_BASE_CURRS'); 
               END IF;
         END IF;
         -- gelr:invoice_copy_in_foreign_curr, bug 146331, end
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'COR_TAX_CODE_TOTALS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'COR_TAX_CODE_TOTAL');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CORR_TITLE', corr_title_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CURR_CODE', curr_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', base_curr_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COR_TAX_CURR_CODE', curr_code_);
            -- gelr:pt_diff_tax_code_credit_invoic, begin
            IF (pt_credit_invoice_ = &TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT', ABS(corr_tax_base_amount_));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT', ABS(corr_fee_amount_));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_CURR_AMOUNT', ABS(corr_gross_curr_amount_));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUND_AMOUNT', ABS(corr_round_amount_));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_AMOUNT', ABS(corr_gross_curr_amount_ - corr_round_amount_));
            -- gelr:pt_diff_tax_code_credit_invoic, end   
            ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT', corr_tax_base_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT', corr_fee_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_CURR_AMOUNT', corr_gross_curr_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUND_AMOUNT', corr_round_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_AMOUNT', corr_gross_curr_amount_ - corr_round_amount_);
            END IF;
            IF (print_amount_verbally_ = 'TRUE') THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', corr_gross_curr_amount_);
            END IF;
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_TAX_CODE_LINES');            
            -- Bug 140588, Removed first_correction_ivc_ from the cursor.
            FOR inv_line_ IN get_corr_inv_info (TO_CHAR(invoice_id_)) LOOP
               description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                    'ACCRUL',
                                                                                    'StatutoryFee',
                                                                                    inv_line_.tax_code,
                                                                                    language_code_,
                                                                                    'NO');
               -- Bug 141485, added tax_base_curr_amount_excl_foc_                  
               OPEN get_vat_net_curr_corr_inv(inv_line_.tax_code, currency_rounding_);
               FETCH get_vat_net_curr_corr_inv INTO total_discount_per_tax_, tax_net_curr_amount_, tax_base_curr_amount_, tax_base_curr_amount_excl_foc_;
               CLOSE get_vat_net_curr_corr_inv;
               IF (base_curr_code_ = header_rec_.curr_code AND header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
                  gross_price_adjustment_ := Customer_Invoice_Pub_Util_API.Get_Gross_Price_Per_Tax_Code(company_, invoice_id_, inv_line_.tax_code, 'FALSE')
                                            + Customer_Invoice_Pub_Util_API.Get_Gross_Price_Per_Tax_Code(company_, invoice_id_, inv_line_.tax_code, 'TRUE');
                  tax_net_curr_amount_  := tax_net_curr_amount_ + gross_price_adjustment_;                  
                  tax_base_curr_amount_ := tax_base_curr_amount_ + gross_price_adjustment_;                  
                  -- Bug 141485, start
                  tax_base_curr_amount_excl_foc_ := tax_base_curr_amount_excl_foc_ + gross_price_adjustment_;
                  -- Bug 141485, end
               END IF;
               
               total_discount_per_tax_ := NVL(total_discount_per_tax_, 0);
               total_unit_price_per_tax_ := NVL(tax_base_curr_amount_, 0) + total_discount_per_tax_;

               -- Note : insert tax code details                 
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_TAX_CODE_LINE');
               -- Bug 141485, start, tax_base_amount_ changed to tax_base_curr_amount_excl_foc_ 
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_GROSS_AMOUNT_IN_CURR', (inv_line_.tax_curr_amount_tot + tax_base_curr_amount_excl_foc_) * item_sign_);
               -- Bug 141485, end
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_VAT_CODE', inv_line_.tax_code);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_DESCRIPTION', description_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_FEE_AMOUNT', inv_line_.tax_curr_amount_tot * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TOTAL_UNIT_PRICE', total_unit_price_per_tax_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_BASE_AMOUNT', tax_base_curr_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_TEXTS', tax_text_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TOTAL_DISCOUNT', total_discount_per_tax_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_VAT_PERCENTAGE', inv_line_.tax_percentage);
               -- DIS003 begin
               IF (tax_char_on_invoice_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_Db(company_, inv_line_.tax_code));
               END IF;
               -- DIS003 end
               Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_TAX_CODE_LINE'); 
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_TAX_CODE_LINES'); 
            
            cor_tot_tax_amount_ := 0;
            
            IF print_tax_in_alternative_curr_ AND (curr_code_ != base_curr_code_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_BASE_TAX_CODE_LINES');
               -- Bug 140588, Removed first_correction_ivc_ from the cursor.
               FOR cor_vat_rec_ IN get_corr_inv_info (TO_CHAR(invoice_id_)) LOOP
                  
                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       cor_vat_rec_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');
                  cor_tot_tax_amount_ := cor_tot_tax_amount_ + cor_vat_rec_.tax_dom_amount_tot;
                  
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_BASE_TAX_CODE_LINE');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_VAT_CODE', cor_vat_rec_.tax_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_DESCRIPTION', description_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_VAT_SUM', cor_vat_rec_.tax_dom_amount_tot);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_VAT_PERCENTAGE', cor_vat_rec_.tax_percentage);
                  -- DIS003 begin
                  -- DIS004 begin
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_Db(company_, cor_vat_rec_.tax_code));
                  -- DIS004 end
                  -- DIS003 end
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_BASE_TAX_CODE_LINE');
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_BASE_TAX_CODE_LINES');
            END IF; 
            Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TOT_TAX_AMOUNT',cor_tot_tax_amount_);
            -- Bug 140588, start
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_TAX_IN_ALT_CURR',print_tax_in_alternative_curr_);
            -- Bug 140588, end
            Xml_Record_Writer_SYS.End_Element(xml_, 'COR_TAX_CODE_TOTAL');
            Xml_Record_Writer_SYS.End_Element(xml_, 'COR_TAX_CODE_TOTALS');
         END IF;
   
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PRE_TAX_CODE_TOTALS'); 
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PRE_TAX_CODE_TOTAL');
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRE_GROSS_CURR_AMOUNT', pre_gross_curr_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRE_NET_CURR_AMOUNT', pre_net_curr_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRE_VAT_CURR_AMOUNT', pre_vat_curr_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRE_TAX_CURR_CODE', curr_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', pre_gross_curr_amount_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PRE_TAX_CODE_TOTAL');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PRE_TAX_CODE_TOTALS');
         END IF;
   
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXTS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_FOOT', report_foot_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXTS');
         END IF;
   
         IF (do_rs_) THEN
            INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &REPORT_FOOT)
            VALUES
                  (result_key_, row_no_, parent_row_no_, report_foot_);
            row_no_ := row_no_ + 1;    
         END IF;
   
         -- Note : Insert notes
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'NOTE_ITEMS');
         END IF;
   
         IF note_id_ IS NOT NULL THEN
           note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, document_code_);
           IF (note_text_tab_.COUNT > 0) THEN
              FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                 IF (do_xml_) THEN
                    Xml_Record_Writer_SYS.Start_Element(xml_, 'NOTE_ITEM');
                    Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NOTES',note_text_tab_(n));
                    Xml_Record_Writer_SYS.End_Element(xml_, 'NOTE_ITEM');
                 END IF;
                 IF (do_rs_) THEN
                    INSERT INTO &REPTAB (
                       result_key, row_no, parent_row_no, &BLOCK_NO, &ORDER_NOTES)
                    VALUES (
                       result_key_, row_no_, parent_row_no_, &BLOCK_NOTES, note_text_tab_(n));
                    row_no_ := row_no_ + 1;
                 END IF;
              END LOOP;
           END IF;
         END IF;
         
         -- Bug 150026, Added missing start xml element of NOTE_ITEM.
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'NOTE_ITEM');
         END IF;
         
         IF (customer_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
            END IF;

            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, document_code_);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                     row_no_ := row_no_ + 1;
                  END IF;  
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
            END IF; 
         END IF;
         
         IF (language_code_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
            END IF;
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( output_code_, NULL, header_rec_.contract );
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                        VALUES (
                           result_key_, row_no_, parent_row_no_, phrases_);
                        row_no_ := row_no_ + 1;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
            END IF;
         END IF;
         
         -- Bug 150026, Added missing end xml element of NOTE_ITEM.
         IF (do_xml_) THEN      
            Xml_Record_Writer_SYS.End_Element(xml_, 'NOTE_ITEM');
            Xml_Record_Writer_SYS.End_Element(xml_, 'NOTE_ITEMS');
         END IF;
      
         -- Note : Change invoice_type to credit invoice if totals are negative
         -- Note : This is a special solution for a CO created by Service Management
         -- Note : and it will only change the report title from invoice to credit invoice,
         -- Note : so all document texts will still be fetched using document_code for a (debit)invoice
         IF (header_rec_.invoice_type != cor_inv_type_) THEN
            IF (prepayment_exist_ = 'FALSE') THEN
               IF (gross_curr_amount_ < 0) THEN
                  invoice_type_ := 'CUSTORDCRE';
               ELSE
                  invoice_type_ := 'CUSTORDDEB';
               END IF;
            END IF;
         END IF;
         -- Note : Condition Code
         IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
            condition_print_ := 'TRUE';
         ELSE
            condition_print_ := NULL;
         END IF;
         IF (do_rs_) THEN
            UPDATE &REPTAB
            SET    &PRINT_CONFIG_ID = print_config_id_,
                   &CONDITION_PRINT = condition_print_,
                   &INVOICE_TYPE = invoice_type_
            WHERE  result_key = result_key_
            AND    row_no = parent_row_no_;
         END IF;
   
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TYPE', invoice_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_CONFIG_ID', print_config_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_PRINT', condition_print_);
         END IF;
   
         OPEN count_discount_details(header_rec_.customer_no_pay);
         FETCH count_discount_details INTO count_discount_;
         CLOSE count_discount_details;
         
         IF (installment_count_ = 1) AND (count_discount_ = 0) THEN
            OPEN get_pay_plan_detail(header_rec_.customer_no_pay);
            FETCH get_pay_plan_detail INTO payment_method_, installment_id_;
            CLOSE get_pay_plan_detail;
            
            $IF (Component_Payled_SYS.INSTALLED) $THEN
                DECLARE
                   short_name_  VARCHAR2(80);
                BEGIN 
                   pay_method_desc_   := Payment_Way_API.Get_Description_Per_Language(header_rec_.company, payment_method_, language_code_); 
                   short_name_        := Payment_Plan_API.Get_Short_Name(header_rec_.company, invoice_id_, installment_id_);
                   bank_account_      := Cash_Account_API.Get_Account_Identity(header_rec_.company, short_name_);
                   bank_account_text_ := Cash_Account_Text_API.Get_Text_Per_Language(header_rec_.company, short_name_, language_code_);
                   bic_code_          := Cash_Account_API.Get_Bic_Code(header_rec_.company, short_name_);  
                END;
            $END    
             
            IF (payment_method_ IS NULL) THEN
               pay_method_desc_ := NULL;
            END IF;
   
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_METHOD_DESC', pay_method_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_METHOD', payment_method_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT', bank_account_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_TEXT', bank_account_text_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE_HEAD', bic_code_);
            END IF;
   
            IF (do_rs_) THEN
               UPDATE &REPTAB
               SET    &PAY_METHOD_DESC = pay_method_desc_,
                      &PAYMENT_METHOD = payment_method_,
                      &BANK_ACCOUNT = bank_account_,
                      &BANK_ACCOUNT_TEXT = bank_account_text_,
                      &BIC_CODE_HEAD = bic_code_
               WHERE  result_key = result_key_
               AND    row_no = 1;
            END IF;
         END IF;
   
         -- gelr:tax_exemption_certify, begin  
         IF (tax_exemption_certify_enabled_ = Localization_Param_Yes_No_API.DB_YES) THEN 
            show_installment_block_ := ((installment_count_ > 0) OR (count_discount_ > 0));
         ELSE 
            show_installment_block_ := ((installment_count_ > 1) OR (count_discount_ > 0));
         END IF;
         
         IF (show_installment_block_) THEN
         -- gelr:tax_exemption_certify, begin
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INSTALLMENT_ITEMS');
            END IF;
            
            FOR index_ IN 1..installment_count_ LOOP
               $IF (Component_Payled_SYS.INSTALLED) $THEN                             
                  pay_method_desc_          := Payment_Way_API.Get_Description_Per_Language(header_rec_.company, simulated_payment_plan_(index_).payment_method, language_code_); 
                  -- Note: This is used to determine the visibility of the Tax Amount Tax Percentage and Net Amount labels of discounts
                  tax_reduction_at_payment_ := Company_Pay_Info_API.Get_Tax_Reduction_At_Payment(header_rec_.company);                  
                  short_name_               := Payment_Plan_API.Get_Short_Name(header_rec_.company, invoice_id_, simulated_payment_plan_(index_).installment_id);
                  
                  IF short_name_ IS NOT NULL THEN
                     bank_account_line_ := Cash_Account_API.Get_Account_Identity(header_rec_.company, short_name_);
                     bank_account_text_ := Cash_Account_Text_API.Get_Text_Per_Language(header_rec_.company, short_name_, language_code_);
                     bic_code_          := Cash_Account_API.Get_Bic_Code(header_rec_.company, short_name_);
                  END IF;
               $END
               
               IF (simulated_payment_plan_(index_).payment_method IS NULL) THEN
                  pay_method_desc_ := NULL;
               END IF;         

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INSTALLMENT_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_ID', simulated_payment_plan_(index_).installment_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_METHOD_DESC', pay_method_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_DUE_DATE', simulated_payment_plan_(index_).due_date);
                  -- gelr:pt_diff_tax_code_credit_invoic, begin
                  IF (pt_credit_invoice_ = &TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_AMOUNT', ABS(simulated_payment_plan_(index_).open_amount));
                  -- gelr:pt_diff_tax_code_credit_invoic, end   
                  ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_AMOUNT', simulated_payment_plan_(index_).open_amount);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PAYMENT_METHOD_LINE', simulated_payment_plan_(index_).payment_method);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'BANK_ACCOUNT_LINE', bank_account_line_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'BANK_ACCOUNT_TEXT', bank_account_text_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE_LINE', bic_code_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_REDUCTION_AT_PAY', tax_reduction_at_payment_);
                  -- gelr:tax_exemption_certify, begin
                  IF (tax_exemption_certify_enabled_ = 'Y') THEN 
                     cig_code_ := Payment_Plan_API.Get_Cig_Code(company_, invoice_id_, simulated_payment_plan_(index_).installment_id);
                     cup_code_ := Payment_Plan_API.Get_Cup_Code(company_, invoice_id_, simulated_payment_plan_(index_).installment_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CIG_CODE', cig_code_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CUP_CODE', cup_code_);
                  END IF;
                  -- gelr:tax_exemption_certify, end
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_ITEMS');
               END IF;
   
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                     &BLOCK_NO, &INSTALLMENT_ID, &PAY_METHOD_DESC, &INSTALLMENT_DUE_DATE, 
                     &INSTALLMENT_AMOUNT,
                      &BANK_ACCOUNT_LINE, &BANK_ACCOUNT_TEXT, &BIC_CODE_LINE, &VAT_REDUCTION_AT_PAY, &CIG_CODE, &CUP_CODE)
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_INSTALLMENTS, simulated_payment_plan_(index_).installment_id, pay_method_desc_, simulated_payment_plan_(index_).due_date, 
                      DECODE(pt_credit_invoice_, &FALSE, simulated_payment_plan_(index_).open_amount, ABS(simulated_payment_plan_(index_).open_amount)),
                      bank_account_line_, bank_account_text_, bic_code_, tax_reduction_at_payment_, cig_code_, cup_code_);
                  row_no_ := row_no_ + 1;
               END IF;
   
               FOR discount_rec_ IN get_discount_details(header_rec_.customer_no_pay, simulated_payment_plan_(index_).installment_id) LOOP
                  discount_amount_ :=  ROUND((simulated_payment_plan_(index_).open_amount *  discount_rec_.disc_percent) /100, currency_rounding_);

                  tax_amount_disc_ := 0;
                  IF (header_rec_.Invoice_Type = NVL(cor_inv_type_,'CUSTORDCOR')) THEN
                     -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                     FOR get_tax_ IN get_corr_inv_info (TO_CHAR(invoice_id_)) LOOP
                     -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                     IF (corr_gross_curr_amount_  != 0) THEN
                        vat_percentage_        := get_tax_.tax_percentage;
                        tax_per_tax_code_      :=  ROUND((get_tax_.tax_curr_amount_tot * discount_amount_) / corr_gross_curr_amount_, currency_rounding_); 
                     ELSE
                        tax_per_tax_code_      := 0;
                     END IF;
                     tax_amount_disc_ := tax_amount_disc_ + tax_per_tax_code_;
                     END LOOP;
                  ELSE
                     IF(header_rec_.invoice_type = 'CUSTORDCRE') THEN
                        -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                        FOR get_tax_ IN get_tax_code_cre (TO_CHAR(invoice_id_)) LOOP
                           -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                           IF (gross_curr_amount_  != 0) THEN
                              tax_per_tax_code_      :=  ROUND((get_tax_.tax_code_tot * discount_amount_) / gross_curr_amount_, currency_rounding_); 
                           ELSE
                              tax_per_tax_code_      := 0;
                           END IF;
                           tax_amount_disc_ := tax_amount_disc_ + tax_per_tax_code_;
                        END LOOP;
                     ELSE
                        -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                        FOR get_tax_ IN get_tax_code_deb (TO_CHAR(invoice_id_)) LOOP
                        -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                        IF (gross_curr_amount_  != 0) THEN
                           tax_per_tax_code_      :=  ROUND((get_tax_.tax_code_tot * discount_amount_) / gross_curr_amount_, currency_rounding_); 
                        ELSE
                           tax_per_tax_code_      := 0;
                        END IF;
                        tax_amount_disc_ := tax_amount_disc_ + tax_per_tax_code_;
                        END LOOP;
                     END IF;              
                  END IF;
                  
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENG_ID', simulated_payment_plan_(index_).installment_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_DATE', discount_rec_.disc_date);
                     -- gelr:pt_diff_tax_code_credit_invoic, begin
                     IF (pt_credit_invoice_ = &TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_AMOUNT', ABS(discount_amount_));
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_AMOUNT', ABS(simulated_payment_plan_(index_).open_amount - discount_amount_));
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_NET', ABS(discount_amount_ - tax_amount_disc_));
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', ABS(tax_amount_disc_));
                     -- gelr:pt_diff_tax_code_credit_invoic, end   
                     ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_AMOUNT', discount_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_AMOUNT', simulated_payment_plan_(index_).open_amount - discount_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_NET', discount_amount_ - tax_amount_disc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', tax_amount_disc_);
                     END IF; 
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_PERCENT', discount_rec_.disc_percent);                     
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_TAX_ITEMS');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &INSTALLMENT_ID, &DISCOUNT_DATE, 
                         &DISCOUNT_AMOUNT,
                         &DISCOUNT_PERCENT, 
                         &DISCOUNT_NET, 
                         &DISCOUNT_TAX,
                         &INSTALLMENT_AMOUNT)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_DISCOUNTS, simulated_payment_plan_(index_).installment_id, discount_rec_.disc_date, 
                         DECODE(pt_credit_invoice_, &FALSE, discount_amount_, ABS(discount_amount_)),
                         discount_rec_.disc_percent,
                         DECODE(pt_credit_invoice_, &FALSE, discount_amount_ - tax_amount_disc_, ABS(discount_amount_ - tax_amount_disc_)),
                         DECODE(pt_credit_invoice_, &FALSE, tax_amount_disc_, ABS(tax_amount_disc_)),
                         DECODE(pt_credit_invoice_, &FALSE, simulated_payment_plan_(index_).open_amount - discount_amount_, ABS(simulated_payment_plan_(index_).open_amount - discount_amount_)));
                     row_no_ := row_no_ + 1;
                  END IF;
                  IF(header_rec_.Invoice_Type = NVL(cor_inv_type_,'CUSTORDCOR')) THEN
                     -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                     FOR get_tax_ IN get_corr_inv_info (TO_CHAR(invoice_id_)) LOOP
                        Add_Instal_Disc_Tax_Items___( corr_gross_curr_amount_,
                                                      get_tax_.tax_curr_amount_tot,
                                                      get_tax_.tax_percentage);
                     END LOOP;
                  ELSE
                     IF(header_rec_.invoice_type = 'CUSTORDCRE') THEN
                        -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                        FOR get_tax_ IN get_tax_code_cre (TO_CHAR(invoice_id_)) LOOP
                           Add_Instal_Disc_Tax_Items___( gross_curr_amount_,
                                                         get_tax_.tax_code_tot,
                                                         get_tax_.tax_percentage);
                           
                        END LOOP;
                     ELSE
                        -- Bug 140588, Removed first_correction_ivc_ from the cursor.
                        FOR get_tax_ IN get_tax_code_deb (TO_CHAR(invoice_id_)) LOOP
                           Add_Instal_Disc_Tax_Items___( gross_curr_amount_,
                                                         get_tax_.tax_code_tot,
                                                         get_tax_.tax_percentage);
                           
                        END LOOP;
                     END IF;
                  END IF;
                  
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_TAX_ITEMS');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_ITEM');
                  END IF;
               END LOOP;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_ITEMS');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INSTALLMENT_ITEM');
               END IF;
            END LOOP;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INSTALLMENT_ITEMS');
            END IF;
         END IF;
   
         -----------------------------------------------------------------------------
         -- Advance Invoices
         -----------------------------------------------------------------------------
         IF ((invoice_type_ = 'CUSTORDDEB') OR (header_rec_.invoice_type = cor_inv_type_ AND corr_title_ = 'INCREASE')) THEN
            row_no_                    := row_no_ + 1;
            tot_paid_in_advance_       := 0;
            tot_pre_invoiced_          := 0;
            rem_unconsumed_advance_    := 0;
            rem_amount_to_paid_        := 0;
            no_of_adv_invoices_        := 0;
            print_date_                := Site_Api.Get_Site_Date(header_rec_.contract);
            tot_ad_pay_matched_amount_ := 0;
            ivc_amount_tobe_paid_      := corr_gross_curr_amount_ - corr_round_amount_;        

            IF ((header_rec_.status != 'Preliminary') AND (header_rec_.print_date IS NOT NULL)) THEN
               print_date_ := header_rec_.print_date;
               -- Invoice amount to be paid is set to 0 when the payment transaction is already done for the invoice.
               -- Else this amount will be manually offset with available advance payment amount.
               ivc_amount_tobe_paid_ := 0;
            END IF; 

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ADVANCE_INVOICES');
            END IF;

            IF do_xml_ THEN
               is_xml_ := 'TRUE';
            END IF;

            IF do_rs_ THEN
               is_rs_ := 'TRUE';
            END IF;

            $IF (Component_Payled_SYS.INSTALLED) $THEN        
               FOR advance_rec_ IN get_advance_invoices(print_date_) LOOP            
                  DECLARE
                     payment_data_tab_           Ledger_Item_Util_API.Adv_Inv_Paid_Matched_Data_Tab; 
                     def_series_                 VARCHAR2(20);
                     ad_payment_matched_amount_  NUMBER := 0;
                     remaining_ad_offset_amount_ NUMBER := 0;
                  BEGIN
                     Payment_Doc_Series_API.Get_Def_Series(company_, 'CUSTPIA' , def_series_);                                      
                     Ledger_Item_Util_API.Get_Adv_Inv_Payment_Match_Info(payment_data_tab_, advance_rec_.invoice_id, company_, customer_no_, 'CUSTOMER', def_series_, print_date_);

                     IF (payment_data_tab_.COUNT > 0) THEN
                        FOR i IN payment_data_tab_.FIRST..payment_data_tab_.LAST LOOP
                           ad_payment_matched_amount_ := NVL(payment_data_tab_(i).matched_amount, 0);
                           IF ivc_amount_tobe_paid_ > 0 THEN
                              IF (payment_data_tab_(i).paid_amount > ad_payment_matched_amount_) THEN
                                 remaining_ad_offset_amount_ := payment_data_tab_(i).paid_amount - ad_payment_matched_amount_ ;
                                 IF (remaining_ad_offset_amount_ >= ivc_amount_tobe_paid_) THEN
                                    ad_payment_matched_amount_ := ad_payment_matched_amount_ + ivc_amount_tobe_paid_;
                                    ivc_amount_tobe_paid_ := 0;
                                 ELSE
                                    ad_payment_matched_amount_ := ad_payment_matched_amount_ + remaining_ad_offset_amount_;
                                    ivc_amount_tobe_paid_  := ivc_amount_tobe_paid_ - remaining_ad_offset_amount_;
                                 END IF;
                              END IF;
                           END IF;

                           IF (is_xml_ = 'TRUE') THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'ADVANCE_INVOICE');
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_INVOICE_NO', advance_rec_.series_id||' '||advance_rec_.invoice_no);
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_PAYMENT_DATE', payment_data_tab_(i).payment_date);
                              -- gelr:pt_diff_tax_code_credit_invoic, begin
                              IF (pt_credit_invoice_ = &TRUE) THEN
                                 Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_PAID_NET_AMOUNT', ABS(payment_data_tab_(i).paid_amount_excl_tax));
                                 Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_PAID_GROSS_AMOUNT', ABS(payment_data_tab_(i).paid_amount));
                              -- gelr:pt_diff_tax_code_credit_invoic, end   
                              ELSE
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_PAID_NET_AMOUNT', payment_data_tab_(i).paid_amount_excl_tax);
                                 Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_PAID_GROSS_AMOUNT', payment_data_tab_(i).paid_amount);
                              END IF;
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_TAX_AMOUNT', payment_data_tab_(i).tax_amount);
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_PAYMENT_MATCHED_AMOUNT', ad_payment_matched_amount_);
                              Xml_Record_Writer_SYS.End_Element(xml_, 'ADVANCE_INVOICE');
                           END IF;

                           IF (is_rs_ = 'TRUE') THEN
                              INSERT INTO &REPTAB
                                 (result_key, row_no, parent_row_no,
                                  &AD_INVOICE_NO,
                                  &AD_PAYMENT_DATE,
                                  &AD_PAID_NET_AMOUNT,
                                  &AD_TAX_AMOUNT,
                                  &AD_PAID_GROSS_AMOUNT,
                                  &AD_PAYMENT_MATCHED_AMOUNT,
                                  &BLOCK_NO)
                              VALUES
                                 (result_key_, row_no_, parent_row_no_,
                                  advance_rec_.series_id||' '||advance_rec_.invoice_no,
                                  payment_data_tab_(i).payment_date,
                                  DECODE(pt_credit_invoice_, &FALSE, payment_data_tab_(i).paid_amount_excl_tax, ABS(payment_data_tab_(i).paid_amount_excl_tax)),
                                  payment_data_tab_(i).tax_amount,
                                  DECODE(pt_credit_invoice_, &FALSE, payment_data_tab_(i).paid_amount, ABS(payment_data_tab_(i).paid_amount)),
                                  ad_payment_matched_amount_,
                                  &BLOCK_ADVANCE_INVOICES);
                           END IF;

                           no_of_adv_invoices_        := no_of_adv_invoices_ + 1;
                           tot_paid_in_advance_       := tot_paid_in_advance_ + payment_data_tab_(i).paid_amount;
                           tot_ad_pay_matched_amount_ := tot_ad_pay_matched_amount_ + ad_payment_matched_amount_;
                           row_no_                    := row_no_ + 1;
                        END LOOP;
                     END IF;          
                  END;            
               END LOOP;           
            $END   

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ADVANCE_INVOICES');
            END IF;

            IF (no_of_adv_invoices_ > 0) THEN
               IF (do_xml_) THEN
                  -- gelr:pt_diff_tax_code_credit_invoic, begin
                  IF (pt_credit_invoice_ = &TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_PAID_IN_ADVANCE', ABS(tot_paid_in_advance_));
                  -- gelr:pt_diff_tax_code_credit_invoic, end   
                  ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_PAID_IN_ADVANCE', tot_paid_in_advance_);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_AD_PAY_MATCHED_AMOUNT', tot_ad_pay_matched_amount_); 
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &TOT_PAID_IN_ADVANCE, &TOT_AD_PAY_MATCHED_AMOUNT )
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_TOT_PAID_IN_ADVANCE, DECODE(pt_credit_invoice_, &FALSE, tot_paid_in_advance_, ABS(tot_paid_in_advance_)), tot_ad_pay_matched_amount_ );

                  row_no_ := row_no_ + 1;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'OTHER_INVOICES');
               END IF;

               FOR other_rec_ IN get_other_invoices(print_date_) LOOP
                  
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'OTHER_INVOICE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'OT_INVOICE_NO', other_rec_.series_id||' '||other_rec_.invoice_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'OT_DUE_DATE', other_rec_.due_date);                                           
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'OT_NET_AMOUNT', other_rec_.net_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'OT_TAX_AMOUNT', other_rec_.vat_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'OT_GROSS_AMOUNT', other_rec_.gross_amount);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'OTHER_INVOICE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &OT_INVOICE_NO,
                         &OT_DUE_DATE,
                         &OT_NET_AMOUNT,
                         &OT_TAX_AMOUNT,
                         &OT_GROSS_AMOUNT,
                         &BLOCK_NO)
                       VALUES
                        (result_key_, row_no_, parent_row_no_,
                         other_rec_.series_id||' '||other_rec_.invoice_no,
                         other_rec_.due_date,
                         other_rec_.net_amount,
                         other_rec_.vat_amount,
                         other_rec_.gross_amount,
                         &BLOCK_OTHER_INVOICES);
                  END IF;
                  offset_amount_incl_tax_ := 0;
                  IF (Invoice_API.Is_Correction_Invoice(company_, other_rec_.invoice_id) = Fnd_Boolean_API.DB_TRUE) THEN
                     IF other_rec_.gross_amount > 0 THEN
                        -- Correction increase invoice.
                        tot_pre_inv_deb_corr_ := tot_pre_inv_deb_corr_ + other_rec_.gross_amount;
                        offset_amount_incl_tax_ := Advance_Inv_Reference_API.Get_Inv_Offset_Tot(company_, other_rec_.invoice_id); 
                     ELSE
                        tot_pre_inv_cre_corr_ := tot_pre_inv_cre_corr_ + other_rec_.gross_amount;
                     END IF;
                  ELSIF other_rec_.invoice_type = 'CUSTORDDEB' THEN
                     -- Filter only customer order debit invoices.
                     IF (Invoice_API.Is_Adv_Or_Prepay_Based_Inv(company_, other_rec_.invoice_id) = Fnd_Boolean_API.DB_FALSE) THEN
                        tot_pre_inv_deb_corr_ := tot_pre_inv_deb_corr_ + other_rec_.gross_amount;
                        offset_amount_incl_tax_ := Advance_Inv_Reference_API.Get_Inv_Offset_Tot(company_, other_rec_.invoice_id); 
                     END IF; 
                  ELSIF other_rec_.invoice_type = 'CUSTORDCRE' THEN
                     -- Filter only customer order debit invoices.
                     IF (Invoice_API.Is_Adv_Or_Prepay_Based_Inv(company_, other_rec_.invoice_id)= Fnd_Boolean_API.DB_FALSE) THEN
                        tot_pre_inv_cre_corr_ := tot_pre_inv_cre_corr_ + other_rec_.gross_amount;
                     END IF;                   
                  END IF;
                  
                  tot_pre_invoiced_ := tot_pre_invoiced_ + offset_amount_incl_tax_;
                  
                  row_no_           := row_no_ + 1;
               END LOOP;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'OTHER_INVOICES');
               END IF;

               pre_unconsumed_advance_ :=  tot_paid_in_advance_ - tot_pre_invoiced_;

               IF (pre_unconsumed_advance_ < 0) THEN
                   pre_unconsumed_advance_ := 0;
               END IF;
               pre_consumed_advance_ := tot_paid_in_advance_ - pre_unconsumed_advance_;
               IF invoice_type_ = 'CUSTORDDEB' THEN
                  rem_amount_to_paid_ :=  gross_curr_amount_  - pre_unconsumed_advance_;
                  IF (rem_amount_to_paid_ < 0) THEN
                     rem_amount_to_paid_ := 0;
                  END IF;
                  advance_consumed_current_ := gross_curr_amount_ - rem_amount_to_paid_;
               ELSE
                  -- Correction increase invoice
                  rem_amount_to_paid_ :=  corr_gross_curr_amount_  - pre_unconsumed_advance_;
                  IF (rem_amount_to_paid_ < 0) THEN
                     rem_amount_to_paid_ := 0;
                  END IF;
                  advance_consumed_current_ := corr_gross_curr_amount_ - rem_amount_to_paid_;
               END IF;      

               rem_unconsumed_advance_ := pre_unconsumed_advance_ - advance_consumed_current_;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'OTHER_INVOICES_TOTALS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'OTHER_INVOICES_TOTAL');                  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_PRE_INV_DEB_CORR', tot_pre_inv_deb_corr_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_PRE_INV_CRE_CORR', tot_pre_inv_cre_corr_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_ADVANCE_RECEIVED', tot_paid_in_advance_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PRE_CONSUMED_ADVANCE', pre_consumed_advance_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PRE_UNCONSUMED_ADVANCE', pre_unconsumed_advance_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ADVANCE_CONSUMED_CURRENT', advance_consumed_current_);
                  -- gelr:tax_exemption_certify, begin
                  IF (tax_exemption_certify_enabled_ = 'Y') THEN 
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'REM_UNCONSUMED_ADVANCE', ABS(rem_unconsumed_advance_));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'REM_AMOUNT_TO_PAID', ABS(rem_amount_to_paid_));
                  ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'REM_UNCONSUMED_ADVANCE', rem_unconsumed_advance_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'REM_AMOUNT_TO_PAID', rem_amount_to_paid_);
                  END IF;
                  Xml_Record_Writer_SYS.End_Element(xml_, 'OTHER_INVOICES_TOTAL');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'OTHER_INVOICES_TOTALS');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                        &BLOCK_NO, &TOT_PRE_INV_DEB_CORR, &TOT_PRE_INV_CRE_CORR, &TOT_ADVANCE_RECEIVED, 
                        &PRE_CONSUMED_ADVANCE, &PRE_UNCONSUMED_ADVANCE, &ADVANCE_CONSUMED_CURRENT, 
                        &REM_UNCONSUMED_ADVANCE, 
                        &REM_AMOUNT_TO_PAID)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                        &BLOCK_TOT_PRE_INVOICED, tot_pre_inv_deb_corr_, tot_pre_inv_cre_corr_, tot_paid_in_advance_,
                        pre_consumed_advance_, pre_unconsumed_advance_, advance_consumed_current_, 
                        DECODE(pt_credit_invoice_, &FALSE, rem_unconsumed_advance_, ABS(rem_unconsumed_advance_)), 
                        DECODE(pt_credit_invoice_, &FALSE, rem_amount_to_paid_, ABS(rem_amount_to_paid_)));
               END IF;
            END IF;
         END IF;
         -----------------------------------------------------------------------------
         -- Advance Invoices
         -----------------------------------------------------------------------------
      END LOOP;
      
      -- gelr:prepayment_tax_document, begin               
      IF (prepayment_tax_document_ = Localization_Param_Yes_No_API.DB_YES) THEN  
         Ins_Tax_Doc_Det___(xml_, row_no_, result_key_, parent_row_no_, company_, invoice_id_, debit_inv_id_, tax_doc_, deb_tax_curr_rate_, curr_code_, do_xml_, do_rs_);
      END IF;   
      -- gelr:prepayment_tax_document, end        
      
      IF NOT record_found_ THEN
         Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found');
      END IF;
   
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
         Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
      END IF;
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE REPORTNAME
UNDEFINE DOCINVOICE
UNDEFINE DOCCREDITINVOICE
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE BLOCK_ORDER_LINES
UNDEFINE BLOCK_PACKAGE_LINES
UNDEFINE BLOCK_SUB_TOTAL
UNDEFINE BLOCK_CHARGE_GRP
UNDEFINE BLOCK_TOTALS
UNDEFINE BLOCK_CHARGE_LINES
UNDEFINE BLOCK_STAGED_BILLING
UNDEFINE BLOCK_TOTAL_EX_VAT
UNDEFINE BLOCK_TAXES
UNDEFINE BLOCK_EUR_TOTAL_EX_VAT
UNDEFINE BLOCK_EUR_TAXES
UNDEFINE BLOCK_EUR_TOTALS
UNDEFINE BLOCK_NOTES
UNDEFINE BLOCK_OPTIONS
UNDEFINE BLOCK_TOTAL_TAX
UNDEFINE BLOCK_BASE_TOTAL_EX_VAT
UNDEFINE BLOCK_BASE_TAXES
UNDEFINE BLOCK_BASE_TOTALS
UNDEFINE BLOCK_VAT
UNDEFINE BLOCK_SALESTAX
UNDEFINE BLOCK_INSTALLMENTS
UNDEFINE BLOCK_DISCOUNTS
UNDEFINE BLOCK_SUB_TOTAL_AR
UNDEFINE BLOCK_TOTAL_AR
UNDEFINE BLOCK_SUB_TOT_CHG_AR
UNDEFINE BLOCK_CHARACTERISTICS
UNDEFINE BLOCK_ADVANCE_INVOICES
UNDEFINE BLOCK_TOT_PAID_IN_ADVANCE
UNDEFINE BLOCK_OTHER_INVOICES
UNDEFINE BLOCK_TOT_PRE_INVOICED
UNDEFINE BLOCK_DELIVERIES
UNDEFINE BLOCK_PKG_DELIVERIES
UNDEFINE BLOCK_TAX_DISCOUNT
UNDEFINE BASE_CURR
UNDEFINE ORDER_NO
UNDEFINE DATE_ENTERED
UNDEFINE INVOICE_NO
UNDEFINE INVOICE_TYPE
UNDEFINE INVOICE_DATE
UNDEFINE AUTHORIZE_NAME
UNDEFINE CUSTOMER_NO
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE CUST_REF
UNDEFINE CUST_REF_DESC
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE BILL_ADDR_1
UNDEFINE BILL_ADDR_2
UNDEFINE BILL_ADDR_3
UNDEFINE BILL_ADDR_4
UNDEFINE BILL_ADDR_5
UNDEFINE BILL_ADDR_6
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE BILL_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LABEL_NOTE
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE DEBIT_INVOICE_REF
UNDEFINE VAT_NO
UNDEFINE WANTED_DELIVERY_DATE
UNDEFINE PAY_TERMS_DESC
UNDEFINE CURR_CODE
UNDEFINE COPY_TEXT
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE DUE_DATE
UNDEFINE PRINT_CONFIG_ID
UNDEFINE RMA_NO
UNDEFINE TAX_INVOICE_TYPE
UNDEFINE CUSTOMER_FAX
UNDEFINE CUSTOMER_EMAIL
UNDEFINE PRINTER_FLAG
UNDEFINE FAX_FLAG
UNDEFINE EMAIL_FLAG
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE COMP_ADDR_1
UNDEFINE COMP_ADDR_2
UNDEFINE COMP_ADDR_3
UNDEFINE COMP_ADDR_4
UNDEFINE COMP_ADDR_5
UNDEFINE COMP_ADDR_6
UNDEFINE COMP_ZIP_COUNTRY
UNDEFINE COMP_PHONE
UNDEFINE SALESMAN
UNDEFINE REGION_DISTRICT
UNDEFINE CUSTOMER_STATE_DESC
UNDEFINE DATE_CREATED
UNDEFINE START_MONTH_YEAR
UNDEFINE AUTH_EXP_DATE
UNDEFINE AUTHORIZATION_ID
UNDEFINE CUST_TAX_ID_NUMBER
UNDEFINE COMP_TAX_ID_NUMBER
UNDEFINE CUST_TAX_LIABILITY
UNDEFINE NUMERATION
UNDEFINE INVOICE_REFERENCE
UNDEFINE OUR_ID_TAX_OFF
UNDEFINE COMP_TAX_LIABILITY
UNDEFINE CUST_NUMBER_NAME
UNDEFINE COMP_CITY_DESC
UNDEFINE CUSTOMER_CITY_DESC
UNDEFINE CUSTOMER_ZIP_COUNTRY
UNDEFINE COMP_STATE_DESC
UNDEFINE ORDER_LINE_POS
UNDEFINE LINE_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE CUSTOMER_PART_NO
UNDEFINE CUSTOMER_PART_DESC
UNDEFINE CUSTOMER_PO_NO
UNDEFINE QTY_INVOICED
UNDEFINE SALES_UNIT_MEAS
UNDEFINE PRICE_PER_PRICE_UNIT
UNDEFINE ORDER_DISCOUNT
UNDEFINE PRICE_TOTAL
UNDEFINE DISCOUNT
UNDEFINE PRICE_QTY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE ORDER_LINE_NOTES
UNDEFINE CATALOG_NO_NOTES
UNDEFINE BLOCK_NO
UNDEFINE ORDER_NOTES
UNDEFINE DOCUMENT_PHRASE
UNDEFINE CUSTOMER_NOTES
UNDEFINE SUB_TOTAL_AMOUNT
UNDEFINE FEE_AMOUNT
UNDEFINE NET_CURR_AMOUNT
UNDEFINE VAT_CURR_AMOUNT
UNDEFINE ROUND_AMOUNT
UNDEFINE GROSS_CURR_AMOUNT
UNDEFINE EUR_NET_CURR_AMOUNT
UNDEFINE EUR_VAT_CURR_AMOUNT
UNDEFINE EUR_GROSS_CURR_AMOUNT
UNDEFINE CHARGE_TYPE
UNDEFINE CHARGE_TYPE_DESC
UNDEFINE CHARGE_AMOUNT
UNDEFINE CHARGED_QTY
UNDEFINE CHARGE_UNIT_MEAS
UNDEFINE TOTAL_CHARGED_AMOUNT
UNDEFINE CHARGE_TYPE_DOC_TEXT
UNDEFINE CHARGE_ROW_DOC_TEXT
UNDEFINE GROUP_DESC
UNDEFINE GROUP_TEXT
UNDEFINE GROUP_SUM
UNDEFINE STAGE
UNDEFINE DESCRIPTION
UNDEFINE TOTAL_ON_LINE
UNDEFINE STAGE_NOTES
UNDEFINE VAT_CODE
UNDEFINE VAT_PERCENTAGE
UNDEFINE VAT_SUM
UNDEFINE EUR_VAT_SUM
UNDEFINE REF_ID
UNDEFINE WARRANTY_DOC_TEXT
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE LINE_ORDER_NO
UNDEFINE LINE_DEBIT_INVOICE_REF
UNDEFINE LINE_CUSTOMER_PO_NO
UNDEFINE REAL_SHIP_DATE
UNDEFINE TAXABLE
UNDEFINE PAYMENT_REFERENCE
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE NOTE_TEXT
UNDEFINE NUMERATION_GROUP
UNDEFINE LOT_BATCH_NO
UNDEFINE COMP_REGISTER_CODE
UNDEFINE CUST_REGISTER_CODE
UNDEFINE TAX_CODE_DESC
UNDEFINE TAX_RATE
UNDEFINE TAX_AMOUNT
UNDEFINE SUB_TOTAL
UNDEFINE SUB_TOT_WITH_CHARGES
UNDEFINE TOTAL
UNDEFINE INVOICE_COPY_LABEL
UNDEFINE INSTALLMENT_ID
UNDEFINE PAY_METHOD_DESC
UNDEFINE INSTALLMENT_DUE_DATE
UNDEFINE INSTALLMENT_AMOUNT
UNDEFINE DISCOUNT_DATE
UNDEFINE DISCOUNT_AMOUNT
UNDEFINE LINE_SHIP_ADDR_1
UNDEFINE LINE_SHIP_VIA_DESC
UNDEFINE LINE_DEL_TERMS_DESC
UNDEFINE LINE_DEL_TERMS_LOCATION
UNDEFINE LINE_FORWARD_AGENT
UNDEFINE LINE_VAT_NO
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE AD_INVOICE_NO
UNDEFINE AD_PAYMENT_DATE
UNDEFINE AD_PAID_NET_AMOUNT
UNDEFINE AD_PAID_GROSS_AMOUNT
UNDEFINE TOT_PAID_IN_ADVANCE
UNDEFINE OT_INVOICE_NO
UNDEFINE OT_DUE_DATE
UNDEFINE OT_NET_AMOUNT
UNDEFINE OT_GROSS_AMOUNT
UNDEFINE REM_UNCONSUMED_ADVANCE
UNDEFINE REM_AMOUNT_TO_PAID
UNDEFINE AD_TAX_AMOUNT
UNDEFINE OT_TAX_AMOUNT
UNDEFINE PRE_INVOICE_NO
UNDEFINE ADDITIONAL_DISCOUNT
UNDEFINE HEADER_STATUS
UNDEFINE INVOICE_ID_STR
UNDEFINE TOTAL_PERCENTAGE
UNDEFINE DELIVERY
UNDEFINE CONTACT
UNDEFINE CHARGE_ORDER_NO
UNDEFINE PRICE_INCL_TAX
UNDEFINE PRICE_INCL_TAX_TOTAL
UNDEFINE CHARGE_INCL_TAX
UNDEFINE CHARGE_INCL_TAX_TOTAL
UNDEFINE PRINT_PRICES_INCL_TAX
UNDEFINE SEVERAL_VALUE
UNDEFINE PRINT_ADV_PAY_ON_CU_INV
UNDEFINE LINE_VAT_CODE
UNDEFINE LINE_DISC_AMOUNT
UNDEFINE TOTAL_UNIT_PRICE
UNDEFINE TAX_BASE_AMOUNT
UNDEFINE TAX_TEXTS
UNDEFINE TOTAL_DISCOUNT
UNDEFINE CHARGE_VAT_CODE
UNDEFINE PAYMENT
UNDEFINE DEBIT_TAX
UNDEFINE LINE_PAYMENT
UNDEFINE LINE_DEBIT_TAX
UNDEFINE SHIP_DATE_FIRST
UNDEFINE LINE_VAT_PERCENT
UNDEFINE CHARGE_VAT_PERCENT
UNDEFINE INVOICE_LINE_NO
UNDEFINE BASE_VAT_SUM
UNDEFINE GROSS_AMOUNT_IN_CURR
UNDEFINE VERBALLY_INVOICE_AMOUNT
UNDEFINE DUPLICATE_OPTION
UNDEFINE REF_INVOICE_DATE
UNDEFINE DATE_OF_DUPLICATE
UNDEFINE REF_INVOICE_LINE_DATE
UNDEFINE CORRECTION_TEXT
UNDEFINE CORR_TITLE
UNDEFINE INVOICE_AMOUNT 
UNDEFINE COR_TAX_CURR_CODE
UNDEFINE PAYMENT_METHOD
UNDEFINE BANK_ACCOUNT
UNDEFINE PAYMENT_METHOD_LINE
UNDEFINE BANK_ACCOUNT_LINE
UNDEFINE TAX_CURR_RATE
UNDEFINE DISCOUNT_PERCENT
UNDEFINE DISCOUNT_NET
UNDEFINE DISCOUNT_TAX_PERCENT
UNDEFINE DISCOUNT_TAX
UNDEFINE BANK_ACCOUNT_TEXT
UNDEFINE PREPAYMENT_EXIST
UNDEFINE PREPAYMENT_TEXT
UNDEFINE PRE_NET_CURR_AMOUNT
UNDEFINE PRE_VAT_CURR_AMOUNT
UNDEFINE PRE_GROSS_CURR_AMOUNT
UNDEFINE PREPAY_INV_NO
UNDEFINE PREPAY_INV_SERIES_ID
UNDEFINE PREPAY_TAX_AMOUNT
UNDEFINE DELIVERY_NOTE_REF
UNDEFINE PRE_TAX_CURR_CODE
UNDEFINE GTIN_NO
UNDEFINE CHARGE_PERCENT        
UNDEFINE CHARGE_PERCENT_BASIS  
UNDEFINE RETURN_LINE_NOTES
UNDEFINE REPORT_FOOT
UNDEFINE TAX_FEE_AMOUNT
UNDEFINE BIC_CODE_HEAD 
UNDEFINE BIC_CODE_LINE
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE AIRWAY_BILL_NO
UNDEFINE ORDER_LINE_NO
UNDEFINE GRP_SUM_INCL_TAX
UNDEFINE SUB_TOTAL_INCL_TAX
UNDEFINE TAX_FEE_BASE_AMOUNT
UNDEFINE NET_SALES_PRICE_CURR
UNDEFINE ORDER_REL_NO
UNDEFINE BASE_NET_CURR_AMOUNT
UNDEFINE SERIAL_NO
UNDEFINE VAT_REDUCTION_AT_PAY
UNDEFINE RENTAL_TRANSACTION_START_DATE
UNDEFINE RENTAL_TRANSACTION_END_DATE
UNDEFINE ON_RENTAL_QTY
UNDEFINE INVOICED_DURATION_DAYS
UNDEFINE RENTAL_MODE
UNDEFINE LATEST_SHIP_DATE
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE CUSTOMS_STAT_NO
UNDEFINE PACKAGE_LINE_NO
UNDEFINE PACKAGE_ORDER_LINE_POS
UNDEFINE HEADER_INVOICE_TEXT
UNDEFINE INVOICE_TEXT
UNDEFINE COR_GROSS_AMOUNT_IN_CURR
UNDEFINE COR_VAT_CODE
UNDEFINE COR_DESCRIPTION
UNDEFINE COR_TAX_FEE_AMOUNT
UNDEFINE COR_TOTAL_UNIT_PRICE
UNDEFINE COR_TAX_BASE_AMOUNT
UNDEFINE COR_TAX_TEXTS
UNDEFINE COR_TOTAL_DISCOUNT
UNDEFINE COR_VAT_PERCENTAGE
UNDEFINE COR_BASE_VAT_SUM
UNDEFINE COR_BASE_VAT_CODE
UNDEFINE COR_BASE_DESCRIPTION
UNDEFINE COR_BASE_VAT_PERCENTAGE
UNDEFINE BLOCK_CORR_TAX_CODE_LINE
UNDEFINE BLOCK_COR_BASE_TAX_LINE
UNDEFINE TOT_TAX_AMOUNT
UNDEFINE COR_TOT_TAX_AMOUNT
UNDEFINE RENTAL_LINE_NO
UNDEFINE RENTAL_ORDER_LINE_POS
UNDEFINE FREE_OF_CHARGE_TAX_BASIS
UNDEFINE COMPANY_BEARING_TAX_AMT
UNDEFINE TOT_PRE_INV_DEB_CORR
UNDEFINE TOT_PRE_INV_CRE_CORR
UNDEFINE TOT_ADVANCE_RECEIVED
UNDEFINE PRE_CONSUMED_ADVANCE
UNDEFINE PRE_UNCONSUMED_ADVANCE
UNDEFINE ADVANCE_CONSUMED_CURRENT
UNDEFINE MULTIPLE_TAX_LINES
UNDEFINE HEADER_CORRECTION_REASON
UNDEFINE CORRECTION_REASON
UNDEFINE COMP_BRANCH_ID                
UNDEFINE COMP_BRANCH_DESC              
UNDEFINE CUSTOMER_BRANCH               
UNDEFINE COR_TAX_CHARACTER
UNDEFINE COR_BASE_TAX_CHARACTER
UNDEFINE PREFIX_A
UNDEFINE PREFIX_B
UNDEFINE PREFIX_C
UNDEFINE PREFIX_A_TITLE
UNDEFINE PREFIX_B_TITLE
UNDEFINE PREFIX_C_TITLE
UNDEFINE SERIAL_NUMBER
-- gelr:additional_tax_numbers:INFI9-090, begin
UNDEFINE TAX_ID_NO_TEXT1
UNDEFINE TAX_ID_NO_TEXT2
UNDEFINE TAX_ID_NO_TEXT3
UNDEFINE TAX_ID_NO_TEXT4
UNDEFINE TAX_ID_NO_TEXT5
UNDEFINE TAX_ID_NO_TEXT6
UNDEFINE TAX_ID_NO2
UNDEFINE TAX_ID_NO3
UNDEFINE TAX_ID_NO4
UNDEFINE TAX_ID_NO5
UNDEFINE TAX_ID_NO6
-- gelr:additional_tax_numbers:INFI9-090, end
-- gelr:in_hsn_sac_codes, GLOW-2262, begin
UNDEFINE CGST_TAX_AMNT
UNDEFINE SGST_TAX_AMNT
UNDEFINE CGST_TAX_PCT
UNDEFINE SGST_TAX_PCT
UNDEFINE IGST_TAX_AMNT
UNDEFINE UGST_TAX_AMNT
UNDEFINE IGST_TAX_PCT
UNDEFINE UGST_TAX_PCT
UNDEFINE OTHER_TAX_AMNT
UNDEFINE OTHER_TAX_PCT
UNDEFINE CGST_FEE_TYPE
UNDEFINE SGST_FEE_TYPE
UNDEFINE IGST_FEE_TYPE
UNDEFINE UGST_FEE_TYPE
UNDEFINE OTHER_FEE_TYPE
-- gelr:in_hsn_sac_codes, GLOW-2262, end
-- gelr:prepayment_tax_document, begin
UNDEFINE MATCHED_TAX_DOC_BASE
UNDEFINE MATCHED_TAX_DOC_TAX
UNDEFINE TAX_DOC_BASE
UNDEFINE TAX_DOC_TAX
UNDEFINE MATCHED_TAX_DOC_BASE_ACC_CURR
UNDEFINE MATCHED_TAX_DOC_TAX_ACC_CURR
UNDEFINE TAX_DOC_BASE_ACC_CURR       
UNDEFINE TAX_DOC_TAX_ACC_CURR        
-- gelr:prepayment_tax_document, end
-- gelr:service_statistics_no, begin
UNDEFINE SERVICE_STATISTICS_NO
-- gelr:service_statistics_no, end

-- gelr:hu_org_invoice_no_ref begin
UNDEFINE ORG_SERIES_ID                 
UNDEFINE ORG_INVOICE_NO               
-- gelr:hu_org_invoice_no_ref begin
-- gelr:tax_fulfilment_date, begin
UNDEFINE TAX_FULFILMENT_DATE   
-- gelr:tax_fulfilment_date, end
-- gelr:prepayment_tax_document, begin
UNDEFINE ORIG_TAX_DOC_SERIES_REF 
UNDEFINE ORIG_TAX_DOC_NUMBER_REF
-- gelr:prepayment_tax_document, end
-- gelr:hu_vat_control_statement, begin 
UNDEFINE COMP_GROUP_TAX_ID_NUMBER
UNDEFINE CUST_GROUP_TAX_ID_NUMBER
UNDEFINE COMP_DOCUMENT_TAX_ID_NUMBER
UNDEFINE CUST_DOCUMENT_TAX_ID_NUMBER
-- gelr:hu_vat_control_statement, end 
-- gelr:digital_signature, begin
UNDEFINE DIGITAL_SIGNATURE
-- gelr:digital_signature, end
-- gelr:pt_erp_certification, begin
UNDEFINE DOCUMENT_TYPE                  = EXT_S6 
UNDEFINE ERP_CERTIFICATE                = EXT_S19
-- gelr:pt_erp_certification, end
-- gelr:additional_tax_numbers, bug 148523, begin
UNDEFINE CUST_DELIVERY_GSTIN
UNDEFINE CUST_DOCUMENT_GSTIN
UNDEFINE COMPANY_DOCUMENT_ADDR
UNDEFINE COMPANY_DELIVERY_ADDR
UNDEFINE USE_BUYER_DOC_ADDR
UNDEFINE CUST_DOCUMENT_PAN
UNDEFINE CUST_DELIVERY_PAN
UNDEFINE COMPANY_GSTIN
UNDEFINE COMPANY_PAN
-- gelr:additional_tax_numbers, bug 148523, end
